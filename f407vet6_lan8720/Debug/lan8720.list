
lan8720.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b6c  0800db44  0800db44  0001db44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106b0  080106b0  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080106b0  080106b0  000206b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106b8  080106b8  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106b8  080106b8  000206b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106bc  080106bc  000206bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080106c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006834  20000078  08010738  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200068ac  08010738  000368ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002586a  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049b9  00000000  00000000  00055912  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb0  00000000  00000000  0005a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f18  00000000  00000000  0005b280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b4c7  00000000  00000000  0005c198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b995  00000000  00000000  0008765f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d80a7  00000000  00000000  000a2ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017b09b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ac  00000000  00000000  0017b118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db2c 	.word	0x0800db2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800db2c 	.word	0x0800db2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 f9f8 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f80c 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f874 	bl	8000668 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000580:	f002 fa66 	bl	8002a50 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ethernetif_input(&gnetif);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <main+0x20>)
 8000586:	f002 fe3b 	bl	8003200 <ethernetif_input>
	sys_check_timeouts();
 800058a:	f009 feb3 	bl	800a2f4 <sys_check_timeouts>
	ethernetif_input(&gnetif);
 800058e:	e7f9      	b.n	8000584 <main+0x14>
 8000590:	20000218 	.word	0x20000218

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f00c fb9a 	bl	800ccdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000608:	23a8      	movs	r3, #168	; 0xa8
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fddf 	bl	80021dc <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000624:	f000 f864 	bl	80006f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2105      	movs	r1, #5
 8000646:	4618      	mov	r0, r3
 8000648:	f002 f838 	bl	80026bc <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000652:	f000 f84d 	bl	80006f0 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_GPIO_Init+0x84>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <MX_GPIO_Init+0x84>)
 8000678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_GPIO_Init+0x84>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_GPIO_Init+0x84>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a16      	ldr	r2, [pc, #88]	; (80006ec <MX_GPIO_Init+0x84>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_GPIO_Init+0x84>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_GPIO_Init+0x84>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <MX_GPIO_Init+0x84>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_GPIO_Init+0x84>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_GPIO_Init+0x84>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <MX_GPIO_Init+0x84>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_GPIO_Init+0x84>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <Error_Handler+0x6>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <HAL_MspInit+0x4c>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070c:	6453      	str	r3, [r2, #68]	; 0x44
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x4c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	; 0x40
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f93a 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	e00a      	b.n	80007c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ae:	f3af 8000 	nop.w
 80007b2:	4601      	mov	r1, r0
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	b2ca      	uxtb	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	3301      	adds	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbf0      	blt.n	80007ae <_read+0x12>
	}

return len;
 80007cc:	687b      	ldr	r3, [r7, #4]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	e009      	b.n	80007fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	60ba      	str	r2, [r7, #8]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbf1      	blt.n	80007e8 <_write+0x12>
	}
	return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_close>:

int _close(int file)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	return -1;
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000836:	605a      	str	r2, [r3, #4]
	return 0;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <_isatty>:

int _isatty(int file)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
	return 1;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
	return 0;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d205      	bcs.n	80008b4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <_sbrk+0x6c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a06      	ldr	r2, [pc, #24]	; (80008dc <_sbrk+0x64>)
 80008c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	371c      	adds	r7, #28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	20020000 	.word	0x20020000
 80008d8:	00004000 	.word	0x00004000
 80008dc:	20000094 	.word	0x20000094
 80008e0:	200068b0 	.word	0x200068b0
 80008e4:	200068a8 	.word	0x200068a8

080008e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <SystemInit+0x28>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f2:	4a07      	ldr	r2, [pc, #28]	; (8000910 <SystemInit+0x28>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <SystemInit+0x28>)
 80008fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000902:	609a      	str	r2, [r3, #8]
#endif
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800094c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000918:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800091a:	e003      	b.n	8000924 <LoopCopyDataInit>

0800091c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800091e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000920:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000922:	3104      	adds	r1, #4

08000924 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000928:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800092a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800092c:	d3f6      	bcc.n	800091c <CopyDataInit>
  ldr  r2, =_sbss
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000930:	e002      	b.n	8000938 <LoopFillZerobss>

08000932 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000932:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000934:	f842 3b04 	str.w	r3, [r2], #4

08000938 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800093a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800093c:	d3f9      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800093e:	f7ff ffd3 	bl	80008e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000942:	f00c f98d 	bl	800cc60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000946:	f7ff fe13 	bl	8000570 <main>
  bx  lr    
 800094a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800094c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000950:	080106c0 	.word	0x080106c0
  ldr  r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000958:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800095c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000960:	200068ac 	.word	0x200068ac

08000964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC_IRQHandler>
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <HAL_Init+0x40>)
 8000972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_Init+0x40>)
 800097e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_Init+0x40>)
 800098a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 f92f 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000996:	2000      	movs	r0, #0
 8000998:	f000 f808 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800099c:	f7ff feac 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023c00 	.word	0x40023c00

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_InitTick+0x54>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x58>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f939 	bl	8000c42 <HAL_SYSTICK_Config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00e      	b.n	80009f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d80a      	bhi.n	80009f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f000 f90f 	bl	8000c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_InitTick+0x5c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000210 	.word	0x20000210

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000210 	.word	0x20000210

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff ffee 	bl	8000a34 <HAL_GetTick>
 8000a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d005      	beq.n	8000a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_Delay+0x40>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a72:	bf00      	nop
 8000a74:	f7ff ffde 	bl	8000a34 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d8f7      	bhi.n	8000a74 <HAL_Delay+0x28>
  {
  }
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000008 	.word	0x20000008

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc0:	d301      	bcc.n	8000bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00f      	b.n	8000be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <SysTick_Config+0x40>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f7ff ff8e 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x40>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff47 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff5c 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff8e 	bl	8000b48 <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5d 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffb0 	bl	8000bb0 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000c6c:	4baa      	ldr	r3, [pc, #680]	; (8000f18 <HAL_ETH_Init+0x2bc>)
 8000c6e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e185      	b.n	8000f8e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d106      	bne.n	8000c9c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f002 f80c 	bl	8002cb4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b9e      	ldr	r3, [pc, #632]	; (8000f1c <HAL_ETH_Init+0x2c0>)
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	4a9d      	ldr	r2, [pc, #628]	; (8000f1c <HAL_ETH_Init+0x2c0>)
 8000ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000caa:	6453      	str	r3, [r2, #68]	; 0x44
 8000cac:	4b9b      	ldr	r3, [pc, #620]	; (8000f1c <HAL_ETH_Init+0x2c0>)
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000cb8:	4b99      	ldr	r3, [pc, #612]	; (8000f20 <HAL_ETH_Init+0x2c4>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	4a98      	ldr	r2, [pc, #608]	; (8000f20 <HAL_ETH_Init+0x2c4>)
 8000cbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000cc2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000cc4:	4b96      	ldr	r3, [pc, #600]	; (8000f20 <HAL_ETH_Init+0x2c4>)
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	4994      	ldr	r1, [pc, #592]	; (8000f20 <HAL_ETH_Init+0x2c4>)
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f042 0201 	orr.w	r2, r2, #1
 8000ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ce8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000cea:	f7ff fea3 	bl	8000a34 <HAL_GetTick>
 8000cee:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000cf0:	e011      	b.n	8000d16 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000cf2:	f7ff fe9f 	bl	8000a34 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d00:	d909      	bls.n	8000d16 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2203      	movs	r2, #3
 8000d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e13b      	b.n	8000f8e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1e4      	bne.n	8000cf2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f023 031c 	bic.w	r3, r3, #28
 8000d36:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000d38:	f001 fe7e 	bl	8002a38 <HAL_RCC_GetHCLKFreq>
 8000d3c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	4a78      	ldr	r2, [pc, #480]	; (8000f24 <HAL_ETH_Init+0x2c8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d908      	bls.n	8000d58 <HAL_ETH_Init+0xfc>
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	4a77      	ldr	r2, [pc, #476]	; (8000f28 <HAL_ETH_Init+0x2cc>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d804      	bhi.n	8000d58 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e027      	b.n	8000da8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	4a73      	ldr	r2, [pc, #460]	; (8000f28 <HAL_ETH_Init+0x2cc>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d908      	bls.n	8000d72 <HAL_ETH_Init+0x116>
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	4a72      	ldr	r2, [pc, #456]	; (8000f2c <HAL_ETH_Init+0x2d0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d804      	bhi.n	8000d72 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f043 030c 	orr.w	r3, r3, #12
 8000d6e:	61fb      	str	r3, [r7, #28]
 8000d70:	e01a      	b.n	8000da8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4a6d      	ldr	r2, [pc, #436]	; (8000f2c <HAL_ETH_Init+0x2d0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d903      	bls.n	8000d82 <HAL_ETH_Init+0x126>
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4a6c      	ldr	r2, [pc, #432]	; (8000f30 <HAL_ETH_Init+0x2d4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d911      	bls.n	8000da6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4a6a      	ldr	r2, [pc, #424]	; (8000f30 <HAL_ETH_Init+0x2d4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d908      	bls.n	8000d9c <HAL_ETH_Init+0x140>
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4a69      	ldr	r2, [pc, #420]	; (8000f34 <HAL_ETH_Init+0x2d8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d804      	bhi.n	8000d9c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	e005      	b.n	8000da8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	e000      	b.n	8000da8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000da6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000db4:	2100      	movs	r1, #0
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 fb9a 	bl	80014f0 <HAL_ETH_WritePHYRegister>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00b      	beq.n	8000dda <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000dc6:	6939      	ldr	r1, [r7, #16]
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 fd4f 	bl	800186c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e0d9      	b.n	8000f8e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000dda:	20ff      	movs	r0, #255	; 0xff
 8000ddc:	f7ff fe36 	bl	8000a4c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80a7 	beq.w	8000f38 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000dea:	f7ff fe23 	bl	8000a34 <HAL_GetTick>
 8000dee:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	461a      	mov	r2, r3
 8000df6:	2101      	movs	r1, #1
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 fb11 	bl	8001420 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000dfe:	f7ff fe19 	bl	8000a34 <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d90f      	bls.n	8000e30 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000e14:	6939      	ldr	r1, [r7, #16]
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 fd28 	bl	800186c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e0ae      	b.n	8000f8e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0da      	beq.n	8000df0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000e3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e3e:	2100      	movs	r1, #0
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 fb55 	bl	80014f0 <HAL_ETH_WritePHYRegister>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00b      	beq.n	8000e64 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000e50:	6939      	ldr	r1, [r7, #16]
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 fd0a 	bl	800186c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000e60:	2301      	movs	r3, #1
 8000e62:	e094      	b.n	8000f8e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000e64:	f7ff fde6 	bl	8000a34 <HAL_GetTick>
 8000e68:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2101      	movs	r1, #1
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 fad4 	bl	8001420 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000e78:	f7ff fddc 	bl	8000a34 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d90f      	bls.n	8000eaa <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000e8e:	6939      	ldr	r1, [r7, #16]
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 fceb 	bl	800186c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e071      	b.n	8000f8e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f003 0320 	and.w	r3, r3, #32
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0da      	beq.n	8000e6a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	461a      	mov	r2, r3
 8000eba:	211f      	movs	r1, #31
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 faaf 	bl	8001420 <HAL_ETH_ReadPHYRegister>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00b      	beq.n	8000ee0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ecc:	6939      	ldr	r1, [r7, #16]
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fccc 	bl	800186c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000edc:	2301      	movs	r3, #1
 8000ede:	e056      	b.n	8000f8e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	e002      	b.n	8000efa <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	e037      	b.n	8000f7c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	e032      	b.n	8000f7c <HAL_ETH_Init+0x320>
 8000f16:	bf00      	nop
 8000f18:	03938700 	.word	0x03938700
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40013800 	.word	0x40013800
 8000f24:	01312cff 	.word	0x01312cff
 8000f28:	02160ebf 	.word	0x02160ebf
 8000f2c:	039386ff 	.word	0x039386ff
 8000f30:	05f5e0ff 	.word	0x05f5e0ff
 8000f34:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	085b      	lsrs	r3, r3, #1
 8000f46:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 facd 	bl	80014f0 <HAL_ETH_WritePHYRegister>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00b      	beq.n	8000f74 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f60:	6939      	ldr	r1, [r7, #16]
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 fc82 	bl	800186c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e00c      	b.n	8000f8e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000f74:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f78:	f7ff fd68 	bl	8000a4c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000f7c:	6939      	ldr	r1, [r7, #16]
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 fc74 	bl	800186c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop

08000f98 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d101      	bne.n	8000fb8 <HAL_ETH_DMATxDescListInit+0x20>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e052      	b.n	800105e <HAL_ETH_DMATxDescListInit+0xc6>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e030      	b.n	8001036 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	015b      	lsls	r3, r3, #5
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	4413      	add	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fe4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000fec:	fb02 f303 	mul.w	r3, r2, r3
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d105      	bne.n	800100e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3b01      	subs	r3, #1
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	429a      	cmp	r2, r3
 8001016:	d208      	bcs.n	800102a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	015b      	lsls	r3, r3, #5
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	4413      	add	r3, r2
 8001022:	461a      	mov	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	e002      	b.n	8001030 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3ca      	bcc.n	8000fd4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001048:	3310      	adds	r3, #16
 800104a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800106a:	b480      	push	{r7}
 800106c:	b087      	sub	sp, #28
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001082:	2b01      	cmp	r3, #1
 8001084:	d101      	bne.n	800108a <HAL_ETH_DMARxDescListInit+0x20>
 8001086:	2302      	movs	r3, #2
 8001088:	e056      	b.n	8001138 <HAL_ETH_DMARxDescListInit+0xce>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2202      	movs	r2, #2
 8001096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	e034      	b.n	8001110 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	015b      	lsls	r3, r3, #5
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	4413      	add	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010b6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80010be:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	461a      	mov	r2, r3
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d105      	bne.n	80010e8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d208      	bcs.n	8001104 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	015b      	lsls	r3, r3, #5
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	4413      	add	r3, r2
 80010fc:	461a      	mov	r2, r3
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	e002      	b.n	800110a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d3c6      	bcc.n	80010a6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001122:	330c      	adds	r3, #12
 8001124:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_ETH_TransmitFrame+0x24>
 8001164:	2302      	movs	r3, #2
 8001166:	e0cd      	b.n	8001304 <HAL_ETH_TransmitFrame+0x1c0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2202      	movs	r2, #2
 8001174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d109      	bne.n	8001192 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800118e:	2301      	movs	r3, #1
 8001190:	e0b8      	b.n	8001304 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	da09      	bge.n	80011b0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2212      	movs	r2, #18
 80011a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0a9      	b.n	8001304 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d915      	bls.n	80011e6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	4a54      	ldr	r2, [pc, #336]	; (8001310 <HAL_ETH_TransmitFrame+0x1cc>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0a9b      	lsrs	r3, r3, #10
 80011c4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	4b51      	ldr	r3, [pc, #324]	; (8001310 <HAL_ETH_TransmitFrame+0x1cc>)
 80011ca:	fba3 1302 	umull	r1, r3, r3, r2
 80011ce:	0a9b      	lsrs	r3, r3, #10
 80011d0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80011d4:	fb01 f303 	mul.w	r3, r1, r3
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e001      	b.n	80011ea <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80011e6:	2301      	movs	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d11c      	bne.n	800122a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80011fe:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800120a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800121a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
 8001228:	e04b      	b.n	80012c2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	e044      	b.n	80012ba <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800123e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001254:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800125e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3b01      	subs	r3, #1
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	429a      	cmp	r2, r3
 8001268:	d116      	bne.n	8001298 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001278:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	4a25      	ldr	r2, [pc, #148]	; (8001314 <HAL_ETH_TransmitFrame+0x1d0>)
 800127e:	fb02 f203 	mul.w	r2, r2, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	4413      	add	r3, r2
 8001286:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800128a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001296:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80012a6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	461a      	mov	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	3301      	adds	r3, #1
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d3b6      	bcc.n	8001230 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ca:	3314      	adds	r3, #20
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00d      	beq.n	80012f2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012de:	3314      	adds	r3, #20
 80012e0:	2204      	movs	r2, #4
 80012e2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ec:	3304      	adds	r3, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	ac02b00b 	.word	0xac02b00b
 8001314:	fffffa0c 	.word	0xfffffa0c

08001318 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_ETH_GetReceivedFrame+0x1a>
 800132e:	2302      	movs	r3, #2
 8001330:	e070      	b.n	8001414 <HAL_ETH_GetReceivedFrame+0xfc>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2202      	movs	r2, #2
 800133e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db5a      	blt.n	8001402 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	2b00      	cmp	r3, #0
 8001358:	d030      	beq.n	80013bc <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	2b01      	cmp	r3, #1
 800136a:	d103      	bne.n	8001374 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001388:	3b04      	subs	r3, #4
 800138a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	461a      	mov	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e02b      	b.n	8001414 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d010      	beq.n	80013ec <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	461a      	mov	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
 80013ea:	e00a      	b.n	8001402 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	460b      	mov	r3, r1
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b82      	cmp	r3, #130	; 0x82
 8001440:	d101      	bne.n	8001446 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001442:	2302      	movs	r3, #2
 8001444:	e050      	b.n	80014e8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2282      	movs	r2, #130	; 0x82
 800144a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f003 031c 	and.w	r3, r3, #28
 800145c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8a1b      	ldrh	r3, [r3, #16]
 8001462:	02db      	lsls	r3, r3, #11
 8001464:	b29b      	uxth	r3, r3
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4313      	orrs	r3, r2
 800146a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800146c:	897b      	ldrh	r3, [r7, #10]
 800146e:	019b      	lsls	r3, r3, #6
 8001470:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	4313      	orrs	r3, r2
 8001478:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f023 0302 	bic.w	r3, r3, #2
 8001480:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001492:	f7ff facf 	bl	8000a34 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001498:	e015      	b.n	80014c6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800149a:	f7ff facb 	bl	8000a34 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d309      	bcc.n	80014be <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e014      	b.n	80014e8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1e4      	bne.n	800149a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	460b      	mov	r3, r1
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b42      	cmp	r3, #66	; 0x42
 8001510:	d101      	bne.n	8001516 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001512:	2302      	movs	r3, #2
 8001514:	e04e      	b.n	80015b4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2242      	movs	r2, #66	; 0x42
 800151a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f003 031c 	and.w	r3, r3, #28
 800152c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8a1b      	ldrh	r3, [r3, #16]
 8001532:	02db      	lsls	r3, r3, #11
 8001534:	b29b      	uxth	r3, r3
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800153c:	897b      	ldrh	r3, [r7, #10]
 800153e:	019b      	lsls	r3, r3, #6
 8001540:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	4313      	orrs	r3, r2
 8001548:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800156c:	f7ff fa62 	bl	8000a34 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001572:	e015      	b.n	80015a0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001574:	f7ff fa5e 	bl	8000a34 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001582:	d309      	bcc.n	8001598 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e00d      	b.n	80015b4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1e4      	bne.n	8001574 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_ETH_Start+0x16>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e01f      	b.n	8001612 <HAL_ETH_Start+0x56>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fb44 	bl	8001c70 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fb7b 	bl	8001ce4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fc12 	bl	8001e18 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 fbaf 	bl	8001d58 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fbdc 	bl	8001db8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_ETH_Stop+0x16>
 800162c:	2302      	movs	r3, #2
 800162e:	e01f      	b.n	8001670 <HAL_ETH_Stop+0x56>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fba1 	bl	8001d88 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fbce 	bl	8001de8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fb66 	bl	8001d1e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fbe0 	bl	8001e18 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fb26 	bl	8001caa <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_ETH_ConfigMAC+0x1c>
 8001690:	2302      	movs	r3, #2
 8001692:	e0e4      	b.n	800185e <HAL_ETH_ConfigMAC+0x1e6>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2202      	movs	r2, #2
 80016a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80b1 	beq.w	800180e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4b6c      	ldr	r3, [pc, #432]	; (8001868 <HAL_ETH_ConfigMAC+0x1f0>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80016c4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80016ca:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80016d0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80016d6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80016dc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80016e2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80016e8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80016ee:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80016f4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80016fa:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001700:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001706:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff f994 	bl	8000a4c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001734:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800173a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001740:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001746:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800174c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001752:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800175e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001760:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff f96e 	bl	8000a4c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001780:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800178a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	f64f 7341 	movw	r3, #65345	; 0xff41
 800179a:	4013      	ands	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80017a8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80017ae:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80017b4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80017ba:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80017c0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80017d8:	2001      	movs	r0, #1
 80017da:	f7ff f937 	bl	8000a4c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80017fe:	2001      	movs	r0, #1
 8001800:	f7ff f924 	bl	8000a4c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	61da      	str	r2, [r3, #28]
 800180c:	e01e      	b.n	800184c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800181c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800183e:	2001      	movs	r0, #1
 8001840:	f7ff f904 	bl	8000a4c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	ff20810f 	.word	0xff20810f

0800186c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0b0      	sub	sp, #192	; 0xc0
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001888:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001890:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800189a:	2300      	movs	r3, #0
 800189c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80018b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b6:	663b      	str	r3, [r7, #96]	; 0x60
 80018b8:	e001      	b.n	80018be <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80018be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018c8:	2300      	movs	r3, #0
 80018ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80018d8:	2340      	movs	r3, #64	; 0x40
 80018da:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800192a:	2300      	movs	r3, #0
 800192c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001940:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001944:	4bac      	ldr	r3, [pc, #688]	; (8001bf8 <ETH_MACDMAConfig+0x38c>)
 8001946:	4013      	ands	r3, r2
 8001948:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800194c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800194e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001950:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001954:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001958:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800195e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001962:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001966:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800196c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800196e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001970:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001974:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001978:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800197a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800197c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800197e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001980:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001982:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001986:	4313      	orrs	r3, r2
 8001988:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001994:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff f853 	bl	8000a4c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019ae:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80019b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019b4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80019b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80019b8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80019ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80019be:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80019c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80019c4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80019c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80019ca:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80019cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80019d0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80019d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80019dc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80019de:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff f82e 	bl	8000a4c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019f8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a02:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a0c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a1c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a20:	4013      	ands	r3, r2
 8001a22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001a26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a2a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001a2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001a30:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001a36:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001a3c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001a42:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001a44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001a48:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001a4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a5c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f7fe ffef 	bl	8000a4c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a76:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a78:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001a7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f7fe ffda 	bl	8000a4c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aa0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aaa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001ab0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ab4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001aca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ada:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af6:	3318      	adds	r3, #24
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001afe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b02:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <ETH_MACDMAConfig+0x390>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b0a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b0e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001b10:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001b12:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001b14:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001b16:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001b18:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001b1a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001b1c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001b1e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001b20:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001b22:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001b26:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001b2a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b30:	4313      	orrs	r3, r2
 8001b32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3e:	3318      	adds	r3, #24
 8001b40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b44:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4e:	3318      	adds	r3, #24
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7fe ff78 	bl	8000a4c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b64:	3318      	adds	r3, #24
 8001b66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b6a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b70:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001b74:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001b78:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001b7c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b80:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001b82:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001b86:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b94:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7fe ff51 	bl	8000a4c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d10f      	bne.n	8001be0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc8:	331c      	adds	r3, #28
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	331c      	adds	r3, #28
 8001bde:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	461a      	mov	r2, r3
 8001be6:	2100      	movs	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f809 	bl	8001c00 <ETH_MACAddressConfig>
}
 8001bee:	bf00      	nop
 8001bf0:	37c0      	adds	r7, #192	; 0xc0
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	ff20810f 	.word	0xff20810f
 8001bfc:	f8de3f23 	.word	0xf8de3f23

08001c00 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3305      	adds	r3, #5
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	3204      	adds	r2, #4
 8001c18:	7812      	ldrb	r2, [r2, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <ETH_MACAddressConfig+0x68>)
 8001c22:	4413      	add	r3, r2
 8001c24:	461a      	mov	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3303      	adds	r3, #3
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	061a      	lsls	r2, r3, #24
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3302      	adds	r3, #2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	4313      	orrs	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <ETH_MACAddressConfig+0x6c>)
 8001c52:	4413      	add	r3, r2
 8001c54:	461a      	mov	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	6013      	str	r3, [r2, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40028040 	.word	0x40028040
 8001c6c:	40028044 	.word	0x40028044

08001c70 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0208 	orr.w	r2, r2, #8
 8001c8a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f000 f8e9 	bl	8001e6c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	601a      	str	r2, [r3, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0208 	bic.w	r2, r2, #8
 8001cc4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f000 f8cc 	bl	8001e6c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	601a      	str	r2, [r3, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0204 	orr.w	r2, r2, #4
 8001cfe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f000 f8af 	bl	8001e6c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0204 	bic.w	r2, r2, #4
 8001d38:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f000 f892 	bl	8001e6c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d68:	3318      	adds	r3, #24
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d78:	3318      	adds	r3, #24
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d98:	3318      	adds	r3, #24
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da8:	3318      	adds	r3, #24
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc8:	3318      	adds	r3, #24
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0202 	orr.w	r2, r2, #2
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd8:	3318      	adds	r3, #24
 8001dda:	601a      	str	r2, [r3, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df8:	3318      	adds	r3, #24
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0202 	bic.w	r2, r2, #2
 8001e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e08:	3318      	adds	r3, #24
 8001e0a:	601a      	str	r2, [r3, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3c:	3318      	adds	r3, #24
 8001e3e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e48:	3318      	adds	r3, #24
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f000 f80c 	bl	8001e6c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5e:	3318      	adds	r3, #24
 8001e60:	601a      	str	r2, [r3, #0]
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <ETH_Delay+0x34>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <ETH_Delay+0x38>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0a5b      	lsrs	r3, r3, #9
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001e88:	bf00      	nop
  } 
  while (Delay --);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e5a      	subs	r2, r3, #1
 8001e8e:	60fa      	str	r2, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f9      	bne.n	8001e88 <ETH_Delay+0x1c>
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	10624dd3 	.word	0x10624dd3

08001ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e16b      	b.n	800219c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	f040 815a 	bne.w	8002196 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d00b      	beq.n	8001f02 <HAL_GPIO_Init+0x5a>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d007      	beq.n	8001f02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ef6:	2b11      	cmp	r3, #17
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b12      	cmp	r3, #18
 8001f00:	d130      	bne.n	8001f64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 0201 	and.w	r2, r3, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0xfc>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b12      	cmp	r3, #18
 8001fa2:	d123      	bne.n	8001fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	69b9      	ldr	r1, [r7, #24]
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0203 	and.w	r2, r3, #3
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80b4 	beq.w	8002196 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b5f      	ldr	r3, [pc, #380]	; (80021b0 <HAL_GPIO_Init+0x308>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a5e      	ldr	r2, [pc, #376]	; (80021b0 <HAL_GPIO_Init+0x308>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b5c      	ldr	r3, [pc, #368]	; (80021b0 <HAL_GPIO_Init+0x308>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204a:	4a5a      	ldr	r2, [pc, #360]	; (80021b4 <HAL_GPIO_Init+0x30c>)
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a51      	ldr	r2, [pc, #324]	; (80021b8 <HAL_GPIO_Init+0x310>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d02b      	beq.n	80020ce <HAL_GPIO_Init+0x226>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a50      	ldr	r2, [pc, #320]	; (80021bc <HAL_GPIO_Init+0x314>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d025      	beq.n	80020ca <HAL_GPIO_Init+0x222>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_GPIO_Init+0x318>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01f      	beq.n	80020c6 <HAL_GPIO_Init+0x21e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <HAL_GPIO_Init+0x31c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d019      	beq.n	80020c2 <HAL_GPIO_Init+0x21a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_GPIO_Init+0x320>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x216>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x324>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_GPIO_Init+0x212>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_GPIO_Init+0x328>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <HAL_GPIO_Init+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4a      	ldr	r2, [pc, #296]	; (80021d4 <HAL_GPIO_Init+0x32c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_GPIO_Init+0x20a>
 80020ae:	2307      	movs	r3, #7
 80020b0:	e00e      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020b2:	2308      	movs	r3, #8
 80020b4:	e00c      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020b6:	2306      	movs	r3, #6
 80020b8:	e00a      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e008      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020be:	2304      	movs	r3, #4
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020c2:	2303      	movs	r3, #3
 80020c4:	e004      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e002      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020ce:	2300      	movs	r3, #0
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	f002 0203 	and.w	r2, r2, #3
 80020d6:	0092      	lsls	r2, r2, #2
 80020d8:	4093      	lsls	r3, r2
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e0:	4934      	ldr	r1, [pc, #208]	; (80021b4 <HAL_GPIO_Init+0x30c>)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ee:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <HAL_GPIO_Init+0x330>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002112:	4a31      	ldr	r2, [pc, #196]	; (80021d8 <HAL_GPIO_Init+0x330>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <HAL_GPIO_Init+0x330>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213c:	4a26      	ldr	r2, [pc, #152]	; (80021d8 <HAL_GPIO_Init+0x330>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002142:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <HAL_GPIO_Init+0x330>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002166:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <HAL_GPIO_Init+0x330>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_GPIO_Init+0x330>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002190:	4a11      	ldr	r2, [pc, #68]	; (80021d8 <HAL_GPIO_Init+0x330>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3301      	adds	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	2b0f      	cmp	r3, #15
 80021a0:	f67f ae90 	bls.w	8001ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a4:	bf00      	nop
 80021a6:	3724      	adds	r7, #36	; 0x24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40013800 	.word	0x40013800
 80021b8:	40020000 	.word	0x40020000
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40020c00 	.word	0x40020c00
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40021400 	.word	0x40021400
 80021d0:	40021800 	.word	0x40021800
 80021d4:	40021c00 	.word	0x40021c00
 80021d8:	40013c00 	.word	0x40013c00

080021dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e25b      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d075      	beq.n	80022e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021fa:	4ba3      	ldr	r3, [pc, #652]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d00c      	beq.n	8002220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002206:	4ba0      	ldr	r3, [pc, #640]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220e:	2b08      	cmp	r3, #8
 8002210:	d112      	bne.n	8002238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002212:	4b9d      	ldr	r3, [pc, #628]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221e:	d10b      	bne.n	8002238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	4b99      	ldr	r3, [pc, #612]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d05b      	beq.n	80022e4 <HAL_RCC_OscConfig+0x108>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d157      	bne.n	80022e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e236      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d106      	bne.n	8002250 <HAL_RCC_OscConfig+0x74>
 8002242:	4b91      	ldr	r3, [pc, #580]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a90      	ldr	r2, [pc, #576]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e01d      	b.n	800228c <HAL_RCC_OscConfig+0xb0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x98>
 800225a:	4b8b      	ldr	r3, [pc, #556]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a8a      	ldr	r2, [pc, #552]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b88      	ldr	r3, [pc, #544]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a87      	ldr	r2, [pc, #540]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e00b      	b.n	800228c <HAL_RCC_OscConfig+0xb0>
 8002274:	4b84      	ldr	r3, [pc, #528]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a83      	ldr	r2, [pc, #524]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800227a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	4b81      	ldr	r3, [pc, #516]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a80      	ldr	r2, [pc, #512]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d013      	beq.n	80022bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7fe fbce 	bl	8000a34 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe fbca 	bl	8000a34 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1fb      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b76      	ldr	r3, [pc, #472]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0xc0>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fbba 	bl	8000a34 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe fbb6 	bl	8000a34 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1e7      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	4b6c      	ldr	r3, [pc, #432]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0xe8>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d063      	beq.n	80023ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022f2:	4b65      	ldr	r3, [pc, #404]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fe:	4b62      	ldr	r3, [pc, #392]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002306:	2b08      	cmp	r3, #8
 8002308:	d11c      	bne.n	8002344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b5f      	ldr	r3, [pc, #380]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x152>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1bb      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232e:	4b56      	ldr	r3, [pc, #344]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4952      	ldr	r1, [pc, #328]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	e03a      	b.n	80023ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800234c:	4b4f      	ldr	r3, [pc, #316]	; (800248c <HAL_RCC_OscConfig+0x2b0>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe fb6f 	bl	8000a34 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235a:	f7fe fb6b 	bl	8000a34 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e19c      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002378:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4940      	ldr	r1, [pc, #256]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_RCC_OscConfig+0x2b0>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fb4e 	bl	8000a34 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe fb4a 	bl	8000a34 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e17b      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	4b36      	ldr	r3, [pc, #216]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d030      	beq.n	8002428 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d016      	beq.n	80023fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_RCC_OscConfig+0x2b4>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe fb2e 	bl	8000a34 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fb2a 	bl	8000a34 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e15b      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	4b26      	ldr	r3, [pc, #152]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x200>
 80023fa:	e015      	b.n	8002428 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCC_OscConfig+0x2b4>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7fe fb17 	bl	8000a34 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240a:	f7fe fb13 	bl	8000a34 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e144      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800241e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f0      	bne.n	800240a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80a0 	beq.w	8002576 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10f      	bne.n	8002466 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002462:	2301      	movs	r3, #1
 8002464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_OscConfig+0x2b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d121      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_RCC_OscConfig+0x2b8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_RCC_OscConfig+0x2b8>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247e:	f7fe fad9 	bl	8000a34 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	e011      	b.n	80024aa <HAL_RCC_OscConfig+0x2ce>
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	42470000 	.word	0x42470000
 8002490:	42470e80 	.word	0x42470e80
 8002494:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002498:	f7fe facc 	bl	8000a34 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0fd      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	4b81      	ldr	r3, [pc, #516]	; (80026b0 <HAL_RCC_OscConfig+0x4d4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d106      	bne.n	80024cc <HAL_RCC_OscConfig+0x2f0>
 80024be:	4b7d      	ldr	r3, [pc, #500]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	4a7c      	ldr	r2, [pc, #496]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ca:	e01c      	b.n	8002506 <HAL_RCC_OscConfig+0x32a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d10c      	bne.n	80024ee <HAL_RCC_OscConfig+0x312>
 80024d4:	4b77      	ldr	r3, [pc, #476]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	4a76      	ldr	r2, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	6713      	str	r3, [r2, #112]	; 0x70
 80024e0:	4b74      	ldr	r3, [pc, #464]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	4a73      	ldr	r2, [pc, #460]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6713      	str	r3, [r2, #112]	; 0x70
 80024ec:	e00b      	b.n	8002506 <HAL_RCC_OscConfig+0x32a>
 80024ee:	4b71      	ldr	r3, [pc, #452]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a70      	ldr	r2, [pc, #448]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a6d      	ldr	r2, [pc, #436]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d015      	beq.n	800253a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250e:	f7fe fa91 	bl	8000a34 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	e00a      	b.n	800252c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe fa8d 	bl	8000a34 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e0bc      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ee      	beq.n	8002516 <HAL_RCC_OscConfig+0x33a>
 8002538:	e014      	b.n	8002564 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253a:	f7fe fa7b 	bl	8000a34 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fa77 	bl	8000a34 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e0a6      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002558:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ee      	bne.n	8002542 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d105      	bne.n	8002576 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256a:	4b52      	ldr	r3, [pc, #328]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a51      	ldr	r2, [pc, #324]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 8002570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8092 	beq.w	80026a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002580:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d05c      	beq.n	8002646 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d141      	bne.n	8002618 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002594:	4b48      	ldr	r3, [pc, #288]	; (80026b8 <HAL_RCC_OscConfig+0x4dc>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe fa4b 	bl	8000a34 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a2:	f7fe fa47 	bl	8000a34 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e078      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b4:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	019b      	lsls	r3, r3, #6
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	3b01      	subs	r3, #1
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	061b      	lsls	r3, r3, #24
 80025e4:	4933      	ldr	r1, [pc, #204]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ea:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_RCC_OscConfig+0x4dc>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fa20 	bl	8000a34 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fa1c 	bl	8000a34 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e04d      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x41c>
 8002616:	e045      	b.n	80026a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x4dc>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe fa09 	bl	8000a34 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fa05 	bl	8000a34 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e036      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002638:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f0      	bne.n	8002626 <HAL_RCC_OscConfig+0x44a>
 8002644:	e02e      	b.n	80026a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e029      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <HAL_RCC_OscConfig+0x4d8>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	429a      	cmp	r2, r3
 8002664:	d11c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d115      	bne.n	80026a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800267a:	4013      	ands	r3, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002680:	4293      	cmp	r3, r2
 8002682:	d10d      	bne.n	80026a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800268e:	429a      	cmp	r2, r3
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40007000 	.word	0x40007000
 80026b4:	40023800 	.word	0x40023800
 80026b8:	42470060 	.word	0x42470060

080026bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0cc      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b68      	ldr	r3, [pc, #416]	; (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d90c      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b65      	ldr	r3, [pc, #404]	; (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b63      	ldr	r3, [pc, #396]	; (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b8      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b59      	ldr	r3, [pc, #356]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800271a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b50      	ldr	r3, [pc, #320]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	494d      	ldr	r1, [pc, #308]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d044      	beq.n	80027dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d119      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d003      	beq.n	800277a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002776:	2b03      	cmp	r3, #3
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e06f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e067      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b37      	ldr	r3, [pc, #220]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4934      	ldr	r1, [pc, #208]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7fe f942 	bl	8000a34 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7fe f93e 	bl	8000a34 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e04f      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b25      	ldr	r3, [pc, #148]	; (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d20c      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b22      	ldr	r3, [pc, #136]	; (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_RCC_ClockConfig+0x1b8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e032      	b.n	800286a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4916      	ldr	r1, [pc, #88]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	490e      	ldr	r1, [pc, #56]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002842:	f000 f821 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002846:	4601      	mov	r1, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	fa21 f303 	lsr.w	r3, r1, r3
 800285a:	4a09      	ldr	r2, [pc, #36]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe f8a2 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023c00 	.word	0x40023c00
 8002878:	40023800 	.word	0x40023800
 800287c:	08010524 	.word	0x08010524
 8002880:	20000000 	.word	0x20000000
 8002884:	20000004 	.word	0x20000004

08002888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	2300      	movs	r3, #0
 8002898:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d007      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0x32>
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d008      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x38>
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 80b4 	bne.w	8002a1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028b4:	4b5e      	ldr	r3, [pc, #376]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028b6:	60bb      	str	r3, [r7, #8]
       break;
 80028b8:	e0b3      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ba:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80028bc:	60bb      	str	r3, [r7, #8]
      break;
 80028be:	e0b0      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c0:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ca:	4b58      	ldr	r3, [pc, #352]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d04a      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d6:	4b55      	ldr	r3, [pc, #340]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	099b      	lsrs	r3, r3, #6
 80028dc:	f04f 0400 	mov.w	r4, #0
 80028e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	ea03 0501 	and.w	r5, r3, r1
 80028ec:	ea04 0602 	and.w	r6, r4, r2
 80028f0:	4629      	mov	r1, r5
 80028f2:	4632      	mov	r2, r6
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	f04f 0400 	mov.w	r4, #0
 80028fc:	0154      	lsls	r4, r2, #5
 80028fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002902:	014b      	lsls	r3, r1, #5
 8002904:	4619      	mov	r1, r3
 8002906:	4622      	mov	r2, r4
 8002908:	1b49      	subs	r1, r1, r5
 800290a:	eb62 0206 	sbc.w	r2, r2, r6
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f04f 0400 	mov.w	r4, #0
 8002916:	0194      	lsls	r4, r2, #6
 8002918:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800291c:	018b      	lsls	r3, r1, #6
 800291e:	1a5b      	subs	r3, r3, r1
 8002920:	eb64 0402 	sbc.w	r4, r4, r2
 8002924:	f04f 0100 	mov.w	r1, #0
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	00e2      	lsls	r2, r4, #3
 800292e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002932:	00d9      	lsls	r1, r3, #3
 8002934:	460b      	mov	r3, r1
 8002936:	4614      	mov	r4, r2
 8002938:	195b      	adds	r3, r3, r5
 800293a:	eb44 0406 	adc.w	r4, r4, r6
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	0262      	lsls	r2, r4, #9
 8002948:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800294c:	0259      	lsls	r1, r3, #9
 800294e:	460b      	mov	r3, r1
 8002950:	4614      	mov	r4, r2
 8002952:	4618      	mov	r0, r3
 8002954:	4621      	mov	r1, r4
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f04f 0400 	mov.w	r4, #0
 800295c:	461a      	mov	r2, r3
 800295e:	4623      	mov	r3, r4
 8002960:	f7fd fc86 	bl	8000270 <__aeabi_uldivmod>
 8002964:	4603      	mov	r3, r0
 8002966:	460c      	mov	r4, r1
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e049      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296c:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	099b      	lsrs	r3, r3, #6
 8002972:	f04f 0400 	mov.w	r4, #0
 8002976:	f240 11ff 	movw	r1, #511	; 0x1ff
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	ea03 0501 	and.w	r5, r3, r1
 8002982:	ea04 0602 	and.w	r6, r4, r2
 8002986:	4629      	mov	r1, r5
 8002988:	4632      	mov	r2, r6
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	f04f 0400 	mov.w	r4, #0
 8002992:	0154      	lsls	r4, r2, #5
 8002994:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002998:	014b      	lsls	r3, r1, #5
 800299a:	4619      	mov	r1, r3
 800299c:	4622      	mov	r2, r4
 800299e:	1b49      	subs	r1, r1, r5
 80029a0:	eb62 0206 	sbc.w	r2, r2, r6
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	f04f 0400 	mov.w	r4, #0
 80029ac:	0194      	lsls	r4, r2, #6
 80029ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029b2:	018b      	lsls	r3, r1, #6
 80029b4:	1a5b      	subs	r3, r3, r1
 80029b6:	eb64 0402 	sbc.w	r4, r4, r2
 80029ba:	f04f 0100 	mov.w	r1, #0
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	00e2      	lsls	r2, r4, #3
 80029c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029c8:	00d9      	lsls	r1, r3, #3
 80029ca:	460b      	mov	r3, r1
 80029cc:	4614      	mov	r4, r2
 80029ce:	195b      	adds	r3, r3, r5
 80029d0:	eb44 0406 	adc.w	r4, r4, r6
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	02a2      	lsls	r2, r4, #10
 80029de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029e2:	0299      	lsls	r1, r3, #10
 80029e4:	460b      	mov	r3, r1
 80029e6:	4614      	mov	r4, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	4621      	mov	r1, r4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f04f 0400 	mov.w	r4, #0
 80029f2:	461a      	mov	r2, r3
 80029f4:	4623      	mov	r3, r4
 80029f6:	f7fd fc3b 	bl	8000270 <__aeabi_uldivmod>
 80029fa:	4603      	mov	r3, r0
 80029fc:	460c      	mov	r4, r1
 80029fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	60bb      	str	r3, [r7, #8]
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a1e:	60bb      	str	r3, [r7, #8]
      break;
 8002a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a22:	68bb      	ldr	r3, [r7, #8]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	00f42400 	.word	0x00f42400
 8002a34:	007a1200 	.word	0x007a1200

08002a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000000 	.word	0x20000000

08002a50 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002a56:	4b8d      	ldr	r3, [pc, #564]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002a58:	22c0      	movs	r2, #192	; 0xc0
 8002a5a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002a5c:	4b8b      	ldr	r3, [pc, #556]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002a5e:	22a8      	movs	r2, #168	; 0xa8
 8002a60:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002a62:	4b8a      	ldr	r3, [pc, #552]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 8002a68:	4b88      	ldr	r3, [pc, #544]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002a6e:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002a70:	22ff      	movs	r2, #255	; 0xff
 8002a72:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002a74:	4b86      	ldr	r3, [pc, #536]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002a76:	22ff      	movs	r2, #255	; 0xff
 8002a78:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002a80:	4b83      	ldr	r3, [pc, #524]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002a86:	4b83      	ldr	r3, [pc, #524]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002a88:	22c0      	movs	r2, #192	; 0xc0
 8002a8a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002a8c:	4b81      	ldr	r3, [pc, #516]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002a8e:	22a8      	movs	r2, #168	; 0xa8
 8002a90:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8002a92:	4b80      	ldr	r3, [pc, #512]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002a98:	4b7e      	ldr	r3, [pc, #504]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002a9e:	f000 fcb9 	bl	8003414 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002aa2:	4b7a      	ldr	r3, [pc, #488]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	061a      	lsls	r2, r3, #24
 8002aa8:	4b78      	ldr	r3, [pc, #480]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	4b76      	ldr	r3, [pc, #472]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002ab2:	789b      	ldrb	r3, [r3, #2]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	4a74      	ldr	r2, [pc, #464]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002aba:	78d2      	ldrb	r2, [r2, #3]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	061a      	lsls	r2, r3, #24
 8002ac0:	4b72      	ldr	r3, [pc, #456]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	0619      	lsls	r1, r3, #24
 8002ac6:	4b71      	ldr	r3, [pc, #452]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002ac8:	785b      	ldrb	r3, [r3, #1]
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	4319      	orrs	r1, r3
 8002ace:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002ad0:	789b      	ldrb	r3, [r3, #2]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	496d      	ldr	r1, [pc, #436]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002ad8:	78c9      	ldrb	r1, [r1, #3]
 8002ada:	430b      	orrs	r3, r1
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	4b69      	ldr	r3, [pc, #420]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	0619      	lsls	r1, r3, #24
 8002aea:	4b68      	ldr	r3, [pc, #416]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002aec:	785b      	ldrb	r3, [r3, #1]
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	4319      	orrs	r1, r3
 8002af2:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002af4:	789b      	ldrb	r3, [r3, #2]
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	430b      	orrs	r3, r1
 8002afa:	4964      	ldr	r1, [pc, #400]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002afc:	78c9      	ldrb	r1, [r1, #3]
 8002afe:	430b      	orrs	r3, r1
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b06:	431a      	orrs	r2, r3
 8002b08:	4b60      	ldr	r3, [pc, #384]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	0619      	lsls	r1, r3, #24
 8002b0e:	4b5f      	ldr	r3, [pc, #380]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	4319      	orrs	r1, r3
 8002b16:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002b18:	789b      	ldrb	r3, [r3, #2]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	495b      	ldr	r1, [pc, #364]	; (8002c8c <MX_LWIP_Init+0x23c>)
 8002b20:	78c9      	ldrb	r1, [r1, #3]
 8002b22:	430b      	orrs	r3, r1
 8002b24:	0e1b      	lsrs	r3, r3, #24
 8002b26:	4313      	orrs	r3, r2
 8002b28:	4a5b      	ldr	r2, [pc, #364]	; (8002c98 <MX_LWIP_Init+0x248>)
 8002b2a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002b2c:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	061a      	lsls	r2, r3, #24
 8002b32:	4b57      	ldr	r3, [pc, #348]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b34:	785b      	ldrb	r3, [r3, #1]
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b3c:	789b      	ldrb	r3, [r3, #2]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	4313      	orrs	r3, r2
 8002b42:	4a53      	ldr	r2, [pc, #332]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b44:	78d2      	ldrb	r2, [r2, #3]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	061a      	lsls	r2, r3, #24
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	0619      	lsls	r1, r3, #24
 8002b50:	4b4f      	ldr	r3, [pc, #316]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b52:	785b      	ldrb	r3, [r3, #1]
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	4319      	orrs	r1, r3
 8002b58:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b5a:	789b      	ldrb	r3, [r3, #2]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	494b      	ldr	r1, [pc, #300]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b62:	78c9      	ldrb	r1, [r1, #3]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	4b48      	ldr	r3, [pc, #288]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	0619      	lsls	r1, r3, #24
 8002b74:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	041b      	lsls	r3, r3, #16
 8002b7a:	4319      	orrs	r1, r3
 8002b7c:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b7e:	789b      	ldrb	r3, [r3, #2]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	430b      	orrs	r3, r1
 8002b84:	4942      	ldr	r1, [pc, #264]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b86:	78c9      	ldrb	r1, [r1, #3]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b90:	431a      	orrs	r2, r3
 8002b92:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	0619      	lsls	r1, r3, #24
 8002b98:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002b9a:	785b      	ldrb	r3, [r3, #1]
 8002b9c:	041b      	lsls	r3, r3, #16
 8002b9e:	4319      	orrs	r1, r3
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002ba2:	789b      	ldrb	r3, [r3, #2]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	4939      	ldr	r1, [pc, #228]	; (8002c90 <MX_LWIP_Init+0x240>)
 8002baa:	78c9      	ldrb	r1, [r1, #3]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	0e1b      	lsrs	r3, r3, #24
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	4a3a      	ldr	r2, [pc, #232]	; (8002c9c <MX_LWIP_Init+0x24c>)
 8002bb4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002bb6:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	061a      	lsls	r2, r3, #24
 8002bbc:	4b35      	ldr	r3, [pc, #212]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	4b33      	ldr	r3, [pc, #204]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002bc6:	789b      	ldrb	r3, [r3, #2]
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	4a31      	ldr	r2, [pc, #196]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002bce:	78d2      	ldrb	r2, [r2, #3]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	061a      	lsls	r2, r3, #24
 8002bd4:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	0619      	lsls	r1, r3, #24
 8002bda:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002bdc:	785b      	ldrb	r3, [r3, #1]
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	4319      	orrs	r1, r3
 8002be2:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002be4:	789b      	ldrb	r3, [r3, #2]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	430b      	orrs	r3, r1
 8002bea:	492a      	ldr	r1, [pc, #168]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002bec:	78c9      	ldrb	r1, [r1, #3]
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	0619      	lsls	r1, r3, #24
 8002bfe:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002c00:	785b      	ldrb	r3, [r3, #1]
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	4319      	orrs	r1, r3
 8002c06:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002c08:	789b      	ldrb	r3, [r3, #2]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	4921      	ldr	r1, [pc, #132]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002c10:	78c9      	ldrb	r1, [r1, #3]
 8002c12:	430b      	orrs	r3, r1
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	0619      	lsls	r1, r3, #24
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	4319      	orrs	r1, r3
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002c2c:	789b      	ldrb	r3, [r3, #2]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	430b      	orrs	r3, r1
 8002c32:	4918      	ldr	r1, [pc, #96]	; (8002c94 <MX_LWIP_Init+0x244>)
 8002c34:	78c9      	ldrb	r1, [r1, #3]
 8002c36:	430b      	orrs	r3, r1
 8002c38:	0e1b      	lsrs	r3, r3, #24
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <MX_LWIP_Init+0x250>)
 8002c3e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002c40:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <MX_LWIP_Init+0x254>)
 8002c42:	9302      	str	r3, [sp, #8]
 8002c44:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <MX_LWIP_Init+0x258>)
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <MX_LWIP_Init+0x250>)
 8002c4e:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <MX_LWIP_Init+0x24c>)
 8002c50:	4911      	ldr	r1, [pc, #68]	; (8002c98 <MX_LWIP_Init+0x248>)
 8002c52:	4816      	ldr	r0, [pc, #88]	; (8002cac <MX_LWIP_Init+0x25c>)
 8002c54:	f001 f884 	bl	8003d60 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002c58:	4814      	ldr	r0, [pc, #80]	; (8002cac <MX_LWIP_Init+0x25c>)
 8002c5a:	f001 fa33 	bl	80040c4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <MX_LWIP_Init+0x25c>)
 8002c60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002c70:	480e      	ldr	r0, [pc, #56]	; (8002cac <MX_LWIP_Init+0x25c>)
 8002c72:	f001 fa37 	bl	80040e4 <netif_set_up>
 8002c76:	e002      	b.n	8002c7e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002c78:	480c      	ldr	r0, [pc, #48]	; (8002cac <MX_LWIP_Init+0x25c>)
 8002c7a:	f001 fa9f 	bl	80041bc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002c7e:	490c      	ldr	r1, [pc, #48]	; (8002cb0 <MX_LWIP_Init+0x260>)
 8002c80:	480a      	ldr	r0, [pc, #40]	; (8002cac <MX_LWIP_Init+0x25c>)
 8002c82:	f001 facd 	bl	8004220 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002c86:	bf00      	nop
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000254 	.word	0x20000254
 8002c90:	20000250 	.word	0x20000250
 8002c94:	20000214 	.word	0x20000214
 8002c98:	2000024c 	.word	0x2000024c
 8002c9c:	20000258 	.word	0x20000258
 8002ca0:	2000025c 	.word	0x2000025c
 8002ca4:	0800cab5 	.word	0x0800cab5
 8002ca8:	08003241 	.word	0x08003241
 8002cac:	20000218 	.word	0x20000218
 8002cb0:	080032ad 	.word	0x080032ad

08002cb4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08e      	sub	sp, #56	; 0x38
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a46      	ldr	r2, [pc, #280]	; (8002dec <HAL_ETH_MspInit+0x138>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	f040 8085 	bne.w	8002de2 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	623b      	str	r3, [r7, #32]
 8002cdc:	4b44      	ldr	r3, [pc, #272]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002ce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce8:	4b41      	ldr	r3, [pc, #260]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	4a3c      	ldr	r2, [pc, #240]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002cfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d02:	6313      	str	r3, [r2, #48]	; 0x30
 8002d04:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4a35      	ldr	r2, [pc, #212]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	4b33      	ldr	r3, [pc, #204]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	4b2f      	ldr	r3, [pc, #188]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a2e      	ldr	r2, [pc, #184]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	4b28      	ldr	r3, [pc, #160]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6313      	str	r3, [r2, #48]	; 0x30
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d6e:	f043 0302 	orr.w	r3, r3, #2
 8002d72:	6313      	str	r3, [r2, #48]	; 0x30
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <HAL_ETH_MspInit+0x13c>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002d80:	2332      	movs	r3, #50	; 0x32
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d90:	230b      	movs	r3, #11
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4816      	ldr	r0, [pc, #88]	; (8002df4 <HAL_ETH_MspInit+0x140>)
 8002d9c:	f7ff f884 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002da0:	2386      	movs	r3, #134	; 0x86
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2303      	movs	r3, #3
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002db0:	230b      	movs	r3, #11
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db8:	4619      	mov	r1, r3
 8002dba:	480f      	ldr	r0, [pc, #60]	; (8002df8 <HAL_ETH_MspInit+0x144>)
 8002dbc:	f7ff f874 	bl	8001ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002dc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dd2:	230b      	movs	r3, #11
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4807      	ldr	r0, [pc, #28]	; (8002dfc <HAL_ETH_MspInit+0x148>)
 8002dde:	f7ff f863 	bl	8001ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002de2:	bf00      	nop
 8002de4:	3738      	adds	r7, #56	; 0x38
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40028000 	.word	0x40028000
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40020000 	.word	0x40020000
 8002dfc:	40020400 	.word	0x40020400

08002e00 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002e0c:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <low_level_init+0x144>)
 8002e0e:	4a4e      	ldr	r2, [pc, #312]	; (8002f48 <low_level_init+0x148>)
 8002e10:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002e12:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <low_level_init+0x144>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8002e18:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <low_level_init+0x144>)
 8002e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e1e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8002e20:	4b48      	ldr	r3, [pc, #288]	; (8002f44 <low_level_init+0x144>)
 8002e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e26:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002e28:	4b46      	ldr	r3, [pc, #280]	; (8002f44 <low_level_init+0x144>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002e36:	23e1      	movs	r3, #225	; 0xe1
 8002e38:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002e42:	2300      	movs	r3, #0
 8002e44:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002e46:	4a3f      	ldr	r2, [pc, #252]	; (8002f44 <low_level_init+0x144>)
 8002e48:	f107 0308 	add.w	r3, r7, #8
 8002e4c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <low_level_init+0x144>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002e54:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <low_level_init+0x144>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002e5a:	4b3a      	ldr	r3, [pc, #232]	; (8002f44 <low_level_init+0x144>)
 8002e5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e60:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002e62:	4838      	ldr	r0, [pc, #224]	; (8002f44 <low_level_init+0x144>)
 8002e64:	f7fd fefa 	bl	8000c5c <HAL_ETH_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d108      	bne.n	8002e84 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002e84:	2304      	movs	r3, #4
 8002e86:	4a31      	ldr	r2, [pc, #196]	; (8002f4c <low_level_init+0x14c>)
 8002e88:	4931      	ldr	r1, [pc, #196]	; (8002f50 <low_level_init+0x150>)
 8002e8a:	482e      	ldr	r0, [pc, #184]	; (8002f44 <low_level_init+0x144>)
 8002e8c:	f7fe f884 	bl	8000f98 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002e90:	2304      	movs	r3, #4
 8002e92:	4a30      	ldr	r2, [pc, #192]	; (8002f54 <low_level_init+0x154>)
 8002e94:	4930      	ldr	r1, [pc, #192]	; (8002f58 <low_level_init+0x158>)
 8002e96:	482b      	ldr	r0, [pc, #172]	; (8002f44 <low_level_init+0x144>)
 8002e98:	f7fe f8e7 	bl	800106a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2206      	movs	r2, #6
 8002ea0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002ea4:	4b27      	ldr	r3, [pc, #156]	; (8002f44 <low_level_init+0x144>)
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002eb0:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <low_level_init+0x144>)
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	785a      	ldrb	r2, [r3, #1]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002ebc:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <low_level_init+0x144>)
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	789a      	ldrb	r2, [r3, #2]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <low_level_init+0x144>)
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	78da      	ldrb	r2, [r3, #3]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <low_level_init+0x144>)
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	791a      	ldrb	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <low_level_init+0x144>)
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	795a      	ldrb	r2, [r3, #5]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002ef2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002efa:	f043 030a 	orr.w	r3, r3, #10
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8002f06:	480f      	ldr	r0, [pc, #60]	; (8002f44 <low_level_init+0x144>)
 8002f08:	f7fe fb58 	bl	80015bc <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	461a      	mov	r2, r3
 8002f12:	211d      	movs	r1, #29
 8002f14:	480b      	ldr	r0, [pc, #44]	; (8002f44 <low_level_init+0x144>)
 8002f16:	f7fe fa83 	bl	8001420 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f043 030b 	orr.w	r3, r3, #11
 8002f20:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	461a      	mov	r2, r3
 8002f26:	211d      	movs	r1, #29
 8002f28:	4806      	ldr	r0, [pc, #24]	; (8002f44 <low_level_init+0x144>)
 8002f2a:	f7fe fae1 	bl	80014f0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8002f2e:	f107 0310 	add.w	r3, r7, #16
 8002f32:	461a      	mov	r2, r3
 8002f34:	211d      	movs	r1, #29
 8002f36:	4803      	ldr	r0, [pc, #12]	; (8002f44 <low_level_init+0x144>)
 8002f38:	f7fe fa72 	bl	8001420 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8002f3c:	bf00      	nop
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20001b30 	.word	0x20001b30
 8002f48:	40028000 	.word	0x40028000
 8002f4c:	20001b78 	.word	0x20001b78
 8002f50:	20000260 	.word	0x20000260
 8002f54:	200002e0 	.word	0x200002e0
 8002f58:	20001ab0 	.word	0x20001ab0

08002f5c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8002f66:	4b4b      	ldr	r3, [pc, #300]	; (8003094 <low_level_output+0x138>)
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8002f7e:	4b45      	ldr	r3, [pc, #276]	; (8003094 <low_level_output+0x138>)
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	623b      	str	r3, [r7, #32]
 8002f8c:	e05a      	b.n	8003044 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	da03      	bge.n	8002f9e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8002f96:	23f8      	movs	r3, #248	; 0xf8
 8002f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8002f9c:	e05c      	b.n	8003058 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	895b      	ldrh	r3, [r3, #10]
 8002fa2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002fa8:	e02f      	b.n	800300a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	18d0      	adds	r0, r2, r3
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	18d1      	adds	r1, r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f009 fe80 	bl	800ccc6 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da03      	bge.n	8002fdc <low_level_output+0x80>
        {
          errval = ERR_USE;
 8002fd4:	23f8      	movs	r3, #248	; 0xf8
 8002fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8002fda:	e03d      	b.n	8003058 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8002fec:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002ff8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003004:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4413      	add	r3, r2
 8003010:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003014:	4293      	cmp	r3, r2
 8003016:	d8c8      	bhi.n	8002faa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	18d0      	adds	r0, r2, r3
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4413      	add	r3, r2
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4619      	mov	r1, r3
 800302a:	f009 fe4c 	bl	800ccc6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1a1      	bne.n	8002f8e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800304a:	6979      	ldr	r1, [r7, #20]
 800304c:	4811      	ldr	r0, [pc, #68]	; (8003094 <low_level_output+0x138>)
 800304e:	f7fe f879 	bl	8001144 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <low_level_output+0x138>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003060:	3314      	adds	r3, #20
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <low_level_output+0x138>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003074:	3314      	adds	r3, #20
 8003076:	2220      	movs	r2, #32
 8003078:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <low_level_output+0x138>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003082:	3304      	adds	r3, #4
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003088:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800308c:	4618      	mov	r0, r3
 800308e:	3728      	adds	r7, #40	; 0x28
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20001b30 	.word	0x20001b30

08003098 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08c      	sub	sp, #48	; 0x30
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80030bc:	484f      	ldr	r0, [pc, #316]	; (80031fc <low_level_input+0x164>)
 80030be:	f7fe f92b 	bl	8001318 <HAL_ETH_GetReceivedFrame>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <low_level_input+0x34>

    return NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e092      	b.n	80031f2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80030cc:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <low_level_input+0x164>)
 80030ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80030d2:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <low_level_input+0x164>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80030d8:	89fb      	ldrh	r3, [r7, #14]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80030de:	89fb      	ldrh	r3, [r7, #14]
 80030e0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80030e4:	4619      	mov	r1, r3
 80030e6:	2000      	movs	r0, #0
 80030e8:	f001 f936 	bl	8004358 <pbuf_alloc>
 80030ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d04b      	beq.n	800318c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80030f4:	4b41      	ldr	r3, [pc, #260]	; (80031fc <low_level_input+0x164>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
 8003102:	e040      	b.n	8003186 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003106:	895b      	ldrh	r3, [r3, #10]
 8003108:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800310e:	e021      	b.n	8003154 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	18d0      	adds	r0, r2, r3
 8003118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	18d1      	adds	r1, r2, r3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003124:	3304      	adds	r3, #4
 8003126:	461a      	mov	r2, r3
 8003128:	f009 fdcd 	bl	800ccc6 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	4413      	add	r3, r2
 800313e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003142:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800314e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	4413      	add	r3, r2
 800315a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800315e:	4293      	cmp	r3, r2
 8003160:	d8d6      	bhi.n	8003110 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	18d0      	adds	r0, r2, r3
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4619      	mov	r1, r3
 8003174:	f009 fda7 	bl	800ccc6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	4413      	add	r3, r2
 800317e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1bb      	bne.n	8003104 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <low_level_input+0x164>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	e00b      	b.n	80031b0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	3301      	adds	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <low_level_input+0x164>)
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d3ee      	bcc.n	8003198 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <low_level_input+0x164>)
 80031bc:	2200      	movs	r2, #0
 80031be:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <low_level_input+0x164>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c8:	3314      	adds	r3, #20
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <low_level_input+0x164>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031dc:	3314      	adds	r3, #20
 80031de:	2280      	movs	r2, #128	; 0x80
 80031e0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <low_level_input+0x164>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ea:	3308      	adds	r3, #8
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
  }
  return p;
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3730      	adds	r7, #48	; 0x30
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20001b30 	.word	0x20001b30

08003200 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ff45 	bl	8003098 <low_level_input>
 800320e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d010      	beq.n	8003238 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	4798      	blx	r3
 8003220:	4603      	mov	r3, r0
 8003222:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003224:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d006      	beq.n	800323a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f001 fb73 	bl	8004918 <pbuf_free>
    p = NULL;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	e000      	b.n	800323a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003238:	bf00      	nop
  }
}
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <ethernetif_init+0x1c>
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <ethernetif_init+0x48>)
 8003250:	f240 2207 	movw	r2, #519	; 0x207
 8003254:	490d      	ldr	r1, [pc, #52]	; (800328c <ethernetif_init+0x4c>)
 8003256:	480e      	ldr	r0, [pc, #56]	; (8003290 <ethernetif_init+0x50>)
 8003258:	f009 fd48 	bl	800ccec <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2273      	movs	r2, #115	; 0x73
 8003260:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2274      	movs	r2, #116	; 0x74
 8003268:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <ethernetif_init+0x54>)
 8003270:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a08      	ldr	r2, [pc, #32]	; (8003298 <ethernetif_init+0x58>)
 8003276:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fdc1 	bl	8002e00 <low_level_init>

  return ERR_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	0800db44 	.word	0x0800db44
 800328c:	0800db60 	.word	0x0800db60
 8003290:	0800db70 	.word	0x0800db70
 8003294:	0800af85 	.word	0x0800af85
 8003298:	08002f5d 	.word	0x08002f5d

0800329c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80032a0:	f7fd fbc8 	bl	8000a34 <HAL_GetTick>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d05d      	beq.n	800338a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80032ce:	4b34      	ldr	r3, [pc, #208]	; (80033a0 <ethernetif_update_config+0xf4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d03f      	beq.n	8003356 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80032d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032da:	2100      	movs	r1, #0
 80032dc:	4830      	ldr	r0, [pc, #192]	; (80033a0 <ethernetif_update_config+0xf4>)
 80032de:	f7fe f907 	bl	80014f0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80032e2:	f7fd fba7 	bl	8000a34 <HAL_GetTick>
 80032e6:	4603      	mov	r3, r0
 80032e8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80032ea:	f107 0308 	add.w	r3, r7, #8
 80032ee:	461a      	mov	r2, r3
 80032f0:	2101      	movs	r1, #1
 80032f2:	482b      	ldr	r0, [pc, #172]	; (80033a0 <ethernetif_update_config+0xf4>)
 80032f4:	f7fe f894 	bl	8001420 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80032f8:	f7fd fb9c 	bl	8000a34 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003306:	d828      	bhi.n	800335a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0eb      	beq.n	80032ea <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	461a      	mov	r2, r3
 8003318:	211f      	movs	r1, #31
 800331a:	4821      	ldr	r0, [pc, #132]	; (80033a0 <ethernetif_update_config+0xf4>)
 800331c:	f7fe f880 	bl	8001420 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <ethernetif_update_config+0xf4>)
 800332c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	e002      	b.n	800333a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <ethernetif_update_config+0xf4>)
 8003336:	2200      	movs	r2, #0
 8003338:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003344:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <ethernetif_update_config+0xf4>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	e016      	b.n	800337a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <ethernetif_update_config+0xf4>)
 800334e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	e011      	b.n	800337a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <ethernetif_update_config+0xb0>
          goto error;
 800335a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800335c:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <ethernetif_update_config+0xf4>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	08db      	lsrs	r3, r3, #3
 8003362:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <ethernetif_update_config+0xf4>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	085b      	lsrs	r3, r3, #1
 800336a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800336c:	4313      	orrs	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	2100      	movs	r1, #0
 8003374:	480a      	ldr	r0, [pc, #40]	; (80033a0 <ethernetif_update_config+0xf4>)
 8003376:	f7fe f8bb 	bl	80014f0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800337a:	2100      	movs	r1, #0
 800337c:	4808      	ldr	r0, [pc, #32]	; (80033a0 <ethernetif_update_config+0xf4>)
 800337e:	f7fe f97b 	bl	8001678 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003382:	4807      	ldr	r0, [pc, #28]	; (80033a0 <ethernetif_update_config+0xf4>)
 8003384:	f7fe f91a 	bl	80015bc <HAL_ETH_Start>
 8003388:	e002      	b.n	8003390 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800338a:	4805      	ldr	r0, [pc, #20]	; (80033a0 <ethernetif_update_config+0xf4>)
 800338c:	f7fe f945 	bl	800161a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f807 	bl	80033a4 <ethernetif_notify_conn_changed>
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20001b30 	.word	0x20001b30

080033a4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	b21a      	sxth	r2, r3
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	b21b      	sxth	r3, r3
 80033d0:	4313      	orrs	r3, r2
 80033d2:	b21b      	sxth	r3, r3
 80033d4:	b29b      	uxth	r3, r3
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	061a      	lsls	r2, r3, #24
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	0e1b      	lsrs	r3, r3, #24
 8003406:	4313      	orrs	r3, r2
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800341e:	f000 f8d5 	bl	80035cc <mem_init>
  memp_init();
 8003422:	f000 fbdb 	bl	8003bdc <memp_init>
  pbuf_init();
  netif_init();
 8003426:	f000 fc93 	bl	8003d50 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800342a:	f006 ffa5 	bl	800a378 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800342e:	f001 fd01 	bl	8004e34 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003432:	f006 ff19 	bl	800a268 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <ptr_to_mem+0x20>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	88fb      	ldrh	r3, [r7, #6]
 8003450:	4413      	add	r3, r2
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000098 	.word	0x20000098

08003464 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a05      	ldr	r2, [pc, #20]	; (8003484 <mem_to_ptr+0x20>)
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	b29b      	uxth	r3, r3
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000098 	.word	0x20000098

08003488 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003490:	4b45      	ldr	r3, [pc, #276]	; (80035a8 <plug_holes+0x120>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d206      	bcs.n	80034a8 <plug_holes+0x20>
 800349a:	4b44      	ldr	r3, [pc, #272]	; (80035ac <plug_holes+0x124>)
 800349c:	f240 12df 	movw	r2, #479	; 0x1df
 80034a0:	4943      	ldr	r1, [pc, #268]	; (80035b0 <plug_holes+0x128>)
 80034a2:	4844      	ldr	r0, [pc, #272]	; (80035b4 <plug_holes+0x12c>)
 80034a4:	f009 fc22 	bl	800ccec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80034a8:	4b43      	ldr	r3, [pc, #268]	; (80035b8 <plug_holes+0x130>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d306      	bcc.n	80034c0 <plug_holes+0x38>
 80034b2:	4b3e      	ldr	r3, [pc, #248]	; (80035ac <plug_holes+0x124>)
 80034b4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80034b8:	4940      	ldr	r1, [pc, #256]	; (80035bc <plug_holes+0x134>)
 80034ba:	483e      	ldr	r0, [pc, #248]	; (80035b4 <plug_holes+0x12c>)
 80034bc:	f009 fc16 	bl	800ccec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	791b      	ldrb	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d006      	beq.n	80034d6 <plug_holes+0x4e>
 80034c8:	4b38      	ldr	r3, [pc, #224]	; (80035ac <plug_holes+0x124>)
 80034ca:	f240 12e1 	movw	r2, #481	; 0x1e1
 80034ce:	493c      	ldr	r1, [pc, #240]	; (80035c0 <plug_holes+0x138>)
 80034d0:	4838      	ldr	r0, [pc, #224]	; (80035b4 <plug_holes+0x12c>)
 80034d2:	f009 fc0b 	bl	800ccec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80034de:	d906      	bls.n	80034ee <plug_holes+0x66>
 80034e0:	4b32      	ldr	r3, [pc, #200]	; (80035ac <plug_holes+0x124>)
 80034e2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80034e6:	4937      	ldr	r1, [pc, #220]	; (80035c4 <plug_holes+0x13c>)
 80034e8:	4832      	ldr	r0, [pc, #200]	; (80035b4 <plug_holes+0x12c>)
 80034ea:	f009 fbff 	bl	800ccec <iprintf>

  nmem = ptr_to_mem(mem->next);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff ffa4 	bl	8003440 <ptr_to_mem>
 80034f8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d024      	beq.n	800354c <plug_holes+0xc4>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	791b      	ldrb	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d120      	bne.n	800354c <plug_holes+0xc4>
 800350a:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <plug_holes+0x130>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	429a      	cmp	r2, r3
 8003512:	d01b      	beq.n	800354c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003514:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <plug_holes+0x140>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	429a      	cmp	r2, r3
 800351c:	d102      	bne.n	8003524 <plug_holes+0x9c>
      lfree = mem;
 800351e:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <plug_holes+0x140>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	881a      	ldrh	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003534:	d00a      	beq.n	800354c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff80 	bl	8003440 <ptr_to_mem>
 8003540:	4604      	mov	r4, r0
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ff8e 	bl	8003464 <mem_to_ptr>
 8003548:	4603      	mov	r3, r0
 800354a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	885b      	ldrh	r3, [r3, #2]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff ff75 	bl	8003440 <ptr_to_mem>
 8003556:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	d01f      	beq.n	80035a0 <plug_holes+0x118>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	791b      	ldrb	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d11b      	bne.n	80035a0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003568:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <plug_holes+0x140>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d102      	bne.n	8003578 <plug_holes+0xf0>
      lfree = pmem;
 8003572:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <plug_holes+0x140>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	881a      	ldrh	r2, [r3, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003588:	d00a      	beq.n	80035a0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff56 	bl	8003440 <ptr_to_mem>
 8003594:	4604      	mov	r4, r0
 8003596:	68b8      	ldr	r0, [r7, #8]
 8003598:	f7ff ff64 	bl	8003464 <mem_to_ptr>
 800359c:	4603      	mov	r3, r0
 800359e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd90      	pop	{r4, r7, pc}
 80035a8:	20000098 	.word	0x20000098
 80035ac:	0800db98 	.word	0x0800db98
 80035b0:	0800dbc8 	.word	0x0800dbc8
 80035b4:	0800dbe0 	.word	0x0800dbe0
 80035b8:	2000009c 	.word	0x2000009c
 80035bc:	0800dc08 	.word	0x0800dc08
 80035c0:	0800dc24 	.word	0x0800dc24
 80035c4:	0800dc40 	.word	0x0800dc40
 80035c8:	200000a0 	.word	0x200000a0

080035cc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <mem_init+0x68>)
 80035d4:	3303      	adds	r3, #3
 80035d6:	f023 0303 	bic.w	r3, r3, #3
 80035da:	461a      	mov	r2, r3
 80035dc:	4b16      	ldr	r3, [pc, #88]	; (8003638 <mem_init+0x6c>)
 80035de:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80035e0:	4b15      	ldr	r3, [pc, #84]	; (8003638 <mem_init+0x6c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80035ec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80035fa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80035fe:	f7ff ff1f 	bl	8003440 <ptr_to_mem>
 8003602:	4602      	mov	r2, r0
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <mem_init+0x70>)
 8003606:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <mem_init+0x70>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <mem_init+0x70>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003618:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <mem_init+0x70>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003622:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <mem_init+0x6c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a05      	ldr	r2, [pc, #20]	; (8003640 <mem_init+0x74>)
 800362a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20003360 	.word	0x20003360
 8003638:	20000098 	.word	0x20000098
 800363c:	2000009c 	.word	0x2000009c
 8003640:	200000a0 	.word	0x200000a0

08003644 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff09 	bl	8003464 <mem_to_ptr>
 8003652:	4603      	mov	r3, r0
 8003654:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fef0 	bl	8003440 <ptr_to_mem>
 8003660:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	885b      	ldrh	r3, [r3, #2]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff feea 	bl	8003440 <ptr_to_mem>
 800366c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003676:	d818      	bhi.n	80036aa <mem_link_valid+0x66>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	885b      	ldrh	r3, [r3, #2]
 800367c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003680:	d813      	bhi.n	80036aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003686:	8afa      	ldrh	r2, [r7, #22]
 8003688:	429a      	cmp	r2, r3
 800368a:	d004      	beq.n	8003696 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	8afa      	ldrh	r2, [r7, #22]
 8003692:	429a      	cmp	r2, r3
 8003694:	d109      	bne.n	80036aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <mem_link_valid+0x74>)
 8003698:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	429a      	cmp	r2, r3
 800369e:	d006      	beq.n	80036ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	885b      	ldrh	r3, [r3, #2]
 80036a4:	8afa      	ldrh	r2, [r7, #22]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d001      	beq.n	80036ae <mem_link_valid+0x6a>
    return 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <mem_link_valid+0x6c>
  }
  return 1;
 80036ae:	2301      	movs	r3, #1
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	2000009c 	.word	0x2000009c

080036bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d04c      	beq.n	8003764 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <mem_free+0xb0>)
 80036d6:	f240 2273 	movw	r2, #627	; 0x273
 80036da:	4925      	ldr	r1, [pc, #148]	; (8003770 <mem_free+0xb4>)
 80036dc:	4825      	ldr	r0, [pc, #148]	; (8003774 <mem_free+0xb8>)
 80036de:	f009 fb05 	bl	800ccec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80036e2:	e040      	b.n	8003766 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b08      	subs	r3, #8
 80036e8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80036ea:	4b23      	ldr	r3, [pc, #140]	; (8003778 <mem_free+0xbc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d306      	bcc.n	8003702 <mem_free+0x46>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f103 020c 	add.w	r2, r3, #12
 80036fa:	4b20      	ldr	r3, [pc, #128]	; (800377c <mem_free+0xc0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d907      	bls.n	8003712 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003702:	4b1a      	ldr	r3, [pc, #104]	; (800376c <mem_free+0xb0>)
 8003704:	f240 227f 	movw	r2, #639	; 0x27f
 8003708:	491d      	ldr	r1, [pc, #116]	; (8003780 <mem_free+0xc4>)
 800370a:	481a      	ldr	r0, [pc, #104]	; (8003774 <mem_free+0xb8>)
 800370c:	f009 faee 	bl	800ccec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003710:	e029      	b.n	8003766 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	791b      	ldrb	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800371a:	4b14      	ldr	r3, [pc, #80]	; (800376c <mem_free+0xb0>)
 800371c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003720:	4918      	ldr	r1, [pc, #96]	; (8003784 <mem_free+0xc8>)
 8003722:	4814      	ldr	r0, [pc, #80]	; (8003774 <mem_free+0xb8>)
 8003724:	f009 fae2 	bl	800ccec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003728:	e01d      	b.n	8003766 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7ff ff8a 	bl	8003644 <mem_link_valid>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d107      	bne.n	8003746 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <mem_free+0xb0>)
 8003738:	f240 2295 	movw	r2, #661	; 0x295
 800373c:	4912      	ldr	r1, [pc, #72]	; (8003788 <mem_free+0xcc>)
 800373e:	480d      	ldr	r0, [pc, #52]	; (8003774 <mem_free+0xb8>)
 8003740:	f009 fad4 	bl	800ccec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003744:	e00f      	b.n	8003766 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <mem_free+0xd0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	429a      	cmp	r2, r3
 8003754:	d202      	bcs.n	800375c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003756:	4a0d      	ldr	r2, [pc, #52]	; (800378c <mem_free+0xd0>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff fe93 	bl	8003488 <plug_holes>
 8003762:	e000      	b.n	8003766 <mem_free+0xaa>
    return;
 8003764:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	0800db98 	.word	0x0800db98
 8003770:	0800dc6c 	.word	0x0800dc6c
 8003774:	0800dbe0 	.word	0x0800dbe0
 8003778:	20000098 	.word	0x20000098
 800377c:	2000009c 	.word	0x2000009c
 8003780:	0800dc90 	.word	0x0800dc90
 8003784:	0800dcac 	.word	0x0800dcac
 8003788:	0800dcd4 	.word	0x0800dcd4
 800378c:	200000a0 	.word	0x200000a0

08003790 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	3303      	adds	r3, #3
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	f023 0303 	bic.w	r3, r3, #3
 80037a6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80037a8:	8bfb      	ldrh	r3, [r7, #30]
 80037aa:	2b0b      	cmp	r3, #11
 80037ac:	d801      	bhi.n	80037b2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80037ae:	230c      	movs	r3, #12
 80037b0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80037b2:	8bfb      	ldrh	r3, [r7, #30]
 80037b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80037b8:	d803      	bhi.n	80037c2 <mem_trim+0x32>
 80037ba:	8bfa      	ldrh	r2, [r7, #30]
 80037bc:	887b      	ldrh	r3, [r7, #2]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d201      	bcs.n	80037c6 <mem_trim+0x36>
    return NULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e0cc      	b.n	8003960 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80037c6:	4b68      	ldr	r3, [pc, #416]	; (8003968 <mem_trim+0x1d8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d304      	bcc.n	80037da <mem_trim+0x4a>
 80037d0:	4b66      	ldr	r3, [pc, #408]	; (800396c <mem_trim+0x1dc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d306      	bcc.n	80037e8 <mem_trim+0x58>
 80037da:	4b65      	ldr	r3, [pc, #404]	; (8003970 <mem_trim+0x1e0>)
 80037dc:	f240 22d2 	movw	r2, #722	; 0x2d2
 80037e0:	4964      	ldr	r1, [pc, #400]	; (8003974 <mem_trim+0x1e4>)
 80037e2:	4865      	ldr	r0, [pc, #404]	; (8003978 <mem_trim+0x1e8>)
 80037e4:	f009 fa82 	bl	800ccec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80037e8:	4b5f      	ldr	r3, [pc, #380]	; (8003968 <mem_trim+0x1d8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d304      	bcc.n	80037fc <mem_trim+0x6c>
 80037f2:	4b5e      	ldr	r3, [pc, #376]	; (800396c <mem_trim+0x1dc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d301      	bcc.n	8003800 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	e0af      	b.n	8003960 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3b08      	subs	r3, #8
 8003804:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003806:	69b8      	ldr	r0, [r7, #24]
 8003808:	f7ff fe2c 	bl	8003464 <mem_to_ptr>
 800380c:	4603      	mov	r3, r0
 800380e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	8afb      	ldrh	r3, [r7, #22]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b08      	subs	r3, #8
 800381c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800381e:	8bfa      	ldrh	r2, [r7, #30]
 8003820:	8abb      	ldrh	r3, [r7, #20]
 8003822:	429a      	cmp	r2, r3
 8003824:	d906      	bls.n	8003834 <mem_trim+0xa4>
 8003826:	4b52      	ldr	r3, [pc, #328]	; (8003970 <mem_trim+0x1e0>)
 8003828:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800382c:	4953      	ldr	r1, [pc, #332]	; (800397c <mem_trim+0x1ec>)
 800382e:	4852      	ldr	r0, [pc, #328]	; (8003978 <mem_trim+0x1e8>)
 8003830:	f009 fa5c 	bl	800ccec <iprintf>
  if (newsize > size) {
 8003834:	8bfa      	ldrh	r2, [r7, #30]
 8003836:	8abb      	ldrh	r3, [r7, #20]
 8003838:	429a      	cmp	r2, r3
 800383a:	d901      	bls.n	8003840 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	e08f      	b.n	8003960 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003840:	8bfa      	ldrh	r2, [r7, #30]
 8003842:	8abb      	ldrh	r3, [r7, #20]
 8003844:	429a      	cmp	r2, r3
 8003846:	d101      	bne.n	800384c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	e089      	b.n	8003960 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fdf5 	bl	8003440 <ptr_to_mem>
 8003856:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	791b      	ldrb	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d13f      	bne.n	80038e0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003868:	d106      	bne.n	8003878 <mem_trim+0xe8>
 800386a:	4b41      	ldr	r3, [pc, #260]	; (8003970 <mem_trim+0x1e0>)
 800386c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003870:	4943      	ldr	r1, [pc, #268]	; (8003980 <mem_trim+0x1f0>)
 8003872:	4841      	ldr	r0, [pc, #260]	; (8003978 <mem_trim+0x1e8>)
 8003874:	f009 fa3a 	bl	800ccec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800387e:	8afa      	ldrh	r2, [r7, #22]
 8003880:	8bfb      	ldrh	r3, [r7, #30]
 8003882:	4413      	add	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	3308      	adds	r3, #8
 8003888:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800388a:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <mem_trim+0x1f4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	429a      	cmp	r2, r3
 8003892:	d106      	bne.n	80038a2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003894:	89fb      	ldrh	r3, [r7, #14]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fdd2 	bl	8003440 <ptr_to_mem>
 800389c:	4602      	mov	r2, r0
 800389e:	4b39      	ldr	r3, [pc, #228]	; (8003984 <mem_trim+0x1f4>)
 80038a0:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80038a2:	89fb      	ldrh	r3, [r7, #14]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fdcb 	bl	8003440 <ptr_to_mem>
 80038aa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2200      	movs	r2, #0
 80038b0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	89ba      	ldrh	r2, [r7, #12]
 80038b6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	8afa      	ldrh	r2, [r7, #22]
 80038bc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	89fa      	ldrh	r2, [r7, #14]
 80038c2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80038cc:	d047      	beq.n	800395e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fdb4 	bl	8003440 <ptr_to_mem>
 80038d8:	4602      	mov	r2, r0
 80038da:	89fb      	ldrh	r3, [r7, #14]
 80038dc:	8053      	strh	r3, [r2, #2]
 80038de:	e03e      	b.n	800395e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80038e0:	8bfb      	ldrh	r3, [r7, #30]
 80038e2:	f103 0214 	add.w	r2, r3, #20
 80038e6:	8abb      	ldrh	r3, [r7, #20]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d838      	bhi.n	800395e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80038ec:	8afa      	ldrh	r2, [r7, #22]
 80038ee:	8bfb      	ldrh	r3, [r7, #30]
 80038f0:	4413      	add	r3, r2
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3308      	adds	r3, #8
 80038f6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003900:	d106      	bne.n	8003910 <mem_trim+0x180>
 8003902:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <mem_trim+0x1e0>)
 8003904:	f240 3216 	movw	r2, #790	; 0x316
 8003908:	491d      	ldr	r1, [pc, #116]	; (8003980 <mem_trim+0x1f0>)
 800390a:	481b      	ldr	r0, [pc, #108]	; (8003978 <mem_trim+0x1e8>)
 800390c:	f009 f9ee 	bl	800ccec <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003910:	89fb      	ldrh	r3, [r7, #14]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fd94 	bl	8003440 <ptr_to_mem>
 8003918:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800391a:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <mem_trim+0x1f4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	429a      	cmp	r2, r3
 8003922:	d202      	bcs.n	800392a <mem_trim+0x19a>
      lfree = mem2;
 8003924:	4a17      	ldr	r2, [pc, #92]	; (8003984 <mem_trim+0x1f4>)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2200      	movs	r2, #0
 800392e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	881a      	ldrh	r2, [r3, #0]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	8afa      	ldrh	r2, [r7, #22]
 800393c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	89fa      	ldrh	r2, [r7, #14]
 8003942:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800394c:	d007      	beq.n	800395e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fd74 	bl	8003440 <ptr_to_mem>
 8003958:	4602      	mov	r2, r0
 800395a:	89fb      	ldrh	r3, [r7, #14]
 800395c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800395e:	687b      	ldr	r3, [r7, #4]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000098 	.word	0x20000098
 800396c:	2000009c 	.word	0x2000009c
 8003970:	0800db98 	.word	0x0800db98
 8003974:	0800dd08 	.word	0x0800dd08
 8003978:	0800dbe0 	.word	0x0800dbe0
 800397c:	0800dd20 	.word	0x0800dd20
 8003980:	0800dd40 	.word	0x0800dd40
 8003984:	200000a0 	.word	0x200000a0

08003988 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <mem_malloc+0x14>
    return NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	e0d9      	b.n	8003b50 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	3303      	adds	r3, #3
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80039a8:	8bbb      	ldrh	r3, [r7, #28]
 80039aa:	2b0b      	cmp	r3, #11
 80039ac:	d801      	bhi.n	80039b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80039ae:	230c      	movs	r3, #12
 80039b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80039b2:	8bbb      	ldrh	r3, [r7, #28]
 80039b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80039b8:	d803      	bhi.n	80039c2 <mem_malloc+0x3a>
 80039ba:	8bba      	ldrh	r2, [r7, #28]
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d201      	bcs.n	80039c6 <mem_malloc+0x3e>
    return NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e0c4      	b.n	8003b50 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80039c6:	4b64      	ldr	r3, [pc, #400]	; (8003b58 <mem_malloc+0x1d0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fd4a 	bl	8003464 <mem_to_ptr>
 80039d0:	4603      	mov	r3, r0
 80039d2:	83fb      	strh	r3, [r7, #30]
 80039d4:	e0b4      	b.n	8003b40 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80039d6:	8bfb      	ldrh	r3, [r7, #30]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fd31 	bl	8003440 <ptr_to_mem>
 80039de:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	791b      	ldrb	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f040 80a4 	bne.w	8003b32 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	8bfb      	ldrh	r3, [r7, #30]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f1a3 0208 	sub.w	r2, r3, #8
 80039f8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80039fa:	429a      	cmp	r2, r3
 80039fc:	f0c0 8099 	bcc.w	8003b32 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	8bfb      	ldrh	r3, [r7, #30]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f1a3 0208 	sub.w	r2, r3, #8
 8003a0e:	8bbb      	ldrh	r3, [r7, #28]
 8003a10:	3314      	adds	r3, #20
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d333      	bcc.n	8003a7e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003a16:	8bfa      	ldrh	r2, [r7, #30]
 8003a18:	8bbb      	ldrh	r3, [r7, #28]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3308      	adds	r3, #8
 8003a20:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003a22:	8a7b      	ldrh	r3, [r7, #18]
 8003a24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a28:	d106      	bne.n	8003a38 <mem_malloc+0xb0>
 8003a2a:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <mem_malloc+0x1d4>)
 8003a2c:	f240 3287 	movw	r2, #903	; 0x387
 8003a30:	494b      	ldr	r1, [pc, #300]	; (8003b60 <mem_malloc+0x1d8>)
 8003a32:	484c      	ldr	r0, [pc, #304]	; (8003b64 <mem_malloc+0x1dc>)
 8003a34:	f009 f95a 	bl	800ccec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003a38:	8a7b      	ldrh	r3, [r7, #18]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fd00 	bl	8003440 <ptr_to_mem>
 8003a40:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	881a      	ldrh	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8bfa      	ldrh	r2, [r7, #30]
 8003a54:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	8a7a      	ldrh	r2, [r7, #18]
 8003a5a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a6a:	d00b      	beq.n	8003a84 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fce5 	bl	8003440 <ptr_to_mem>
 8003a76:	4602      	mov	r2, r0
 8003a78:	8a7b      	ldrh	r3, [r7, #18]
 8003a7a:	8053      	strh	r3, [r2, #2]
 8003a7c:	e002      	b.n	8003a84 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2201      	movs	r2, #1
 8003a82:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003a84:	4b34      	ldr	r3, [pc, #208]	; (8003b58 <mem_malloc+0x1d0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d127      	bne.n	8003ade <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003a8e:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <mem_malloc+0x1d0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003a94:	e005      	b.n	8003aa2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fcd0 	bl	8003440 <ptr_to_mem>
 8003aa0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	791b      	ldrb	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <mem_malloc+0x12c>
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <mem_malloc+0x1e0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d1f0      	bne.n	8003a96 <mem_malloc+0x10e>
          }
          lfree = cur;
 8003ab4:	4a28      	ldr	r2, [pc, #160]	; (8003b58 <mem_malloc+0x1d0>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003aba:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <mem_malloc+0x1d0>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <mem_malloc+0x1e0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d00b      	beq.n	8003ade <mem_malloc+0x156>
 8003ac6:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <mem_malloc+0x1d0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	791b      	ldrb	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <mem_malloc+0x156>
 8003ad0:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <mem_malloc+0x1d4>)
 8003ad2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003ad6:	4925      	ldr	r1, [pc, #148]	; (8003b6c <mem_malloc+0x1e4>)
 8003ad8:	4822      	ldr	r0, [pc, #136]	; (8003b64 <mem_malloc+0x1dc>)
 8003ada:	f009 f907 	bl	800ccec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003ade:	8bba      	ldrh	r2, [r7, #28]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3308      	adds	r3, #8
 8003ae6:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <mem_malloc+0x1e0>)
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d906      	bls.n	8003afc <mem_malloc+0x174>
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <mem_malloc+0x1d4>)
 8003af0:	f240 32ba 	movw	r2, #954	; 0x3ba
 8003af4:	491e      	ldr	r1, [pc, #120]	; (8003b70 <mem_malloc+0x1e8>)
 8003af6:	481b      	ldr	r0, [pc, #108]	; (8003b64 <mem_malloc+0x1dc>)
 8003af8:	f009 f8f8 	bl	800ccec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <mem_malloc+0x18c>
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <mem_malloc+0x1d4>)
 8003b08:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8003b0c:	4919      	ldr	r1, [pc, #100]	; (8003b74 <mem_malloc+0x1ec>)
 8003b0e:	4815      	ldr	r0, [pc, #84]	; (8003b64 <mem_malloc+0x1dc>)
 8003b10:	f009 f8ec 	bl	800ccec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d006      	beq.n	8003b2c <mem_malloc+0x1a4>
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <mem_malloc+0x1d4>)
 8003b20:	f240 32be 	movw	r2, #958	; 0x3be
 8003b24:	4914      	ldr	r1, [pc, #80]	; (8003b78 <mem_malloc+0x1f0>)
 8003b26:	480f      	ldr	r0, [pc, #60]	; (8003b64 <mem_malloc+0x1dc>)
 8003b28:	f009 f8e0 	bl	800ccec <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	e00e      	b.n	8003b50 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003b32:	8bfb      	ldrh	r3, [r7, #30]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fc83 	bl	8003440 <ptr_to_mem>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003b40:	8bfa      	ldrh	r2, [r7, #30]
 8003b42:	8bbb      	ldrh	r3, [r7, #28]
 8003b44:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	f4ff af44 	bcc.w	80039d6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	200000a0 	.word	0x200000a0
 8003b5c:	0800db98 	.word	0x0800db98
 8003b60:	0800dd40 	.word	0x0800dd40
 8003b64:	0800dbe0 	.word	0x0800dbe0
 8003b68:	2000009c 	.word	0x2000009c
 8003b6c:	0800dd54 	.word	0x0800dd54
 8003b70:	0800dd70 	.word	0x0800dd70
 8003b74:	0800dda0 	.word	0x0800dda0
 8003b78:	0800ddd0 	.word	0x0800ddd0

08003b7c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	3303      	adds	r3, #3
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	e011      	b.n	8003bc2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4413      	add	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	885b      	ldrh	r3, [r3, #2]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	dbe7      	blt.n	8003b9e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003be2:	2300      	movs	r3, #0
 8003be4:	80fb      	strh	r3, [r7, #6]
 8003be6:	e009      	b.n	8003bfc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	4a08      	ldr	r2, [pc, #32]	; (8003c0c <memp_init+0x30>)
 8003bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ffc3 	bl	8003b7c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	80fb      	strh	r3, [r7, #6]
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d9f2      	bls.n	8003be8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	080105a0 	.word	0x080105a0

08003c10 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d012      	beq.n	8003c4c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <do_memp_malloc_pool+0x38>
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <do_memp_malloc_pool+0x48>)
 8003c3c:	f240 1219 	movw	r2, #281	; 0x119
 8003c40:	4906      	ldr	r1, [pc, #24]	; (8003c5c <do_memp_malloc_pool+0x4c>)
 8003c42:	4807      	ldr	r0, [pc, #28]	; (8003c60 <do_memp_malloc_pool+0x50>)
 8003c44:	f009 f852 	bl	800ccec <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	e000      	b.n	8003c4e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	0800ddf4 	.word	0x0800ddf4
 8003c5c:	0800de24 	.word	0x0800de24
 8003c60:	0800de48 	.word	0x0800de48

08003c64 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d908      	bls.n	8003c86 <memp_malloc+0x22>
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <memp_malloc+0x3c>)
 8003c76:	f240 1257 	movw	r2, #343	; 0x157
 8003c7a:	490a      	ldr	r1, [pc, #40]	; (8003ca4 <memp_malloc+0x40>)
 8003c7c:	480a      	ldr	r0, [pc, #40]	; (8003ca8 <memp_malloc+0x44>)
 8003c7e:	f009 f835 	bl	800ccec <iprintf>
 8003c82:	2300      	movs	r3, #0
 8003c84:	e008      	b.n	8003c98 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	4a08      	ldr	r2, [pc, #32]	; (8003cac <memp_malloc+0x48>)
 8003c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff ffbe 	bl	8003c10 <do_memp_malloc_pool>
 8003c94:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8003c96:	68fb      	ldr	r3, [r7, #12]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	0800ddf4 	.word	0x0800ddf4
 8003ca4:	0800de84 	.word	0x0800de84
 8003ca8:	0800de48 	.word	0x0800de48
 8003cac:	080105a0 	.word	0x080105a0

08003cb0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d006      	beq.n	8003cd2 <do_memp_free_pool+0x22>
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <do_memp_free_pool+0x40>)
 8003cc6:	f240 126d 	movw	r2, #365	; 0x16d
 8003cca:	490a      	ldr	r1, [pc, #40]	; (8003cf4 <do_memp_free_pool+0x44>)
 8003ccc:	480a      	ldr	r0, [pc, #40]	; (8003cf8 <do_memp_free_pool+0x48>)
 8003cce:	f009 f80d 	bl	800ccec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	0800ddf4 	.word	0x0800ddf4
 8003cf4:	0800dea4 	.word	0x0800dea4
 8003cf8:	0800de48 	.word	0x0800de48

08003cfc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d907      	bls.n	8003d1e <memp_free+0x22>
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <memp_free+0x44>)
 8003d10:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003d14:	490b      	ldr	r1, [pc, #44]	; (8003d44 <memp_free+0x48>)
 8003d16:	480c      	ldr	r0, [pc, #48]	; (8003d48 <memp_free+0x4c>)
 8003d18:	f008 ffe8 	bl	800ccec <iprintf>
 8003d1c:	e00c      	b.n	8003d38 <memp_free+0x3c>

  if (mem == NULL) {
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <memp_free+0x50>)
 8003d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2c:	6839      	ldr	r1, [r7, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ffbe 	bl	8003cb0 <do_memp_free_pool>
 8003d34:	e000      	b.n	8003d38 <memp_free+0x3c>
    return;
 8003d36:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	0800ddf4 	.word	0x0800ddf4
 8003d44:	0800dec4 	.word	0x0800dec4
 8003d48:	0800de48 	.word	0x0800de48
 8003d4c:	080105a0 	.word	0x080105a0

08003d50 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d108      	bne.n	8003d86 <netif_add+0x26>
 8003d74:	4b57      	ldr	r3, [pc, #348]	; (8003ed4 <netif_add+0x174>)
 8003d76:	f240 1227 	movw	r2, #295	; 0x127
 8003d7a:	4957      	ldr	r1, [pc, #348]	; (8003ed8 <netif_add+0x178>)
 8003d7c:	4857      	ldr	r0, [pc, #348]	; (8003edc <netif_add+0x17c>)
 8003d7e:	f008 ffb5 	bl	800ccec <iprintf>
 8003d82:	2300      	movs	r3, #0
 8003d84:	e0a2      	b.n	8003ecc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <netif_add+0x3e>
 8003d8c:	4b51      	ldr	r3, [pc, #324]	; (8003ed4 <netif_add+0x174>)
 8003d8e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003d92:	4953      	ldr	r1, [pc, #332]	; (8003ee0 <netif_add+0x180>)
 8003d94:	4851      	ldr	r0, [pc, #324]	; (8003edc <netif_add+0x17c>)
 8003d96:	f008 ffa9 	bl	800ccec <iprintf>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e096      	b.n	8003ecc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8003da4:	4b4f      	ldr	r3, [pc, #316]	; (8003ee4 <netif_add+0x184>)
 8003da6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8003dae:	4b4d      	ldr	r3, [pc, #308]	; (8003ee4 <netif_add+0x184>)
 8003db0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8003db8:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <netif_add+0x184>)
 8003dba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a45      	ldr	r2, [pc, #276]	; (8003ee8 <netif_add+0x188>)
 8003dd2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a3a      	ldr	r2, [r7, #32]
 8003dec:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8003dee:	4b3f      	ldr	r3, [pc, #252]	; (8003eec <netif_add+0x18c>)
 8003df0:	781a      	ldrb	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dfc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f913 	bl	8004030 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	4798      	blx	r3
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <netif_add+0xba>
    return NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e058      	b.n	8003ecc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e20:	2bff      	cmp	r3, #255	; 0xff
 8003e22:	d103      	bne.n	8003e2c <netif_add+0xcc>
        netif->num = 0;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003e30:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <netif_add+0x190>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	e02b      	b.n	8003e90 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d106      	bne.n	8003e4e <netif_add+0xee>
 8003e40:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <netif_add+0x174>)
 8003e42:	f240 128b 	movw	r2, #395	; 0x18b
 8003e46:	492b      	ldr	r1, [pc, #172]	; (8003ef4 <netif_add+0x194>)
 8003e48:	4824      	ldr	r0, [pc, #144]	; (8003edc <netif_add+0x17c>)
 8003e4a:	f008 ff4f 	bl	800ccec <iprintf>
        num_netifs++;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	3301      	adds	r3, #1
 8003e52:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2bff      	cmp	r3, #255	; 0xff
 8003e58:	dd06      	ble.n	8003e68 <netif_add+0x108>
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <netif_add+0x174>)
 8003e5c:	f240 128d 	movw	r2, #397	; 0x18d
 8003e60:	4925      	ldr	r1, [pc, #148]	; (8003ef8 <netif_add+0x198>)
 8003e62:	481e      	ldr	r0, [pc, #120]	; (8003edc <netif_add+0x17c>)
 8003e64:	f008 ff42 	bl	800ccec <iprintf>
        if (netif2->num == netif->num) {
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d108      	bne.n	8003e8a <netif_add+0x12a>
          netif->num++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e7e:	3301      	adds	r3, #1
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8003e88:	e005      	b.n	8003e96 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1d0      	bne.n	8003e38 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1be      	bne.n	8003e1a <netif_add+0xba>
  }
  if (netif->num == 254) {
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ea2:	2bfe      	cmp	r3, #254	; 0xfe
 8003ea4:	d103      	bne.n	8003eae <netif_add+0x14e>
    netif_num = 0;
 8003ea6:	4b11      	ldr	r3, [pc, #68]	; (8003eec <netif_add+0x18c>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e006      	b.n	8003ebc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <netif_add+0x18c>)
 8003eba:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <netif_add+0x190>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8003ec4:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <netif_add+0x190>)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	0800dee0 	.word	0x0800dee0
 8003ed8:	0800df74 	.word	0x0800df74
 8003edc:	0800df30 	.word	0x0800df30
 8003ee0:	0800df90 	.word	0x0800df90
 8003ee4:	08010604 	.word	0x08010604
 8003ee8:	08004243 	.word	0x08004243
 8003eec:	200000c8 	.word	0x200000c8
 8003ef0:	2000687c 	.word	0x2000687c
 8003ef4:	0800dfb4 	.word	0x0800dfb4
 8003ef8:	0800dfc8 	.word	0x0800dfc8

08003efc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f002 facf 	bl	80064ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8003f0e:	6839      	ldr	r1, [r7, #0]
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f006 fbbb 	bl	800a68c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <netif_do_set_ipaddr+0x20>
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <netif_do_set_ipaddr+0x88>)
 8003f34:	f240 12cb 	movw	r2, #459	; 0x1cb
 8003f38:	491c      	ldr	r1, [pc, #112]	; (8003fac <netif_do_set_ipaddr+0x8c>)
 8003f3a:	481d      	ldr	r0, [pc, #116]	; (8003fb0 <netif_do_set_ipaddr+0x90>)
 8003f3c:	f008 fed6 	bl	800ccec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <netif_do_set_ipaddr+0x34>
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <netif_do_set_ipaddr+0x88>)
 8003f48:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003f4c:	4917      	ldr	r1, [pc, #92]	; (8003fac <netif_do_set_ipaddr+0x8c>)
 8003f4e:	4818      	ldr	r0, [pc, #96]	; (8003fb0 <netif_do_set_ipaddr+0x90>)
 8003f50:	f008 fecc 	bl	800ccec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d01c      	beq.n	8003f9c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8003f72:	f107 0314 	add.w	r3, r7, #20
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ffbf 	bl	8003efc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <netif_do_set_ipaddr+0x6a>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	e000      	b.n	8003f8c <netif_do_set_ipaddr+0x6c>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8003f90:	2101      	movs	r1, #1
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f8d2 	bl	800413c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	0800dee0 	.word	0x0800dee0
 8003fac:	0800dff8 	.word	0x0800dff8
 8003fb0:	0800df30 	.word	0x0800df30

08003fb4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d00a      	beq.n	8003fe4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <netif_do_set_netmask+0x26>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	e000      	b.n	8003fdc <netif_do_set_netmask+0x28>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	330c      	adds	r3, #12
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d00a      	beq.n	8004022 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <netif_do_set_gw+0x26>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	e000      	b.n	800401a <netif_do_set_gw+0x28>
 8004018:	2300      	movs	r3, #0
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800404c:	4b1c      	ldr	r3, [pc, #112]	; (80040c0 <netif_set_addr+0x90>)
 800404e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <netif_set_addr+0x90>)
 8004058:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004060:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <netif_set_addr+0x90>)
 8004062:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <netif_set_addr+0x42>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <netif_set_addr+0x46>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <netif_set_addr+0x48>
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
  if (remove) {
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d006      	beq.n	800408e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004080:	f107 0310 	add.w	r3, r7, #16
 8004084:	461a      	mov	r2, r3
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff ff49 	bl	8003f20 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f7ff ff8e 	bl	8003fb4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	6839      	ldr	r1, [r7, #0]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff ffa8 	bl	8003ff2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80040a8:	f107 0310 	add.w	r3, r7, #16
 80040ac:	461a      	mov	r2, r3
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff ff35 	bl	8003f20 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80040b6:	bf00      	nop
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	08010604 	.word	0x08010604

080040c4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80040cc:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <netif_set_default+0x1c>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20006880 	.word	0x20006880

080040e4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <netif_set_up+0x1e>
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <netif_set_up+0x4c>)
 80040f4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80040f8:	490e      	ldr	r1, [pc, #56]	; (8004134 <netif_set_up+0x50>)
 80040fa:	480f      	ldr	r0, [pc, #60]	; (8004138 <netif_set_up+0x54>)
 80040fc:	f008 fdf6 	bl	800ccec <iprintf>
 8004100:	e013      	b.n	800412a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10c      	bne.n	800412a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	b2da      	uxtb	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004122:	2103      	movs	r1, #3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f809 	bl	800413c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	0800dee0 	.word	0x0800dee0
 8004134:	0800e068 	.word	0x0800e068
 8004138:	0800df30 	.word	0x0800df30

0800413c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <netif_issue_reports+0x20>
 800414e:	4b18      	ldr	r3, [pc, #96]	; (80041b0 <netif_issue_reports+0x74>)
 8004150:	f240 326d 	movw	r2, #877	; 0x36d
 8004154:	4917      	ldr	r1, [pc, #92]	; (80041b4 <netif_issue_reports+0x78>)
 8004156:	4818      	ldr	r0, [pc, #96]	; (80041b8 <netif_issue_reports+0x7c>)
 8004158:	f008 fdc8 	bl	800ccec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01e      	beq.n	80041a8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004170:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004174:	2b00      	cmp	r3, #0
 8004176:	d017      	beq.n	80041a8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d013      	beq.n	80041aa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f007 f9dd 	bl	800b560 <etharp_request>
 80041a6:	e000      	b.n	80041aa <netif_issue_reports+0x6e>
    return;
 80041a8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	0800dee0 	.word	0x0800dee0
 80041b4:	0800e084 	.word	0x0800e084
 80041b8:	0800df30 	.word	0x0800df30

080041bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <netif_set_down+0x1e>
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <netif_set_down+0x58>)
 80041cc:	f240 329b 	movw	r2, #923	; 0x39b
 80041d0:	4911      	ldr	r1, [pc, #68]	; (8004218 <netif_set_down+0x5c>)
 80041d2:	4812      	ldr	r0, [pc, #72]	; (800421c <netif_set_down+0x60>)
 80041d4:	f008 fd8a 	bl	800ccec <iprintf>
 80041d8:	e019      	b.n	800420e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d012      	beq.n	800420e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f006 fd67 	bl	800acdc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	0800dee0 	.word	0x0800dee0
 8004218:	0800e0a8 	.word	0x0800e0a8
 800421c:	0800df30 	.word	0x0800df30

08004220 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	61da      	str	r2, [r3, #28]
  }
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800424e:	f06f 030b 	mvn.w	r3, #11
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d013      	beq.n	8004298 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004270:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <netif_get_by_index+0x48>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e00c      	b.n	8004292 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800427e:	3301      	adds	r3, #1
 8004280:	b2db      	uxtb	r3, r3
 8004282:	79fa      	ldrb	r2, [r7, #7]
 8004284:	429a      	cmp	r2, r3
 8004286:	d101      	bne.n	800428c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	e006      	b.n	800429a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ef      	bne.n	8004278 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	2000687c 	.word	0x2000687c

080042ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80042b2:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <pbuf_free_ooseq+0x38>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <pbuf_free_ooseq+0x3c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	e00a      	b.n	80042d6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f002 f92d 	bl	8006528 <tcp_free_ooseq>
      return;
 80042ce:	e005      	b.n	80042dc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	607b      	str	r3, [r7, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f1      	bne.n	80042c0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20006884 	.word	0x20006884
 80042e8:	2000688c 	.word	0x2000688c

080042ec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80042f0:	4b03      	ldr	r3, [pc, #12]	; (8004300 <pbuf_pool_is_empty+0x14>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80042f6:	bf00      	nop
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	20006884 	.word	0x20006884

08004304 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	4611      	mov	r1, r2
 8004310:	461a      	mov	r2, r3
 8004312:	460b      	mov	r3, r1
 8004314:	80fb      	strh	r3, [r7, #6]
 8004316:	4613      	mov	r3, r2
 8004318:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	88fa      	ldrh	r2, [r7, #6]
 800432a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	88ba      	ldrh	r2, [r7, #4]
 8004330:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004332:	8b3b      	ldrh	r3, [r7, #24]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	7f3a      	ldrb	r2, [r7, #28]
 800433e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	73da      	strb	r2, [r3, #15]
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08c      	sub	sp, #48	; 0x30
 800435c:	af02      	add	r7, sp, #8
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
 8004362:	460b      	mov	r3, r1
 8004364:	80bb      	strh	r3, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800436e:	887b      	ldrh	r3, [r7, #2]
 8004370:	2b41      	cmp	r3, #65	; 0x41
 8004372:	d00b      	beq.n	800438c <pbuf_alloc+0x34>
 8004374:	2b41      	cmp	r3, #65	; 0x41
 8004376:	dc02      	bgt.n	800437e <pbuf_alloc+0x26>
 8004378:	2b01      	cmp	r3, #1
 800437a:	d007      	beq.n	800438c <pbuf_alloc+0x34>
 800437c:	e0c2      	b.n	8004504 <pbuf_alloc+0x1ac>
 800437e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004382:	d00b      	beq.n	800439c <pbuf_alloc+0x44>
 8004384:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004388:	d070      	beq.n	800446c <pbuf_alloc+0x114>
 800438a:	e0bb      	b.n	8004504 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800438c:	887a      	ldrh	r2, [r7, #2]
 800438e:	88bb      	ldrh	r3, [r7, #4]
 8004390:	4619      	mov	r1, r3
 8004392:	2000      	movs	r0, #0
 8004394:	f000 f8d2 	bl	800453c <pbuf_alloc_reference>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800439a:	e0bd      	b.n	8004518 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80043a4:	88bb      	ldrh	r3, [r7, #4]
 80043a6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80043a8:	2008      	movs	r0, #8
 80043aa:	f7ff fc5b 	bl	8003c64 <memp_malloc>
 80043ae:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80043b6:	f7ff ff99 	bl	80042ec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 80043c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043c2:	f000 faa9 	bl	8004918 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e0a7      	b.n	800451a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80043ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043cc:	3303      	adds	r3, #3
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f023 0303 	bic.w	r3, r3, #3
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8b7a      	ldrh	r2, [r7, #26]
 80043de:	4293      	cmp	r3, r2
 80043e0:	bf28      	it	cs
 80043e2:	4613      	movcs	r3, r2
 80043e4:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80043e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043e8:	3310      	adds	r3, #16
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	3303      	adds	r3, #3
 80043f0:	f023 0303 	bic.w	r3, r3, #3
 80043f4:	4618      	mov	r0, r3
 80043f6:	89f9      	ldrh	r1, [r7, #14]
 80043f8:	8b7a      	ldrh	r2, [r7, #26]
 80043fa:	2300      	movs	r3, #0
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	887b      	ldrh	r3, [r7, #2]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	460b      	mov	r3, r1
 8004404:	4601      	mov	r1, r0
 8004406:	6938      	ldr	r0, [r7, #16]
 8004408:	f7ff ff7c 	bl	8004304 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d006      	beq.n	8004426 <pbuf_alloc+0xce>
 8004418:	4b42      	ldr	r3, [pc, #264]	; (8004524 <pbuf_alloc+0x1cc>)
 800441a:	f240 1201 	movw	r2, #257	; 0x101
 800441e:	4942      	ldr	r1, [pc, #264]	; (8004528 <pbuf_alloc+0x1d0>)
 8004420:	4842      	ldr	r0, [pc, #264]	; (800452c <pbuf_alloc+0x1d4>)
 8004422:	f008 fc63 	bl	800ccec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004428:	3303      	adds	r3, #3
 800442a:	f023 0303 	bic.w	r3, r3, #3
 800442e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004432:	d106      	bne.n	8004442 <pbuf_alloc+0xea>
 8004434:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <pbuf_alloc+0x1cc>)
 8004436:	f240 1203 	movw	r2, #259	; 0x103
 800443a:	493d      	ldr	r1, [pc, #244]	; (8004530 <pbuf_alloc+0x1d8>)
 800443c:	483b      	ldr	r0, [pc, #236]	; (800452c <pbuf_alloc+0x1d4>)
 800443e:	f008 fc55 	bl	800ccec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
 800444c:	e002      	b.n	8004454 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004458:	8b7a      	ldrh	r2, [r7, #26]
 800445a:	89fb      	ldrh	r3, [r7, #14]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004464:	8b7b      	ldrh	r3, [r7, #26]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d19e      	bne.n	80043a8 <pbuf_alloc+0x50>
      break;
 800446a:	e055      	b.n	8004518 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800446c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800446e:	3303      	adds	r3, #3
 8004470:	b29b      	uxth	r3, r3
 8004472:	f023 0303 	bic.w	r3, r3, #3
 8004476:	b29a      	uxth	r2, r3
 8004478:	88bb      	ldrh	r3, [r7, #4]
 800447a:	3303      	adds	r3, #3
 800447c:	b29b      	uxth	r3, r3
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	b29b      	uxth	r3, r3
 8004484:	4413      	add	r3, r2
 8004486:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004488:	8b3b      	ldrh	r3, [r7, #24]
 800448a:	3310      	adds	r3, #16
 800448c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800448e:	8b3a      	ldrh	r2, [r7, #24]
 8004490:	88bb      	ldrh	r3, [r7, #4]
 8004492:	3303      	adds	r3, #3
 8004494:	f023 0303 	bic.w	r3, r3, #3
 8004498:	429a      	cmp	r2, r3
 800449a:	d306      	bcc.n	80044aa <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800449c:	8afa      	ldrh	r2, [r7, #22]
 800449e:	88bb      	ldrh	r3, [r7, #4]
 80044a0:	3303      	adds	r3, #3
 80044a2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d201      	bcs.n	80044ae <pbuf_alloc+0x156>
        return NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e035      	b.n	800451a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80044ae:	8afb      	ldrh	r3, [r7, #22]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff fa69 	bl	8003988 <mem_malloc>
 80044b6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <pbuf_alloc+0x16a>
        return NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	e02b      	b.n	800451a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80044c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044c4:	3310      	adds	r3, #16
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	4413      	add	r3, r2
 80044ca:	3303      	adds	r3, #3
 80044cc:	f023 0303 	bic.w	r3, r3, #3
 80044d0:	4618      	mov	r0, r3
 80044d2:	88b9      	ldrh	r1, [r7, #4]
 80044d4:	88ba      	ldrh	r2, [r7, #4]
 80044d6:	2300      	movs	r3, #0
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	887b      	ldrh	r3, [r7, #2]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	460b      	mov	r3, r1
 80044e0:	4601      	mov	r1, r0
 80044e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044e4:	f7ff ff0e 	bl	8004304 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d010      	beq.n	8004516 <pbuf_alloc+0x1be>
 80044f4:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <pbuf_alloc+0x1cc>)
 80044f6:	f240 1223 	movw	r2, #291	; 0x123
 80044fa:	490e      	ldr	r1, [pc, #56]	; (8004534 <pbuf_alloc+0x1dc>)
 80044fc:	480b      	ldr	r0, [pc, #44]	; (800452c <pbuf_alloc+0x1d4>)
 80044fe:	f008 fbf5 	bl	800ccec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004502:	e008      	b.n	8004516 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <pbuf_alloc+0x1cc>)
 8004506:	f240 1227 	movw	r2, #295	; 0x127
 800450a:	490b      	ldr	r1, [pc, #44]	; (8004538 <pbuf_alloc+0x1e0>)
 800450c:	4807      	ldr	r0, [pc, #28]	; (800452c <pbuf_alloc+0x1d4>)
 800450e:	f008 fbed 	bl	800ccec <iprintf>
      return NULL;
 8004512:	2300      	movs	r3, #0
 8004514:	e001      	b.n	800451a <pbuf_alloc+0x1c2>
      break;
 8004516:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800451a:	4618      	mov	r0, r3
 800451c:	3728      	adds	r7, #40	; 0x28
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	0800e110 	.word	0x0800e110
 8004528:	0800e140 	.word	0x0800e140
 800452c:	0800e170 	.word	0x0800e170
 8004530:	0800e198 	.word	0x0800e198
 8004534:	0800e1cc 	.word	0x0800e1cc
 8004538:	0800e1f8 	.word	0x0800e1f8

0800453c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af02      	add	r7, sp, #8
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
 8004548:	4613      	mov	r3, r2
 800454a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800454c:	883b      	ldrh	r3, [r7, #0]
 800454e:	2b41      	cmp	r3, #65	; 0x41
 8004550:	d009      	beq.n	8004566 <pbuf_alloc_reference+0x2a>
 8004552:	883b      	ldrh	r3, [r7, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d006      	beq.n	8004566 <pbuf_alloc_reference+0x2a>
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <pbuf_alloc_reference+0x5c>)
 800455a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800455e:	490f      	ldr	r1, [pc, #60]	; (800459c <pbuf_alloc_reference+0x60>)
 8004560:	480f      	ldr	r0, [pc, #60]	; (80045a0 <pbuf_alloc_reference+0x64>)
 8004562:	f008 fbc3 	bl	800ccec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004566:	2007      	movs	r0, #7
 8004568:	f7ff fb7c 	bl	8003c64 <memp_malloc>
 800456c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	e00b      	b.n	8004590 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004578:	8879      	ldrh	r1, [r7, #2]
 800457a:	887a      	ldrh	r2, [r7, #2]
 800457c:	2300      	movs	r3, #0
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	883b      	ldrh	r3, [r7, #0]
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	460b      	mov	r3, r1
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7ff febb 	bl	8004304 <pbuf_init_alloced_pbuf>
  return p;
 800458e:	68fb      	ldr	r3, [r7, #12]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	0800e110 	.word	0x0800e110
 800459c:	0800e214 	.word	0x0800e214
 80045a0:	0800e170 	.word	0x0800e170

080045a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	607b      	str	r3, [r7, #4]
 80045ac:	4603      	mov	r3, r0
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	460b      	mov	r3, r1
 80045b2:	81bb      	strh	r3, [r7, #12]
 80045b4:	4613      	mov	r3, r2
 80045b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80045bc:	8a7b      	ldrh	r3, [r7, #18]
 80045be:	3303      	adds	r3, #3
 80045c0:	f023 0203 	bic.w	r2, r3, #3
 80045c4:	89bb      	ldrh	r3, [r7, #12]
 80045c6:	441a      	add	r2, r3
 80045c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d901      	bls.n	80045d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e018      	b.n	8004604 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80045d8:	8a7b      	ldrh	r3, [r7, #18]
 80045da:	3303      	adds	r3, #3
 80045dc:	f023 0303 	bic.w	r3, r3, #3
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	4413      	add	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e001      	b.n	80045ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	89b9      	ldrh	r1, [r7, #12]
 80045f0:	89ba      	ldrh	r2, [r7, #12]
 80045f2:	2302      	movs	r3, #2
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	897b      	ldrh	r3, [r7, #10]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	460b      	mov	r3, r1
 80045fc:	6979      	ldr	r1, [r7, #20]
 80045fe:	f7ff fe81 	bl	8004304 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004602:	687b      	ldr	r3, [r7, #4]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <pbuf_realloc+0x20>
 800461e:	4b3a      	ldr	r3, [pc, #232]	; (8004708 <pbuf_realloc+0xfc>)
 8004620:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004624:	4939      	ldr	r1, [pc, #228]	; (800470c <pbuf_realloc+0x100>)
 8004626:	483a      	ldr	r0, [pc, #232]	; (8004710 <pbuf_realloc+0x104>)
 8004628:	f008 fb60 	bl	800ccec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	891b      	ldrh	r3, [r3, #8]
 8004630:	887a      	ldrh	r2, [r7, #2]
 8004632:	429a      	cmp	r2, r3
 8004634:	d264      	bcs.n	8004700 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	891a      	ldrh	r2, [r3, #8]
 800463a:	887b      	ldrh	r3, [r7, #2]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004640:	887b      	ldrh	r3, [r7, #2]
 8004642:	817b      	strh	r3, [r7, #10]
  q = p;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004648:	e018      	b.n	800467c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	895b      	ldrh	r3, [r3, #10]
 800464e:	897a      	ldrh	r2, [r7, #10]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	891a      	ldrh	r2, [r3, #8]
 8004658:	893b      	ldrh	r3, [r7, #8]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <pbuf_realloc+0x70>
 800466e:	4b26      	ldr	r3, [pc, #152]	; (8004708 <pbuf_realloc+0xfc>)
 8004670:	f240 12af 	movw	r2, #431	; 0x1af
 8004674:	4927      	ldr	r1, [pc, #156]	; (8004714 <pbuf_realloc+0x108>)
 8004676:	4826      	ldr	r0, [pc, #152]	; (8004710 <pbuf_realloc+0x104>)
 8004678:	f008 fb38 	bl	800ccec <iprintf>
  while (rem_len > q->len) {
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	895b      	ldrh	r3, [r3, #10]
 8004680:	897a      	ldrh	r2, [r7, #10]
 8004682:	429a      	cmp	r2, r3
 8004684:	d8e1      	bhi.n	800464a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	7b1b      	ldrb	r3, [r3, #12]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	2b00      	cmp	r3, #0
 8004690:	d122      	bne.n	80046d8 <pbuf_realloc+0xcc>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	895b      	ldrh	r3, [r3, #10]
 8004696:	897a      	ldrh	r2, [r7, #10]
 8004698:	429a      	cmp	r2, r3
 800469a:	d01d      	beq.n	80046d8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	7b5b      	ldrb	r3, [r3, #13]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d117      	bne.n	80046d8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	461a      	mov	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	897b      	ldrh	r3, [r7, #10]
 80046b6:	4413      	add	r3, r2
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	4619      	mov	r1, r3
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff f867 	bl	8003790 <mem_trim>
 80046c2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <pbuf_realloc+0xcc>
 80046ca:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <pbuf_realloc+0xfc>)
 80046cc:	f240 12bd 	movw	r2, #445	; 0x1bd
 80046d0:	4911      	ldr	r1, [pc, #68]	; (8004718 <pbuf_realloc+0x10c>)
 80046d2:	480f      	ldr	r0, [pc, #60]	; (8004710 <pbuf_realloc+0x104>)
 80046d4:	f008 fb0a 	bl	800ccec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	897a      	ldrh	r2, [r7, #10]
 80046dc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	895a      	ldrh	r2, [r3, #10]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f910 	bl	8004918 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e000      	b.n	8004702 <pbuf_realloc+0xf6>
    return;
 8004700:	bf00      	nop

}
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	0800e110 	.word	0x0800e110
 800470c:	0800e228 	.word	0x0800e228
 8004710:	0800e170 	.word	0x0800e170
 8004714:	0800e240 	.word	0x0800e240
 8004718:	0800e258 	.word	0x0800e258

0800471c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d106      	bne.n	800473e <pbuf_add_header_impl+0x22>
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <pbuf_add_header_impl+0xc4>)
 8004732:	f240 12df 	movw	r2, #479	; 0x1df
 8004736:	492b      	ldr	r1, [pc, #172]	; (80047e4 <pbuf_add_header_impl+0xc8>)
 8004738:	482b      	ldr	r0, [pc, #172]	; (80047e8 <pbuf_add_header_impl+0xcc>)
 800473a:	f008 fad7 	bl	800ccec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <pbuf_add_header_impl+0x30>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474a:	d301      	bcc.n	8004750 <pbuf_add_header_impl+0x34>
    return 1;
 800474c:	2301      	movs	r3, #1
 800474e:	e043      	b.n	80047d8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <pbuf_add_header_impl+0x3e>
    return 0;
 8004756:	2300      	movs	r3, #0
 8004758:	e03e      	b.n	80047d8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	891a      	ldrh	r2, [r3, #8]
 8004762:	8a7b      	ldrh	r3, [r7, #18]
 8004764:	4413      	add	r3, r2
 8004766:	b29b      	uxth	r3, r3
 8004768:	8a7a      	ldrh	r2, [r7, #18]
 800476a:	429a      	cmp	r2, r3
 800476c:	d901      	bls.n	8004772 <pbuf_add_header_impl+0x56>
    return 1;
 800476e:	2301      	movs	r3, #1
 8004770:	e032      	b.n	80047d8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	7b1b      	ldrb	r3, [r3, #12]
 8004776:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004778:	8a3b      	ldrh	r3, [r7, #16]
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	425b      	negs	r3, r3
 800478a:	4413      	add	r3, r2
 800478c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3310      	adds	r3, #16
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	429a      	cmp	r2, r3
 8004796:	d20d      	bcs.n	80047b4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004798:	2301      	movs	r3, #1
 800479a:	e01d      	b.n	80047d8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d006      	beq.n	80047b0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	425b      	negs	r3, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e001      	b.n	80047b4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e011      	b.n	80047d8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	895a      	ldrh	r2, [r3, #10]
 80047be:	8a7b      	ldrh	r3, [r7, #18]
 80047c0:	4413      	add	r3, r2
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	891a      	ldrh	r2, [r3, #8]
 80047cc:	8a7b      	ldrh	r3, [r7, #18]
 80047ce:	4413      	add	r3, r2
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	811a      	strh	r2, [r3, #8]


  return 0;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	0800e110 	.word	0x0800e110
 80047e4:	0800e274 	.word	0x0800e274
 80047e8:	0800e170 	.word	0x0800e170

080047ec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80047f6:	2200      	movs	r2, #0
 80047f8:	6839      	ldr	r1, [r7, #0]
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff ff8e 	bl	800471c <pbuf_add_header_impl>
 8004800:	4603      	mov	r3, r0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <pbuf_remove_header+0x1e>
 800481c:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <pbuf_remove_header+0x94>)
 800481e:	f240 224b 	movw	r2, #587	; 0x24b
 8004822:	4920      	ldr	r1, [pc, #128]	; (80048a4 <pbuf_remove_header+0x98>)
 8004824:	4820      	ldr	r0, [pc, #128]	; (80048a8 <pbuf_remove_header+0x9c>)
 8004826:	f008 fa61 	bl	800ccec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <pbuf_remove_header+0x2c>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004836:	d301      	bcc.n	800483c <pbuf_remove_header+0x30>
    return 1;
 8004838:	2301      	movs	r3, #1
 800483a:	e02c      	b.n	8004896 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <pbuf_remove_header+0x3a>
    return 0;
 8004842:	2300      	movs	r3, #0
 8004844:	e027      	b.n	8004896 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	895b      	ldrh	r3, [r3, #10]
 800484e:	89fa      	ldrh	r2, [r7, #14]
 8004850:	429a      	cmp	r2, r3
 8004852:	d908      	bls.n	8004866 <pbuf_remove_header+0x5a>
 8004854:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <pbuf_remove_header+0x94>)
 8004856:	f240 2255 	movw	r2, #597	; 0x255
 800485a:	4914      	ldr	r1, [pc, #80]	; (80048ac <pbuf_remove_header+0xa0>)
 800485c:	4812      	ldr	r0, [pc, #72]	; (80048a8 <pbuf_remove_header+0x9c>)
 800485e:	f008 fa45 	bl	800ccec <iprintf>
 8004862:	2301      	movs	r3, #1
 8004864:	e017      	b.n	8004896 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	441a      	add	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	895a      	ldrh	r2, [r3, #10]
 800487c:	89fb      	ldrh	r3, [r7, #14]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	891a      	ldrh	r2, [r3, #8]
 800488a:	89fb      	ldrh	r3, [r7, #14]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	0800e110 	.word	0x0800e110
 80048a4:	0800e274 	.word	0x0800e274
 80048a8:	0800e170 	.word	0x0800e170
 80048ac:	0800e280 	.word	0x0800e280

080048b0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
 80048bc:	4613      	mov	r3, r2
 80048be:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80048c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	da08      	bge.n	80048da <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80048c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048cc:	425b      	negs	r3, r3
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff ff9b 	bl	800480c <pbuf_remove_header>
 80048d6:	4603      	mov	r3, r0
 80048d8:	e007      	b.n	80048ea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80048da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048de:	787a      	ldrb	r2, [r7, #1]
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ff1a 	bl	800471c <pbuf_add_header_impl>
 80048e8:	4603      	mov	r3, r0
  }
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80048fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004902:	2201      	movs	r2, #1
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff ffd2 	bl	80048b0 <pbuf_header_impl>
 800490c:	4603      	mov	r3, r0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <pbuf_free+0x22>
 800492c:	4b38      	ldr	r3, [pc, #224]	; (8004a10 <pbuf_free+0xf8>)
 800492e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004932:	4938      	ldr	r1, [pc, #224]	; (8004a14 <pbuf_free+0xfc>)
 8004934:	4838      	ldr	r0, [pc, #224]	; (8004a18 <pbuf_free+0x100>)
 8004936:	f008 f9d9 	bl	800ccec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800493a:	2300      	movs	r3, #0
 800493c:	e063      	b.n	8004a06 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004942:	e05c      	b.n	80049fe <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	7b9b      	ldrb	r3, [r3, #14]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d106      	bne.n	800495a <pbuf_free+0x42>
 800494c:	4b30      	ldr	r3, [pc, #192]	; (8004a10 <pbuf_free+0xf8>)
 800494e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004952:	4932      	ldr	r1, [pc, #200]	; (8004a1c <pbuf_free+0x104>)
 8004954:	4830      	ldr	r0, [pc, #192]	; (8004a18 <pbuf_free+0x100>)
 8004956:	f008 f9c9 	bl	800ccec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	7b9b      	ldrb	r3, [r3, #14]
 800495e:	3b01      	subs	r3, #1
 8004960:	b2da      	uxtb	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	739a      	strb	r2, [r3, #14]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	7b9b      	ldrb	r3, [r3, #14]
 800496a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800496c:	7dbb      	ldrb	r3, [r7, #22]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d143      	bne.n	80049fa <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7b1b      	ldrb	r3, [r3, #12]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	7b5b      	ldrb	r3, [r3, #13]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d011      	beq.n	80049b2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <pbuf_free+0x90>
 800499a:	4b1d      	ldr	r3, [pc, #116]	; (8004a10 <pbuf_free+0xf8>)
 800499c:	f240 22ff 	movw	r2, #767	; 0x2ff
 80049a0:	491f      	ldr	r1, [pc, #124]	; (8004a20 <pbuf_free+0x108>)
 80049a2:	481d      	ldr	r0, [pc, #116]	; (8004a18 <pbuf_free+0x100>)
 80049a4:	f008 f9a2 	bl	800ccec <iprintf>
        pc->custom_free_function(p);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	4798      	blx	r3
 80049b0:	e01d      	b.n	80049ee <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d104      	bne.n	80049c2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	2008      	movs	r0, #8
 80049bc:	f7ff f99e 	bl	8003cfc <memp_free>
 80049c0:	e015      	b.n	80049ee <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d104      	bne.n	80049d2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	2007      	movs	r0, #7
 80049cc:	f7ff f996 	bl	8003cfc <memp_free>
 80049d0:	e00d      	b.n	80049ee <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d103      	bne.n	80049e0 <pbuf_free+0xc8>
          mem_free(p);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fe fe6f 	bl	80036bc <mem_free>
 80049de:	e006      	b.n	80049ee <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <pbuf_free+0xf8>)
 80049e2:	f240 320f 	movw	r2, #783	; 0x30f
 80049e6:	490f      	ldr	r1, [pc, #60]	; (8004a24 <pbuf_free+0x10c>)
 80049e8:	480b      	ldr	r0, [pc, #44]	; (8004a18 <pbuf_free+0x100>)
 80049ea:	f008 f97f 	bl	800ccec <iprintf>
        }
      }
      count++;
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	3301      	adds	r3, #1
 80049f2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	607b      	str	r3, [r7, #4]
 80049f8:	e001      	b.n	80049fe <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d19f      	bne.n	8004944 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	0800e110 	.word	0x0800e110
 8004a14:	0800e274 	.word	0x0800e274
 8004a18:	0800e170 	.word	0x0800e170
 8004a1c:	0800e2a0 	.word	0x0800e2a0
 8004a20:	0800e2b8 	.word	0x0800e2b8
 8004a24:	0800e2dc 	.word	0x0800e2dc

08004a28 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004a34:	e005      	b.n	8004a42 <pbuf_clen+0x1a>
    ++len;
 8004a36:	89fb      	ldrh	r3, [r7, #14]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f6      	bne.n	8004a36 <pbuf_clen+0xe>
  }
  return len;
 8004a48:	89fb      	ldrh	r3, [r7, #14]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
	...

08004a58 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d010      	beq.n	8004a88 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	7b9b      	ldrb	r3, [r3, #14]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	7b9b      	ldrb	r3, [r3, #14]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <pbuf_ref+0x30>
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <pbuf_ref+0x38>)
 8004a7c:	f240 3242 	movw	r2, #834	; 0x342
 8004a80:	4904      	ldr	r1, [pc, #16]	; (8004a94 <pbuf_ref+0x3c>)
 8004a82:	4805      	ldr	r0, [pc, #20]	; (8004a98 <pbuf_ref+0x40>)
 8004a84:	f008 f932 	bl	800ccec <iprintf>
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	0800e110 	.word	0x0800e110
 8004a94:	0800e2f0 	.word	0x0800e2f0
 8004a98:	0800e170 	.word	0x0800e170

08004a9c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <pbuf_cat+0x16>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d107      	bne.n	8004ac2 <pbuf_cat+0x26>
 8004ab2:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <pbuf_cat+0x98>)
 8004ab4:	f240 325a 	movw	r2, #858	; 0x35a
 8004ab8:	491f      	ldr	r1, [pc, #124]	; (8004b38 <pbuf_cat+0x9c>)
 8004aba:	4820      	ldr	r0, [pc, #128]	; (8004b3c <pbuf_cat+0xa0>)
 8004abc:	f008 f916 	bl	800ccec <iprintf>
 8004ac0:	e034      	b.n	8004b2c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	e00a      	b.n	8004ade <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	891a      	ldrh	r2, [r3, #8]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	891b      	ldrh	r3, [r3, #8]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	891a      	ldrh	r2, [r3, #8]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	895b      	ldrh	r3, [r3, #10]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d006      	beq.n	8004b00 <pbuf_cat+0x64>
 8004af2:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <pbuf_cat+0x98>)
 8004af4:	f240 3262 	movw	r2, #866	; 0x362
 8004af8:	4911      	ldr	r1, [pc, #68]	; (8004b40 <pbuf_cat+0xa4>)
 8004afa:	4810      	ldr	r0, [pc, #64]	; (8004b3c <pbuf_cat+0xa0>)
 8004afc:	f008 f8f6 	bl	800ccec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d006      	beq.n	8004b16 <pbuf_cat+0x7a>
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <pbuf_cat+0x98>)
 8004b0a:	f240 3263 	movw	r2, #867	; 0x363
 8004b0e:	490d      	ldr	r1, [pc, #52]	; (8004b44 <pbuf_cat+0xa8>)
 8004b10:	480a      	ldr	r0, [pc, #40]	; (8004b3c <pbuf_cat+0xa0>)
 8004b12:	f008 f8eb 	bl	800ccec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	891a      	ldrh	r2, [r3, #8]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	891b      	ldrh	r3, [r3, #8]
 8004b1e:	4413      	add	r3, r2
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	0800e110 	.word	0x0800e110
 8004b38:	0800e304 	.word	0x0800e304
 8004b3c:	0800e170 	.word	0x0800e170
 8004b40:	0800e33c 	.word	0x0800e33c
 8004b44:	0800e36c 	.word	0x0800e36c

08004b48 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <pbuf_copy+0x2a>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <pbuf_copy+0x2a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	891a      	ldrh	r2, [r3, #8]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	891b      	ldrh	r3, [r3, #8]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d209      	bcs.n	8004b86 <pbuf_copy+0x3e>
 8004b72:	4b57      	ldr	r3, [pc, #348]	; (8004cd0 <pbuf_copy+0x188>)
 8004b74:	f240 32ca 	movw	r2, #970	; 0x3ca
 8004b78:	4956      	ldr	r1, [pc, #344]	; (8004cd4 <pbuf_copy+0x18c>)
 8004b7a:	4857      	ldr	r0, [pc, #348]	; (8004cd8 <pbuf_copy+0x190>)
 8004b7c:	f008 f8b6 	bl	800ccec <iprintf>
 8004b80:	f06f 030f 	mvn.w	r3, #15
 8004b84:	e09f      	b.n	8004cc6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	895b      	ldrh	r3, [r3, #10]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	1ad2      	subs	r2, r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	895b      	ldrh	r3, [r3, #10]
 8004b94:	4619      	mov	r1, r3
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1acb      	subs	r3, r1, r3
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d306      	bcc.n	8004bac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	895b      	ldrh	r3, [r3, #10]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e005      	b.n	8004bb8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	895b      	ldrh	r3, [r3, #10]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	18d0      	adds	r0, r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f008 f87b 	bl	800ccc6 <memcpy>
    offset_to += len;
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	895b      	ldrh	r3, [r3, #10]
 8004be4:	461a      	mov	r2, r3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d906      	bls.n	8004bfa <pbuf_copy+0xb2>
 8004bec:	4b38      	ldr	r3, [pc, #224]	; (8004cd0 <pbuf_copy+0x188>)
 8004bee:	f240 32d9 	movw	r2, #985	; 0x3d9
 8004bf2:	493a      	ldr	r1, [pc, #232]	; (8004cdc <pbuf_copy+0x194>)
 8004bf4:	4838      	ldr	r0, [pc, #224]	; (8004cd8 <pbuf_copy+0x190>)
 8004bf6:	f008 f879 	bl	800ccec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	895b      	ldrh	r3, [r3, #10]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d906      	bls.n	8004c14 <pbuf_copy+0xcc>
 8004c06:	4b32      	ldr	r3, [pc, #200]	; (8004cd0 <pbuf_copy+0x188>)
 8004c08:	f240 32da 	movw	r2, #986	; 0x3da
 8004c0c:	4934      	ldr	r1, [pc, #208]	; (8004ce0 <pbuf_copy+0x198>)
 8004c0e:	4832      	ldr	r0, [pc, #200]	; (8004cd8 <pbuf_copy+0x190>)
 8004c10:	f008 f86c 	bl	800ccec <iprintf>
    if (offset_from >= p_from->len) {
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	895b      	ldrh	r3, [r3, #10]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d304      	bcc.n	8004c2a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	895b      	ldrh	r3, [r3, #10]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d114      	bne.n	8004c60 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10c      	bne.n	8004c60 <pbuf_copy+0x118>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <pbuf_copy+0x118>
 8004c4c:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <pbuf_copy+0x188>)
 8004c4e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8004c52:	4924      	ldr	r1, [pc, #144]	; (8004ce4 <pbuf_copy+0x19c>)
 8004c54:	4820      	ldr	r0, [pc, #128]	; (8004cd8 <pbuf_copy+0x190>)
 8004c56:	f008 f849 	bl	800ccec <iprintf>
 8004c5a:	f06f 030f 	mvn.w	r3, #15
 8004c5e:	e032      	b.n	8004cc6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d013      	beq.n	8004c8e <pbuf_copy+0x146>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	895a      	ldrh	r2, [r3, #10]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	891b      	ldrh	r3, [r3, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d10d      	bne.n	8004c8e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <pbuf_copy+0x146>
 8004c7a:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <pbuf_copy+0x188>)
 8004c7c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8004c80:	4919      	ldr	r1, [pc, #100]	; (8004ce8 <pbuf_copy+0x1a0>)
 8004c82:	4815      	ldr	r0, [pc, #84]	; (8004cd8 <pbuf_copy+0x190>)
 8004c84:	f008 f832 	bl	800ccec <iprintf>
 8004c88:	f06f 0305 	mvn.w	r3, #5
 8004c8c:	e01b      	b.n	8004cc6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d013      	beq.n	8004cbc <pbuf_copy+0x174>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	895a      	ldrh	r2, [r3, #10]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	891b      	ldrh	r3, [r3, #8]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d10d      	bne.n	8004cbc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <pbuf_copy+0x174>
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <pbuf_copy+0x188>)
 8004caa:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8004cae:	490e      	ldr	r1, [pc, #56]	; (8004ce8 <pbuf_copy+0x1a0>)
 8004cb0:	4809      	ldr	r0, [pc, #36]	; (8004cd8 <pbuf_copy+0x190>)
 8004cb2:	f008 f81b 	bl	800ccec <iprintf>
 8004cb6:	f06f 0305 	mvn.w	r3, #5
 8004cba:	e004      	b.n	8004cc6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f47f af61 	bne.w	8004b86 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	0800e110 	.word	0x0800e110
 8004cd4:	0800e3b8 	.word	0x0800e3b8
 8004cd8:	0800e170 	.word	0x0800e170
 8004cdc:	0800e3e8 	.word	0x0800e3e8
 8004ce0:	0800e400 	.word	0x0800e400
 8004ce4:	0800e41c 	.word	0x0800e41c
 8004ce8:	0800e42c 	.word	0x0800e42c

08004cec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	80fb      	strh	r3, [r7, #6]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8004d06:	2300      	movs	r3, #0
 8004d08:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d108      	bne.n	8004d22 <pbuf_copy_partial+0x36>
 8004d10:	4b2b      	ldr	r3, [pc, #172]	; (8004dc0 <pbuf_copy_partial+0xd4>)
 8004d12:	f240 420a 	movw	r2, #1034	; 0x40a
 8004d16:	492b      	ldr	r1, [pc, #172]	; (8004dc4 <pbuf_copy_partial+0xd8>)
 8004d18:	482b      	ldr	r0, [pc, #172]	; (8004dc8 <pbuf_copy_partial+0xdc>)
 8004d1a:	f007 ffe7 	bl	800ccec <iprintf>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e04a      	b.n	8004db8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <pbuf_copy_partial+0x4e>
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <pbuf_copy_partial+0xd4>)
 8004d2a:	f240 420b 	movw	r2, #1035	; 0x40b
 8004d2e:	4927      	ldr	r1, [pc, #156]	; (8004dcc <pbuf_copy_partial+0xe0>)
 8004d30:	4825      	ldr	r0, [pc, #148]	; (8004dc8 <pbuf_copy_partial+0xdc>)
 8004d32:	f007 ffdb 	bl	800ccec <iprintf>
 8004d36:	2300      	movs	r3, #0
 8004d38:	e03e      	b.n	8004db8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	e034      	b.n	8004daa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8004d40:	88bb      	ldrh	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <pbuf_copy_partial+0x70>
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	895b      	ldrh	r3, [r3, #10]
 8004d4a:	88ba      	ldrh	r2, [r7, #4]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d305      	bcc.n	8004d5c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	895b      	ldrh	r3, [r3, #10]
 8004d54:	88ba      	ldrh	r2, [r7, #4]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	80bb      	strh	r3, [r7, #4]
 8004d5a:	e023      	b.n	8004da4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	895a      	ldrh	r2, [r3, #10]
 8004d60:	88bb      	ldrh	r3, [r7, #4]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8004d66:	8b3a      	ldrh	r2, [r7, #24]
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d901      	bls.n	8004d72 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8004d72:	8b7b      	ldrh	r3, [r7, #26]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	18d0      	adds	r0, r2, r3
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	88bb      	ldrh	r3, [r7, #4]
 8004d7e:	4413      	add	r3, r2
 8004d80:	8b3a      	ldrh	r2, [r7, #24]
 8004d82:	4619      	mov	r1, r3
 8004d84:	f007 ff9f 	bl	800ccc6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8004d88:	8afa      	ldrh	r2, [r7, #22]
 8004d8a:	8b3b      	ldrh	r3, [r7, #24]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8004d90:	8b7a      	ldrh	r2, [r7, #26]
 8004d92:	8b3b      	ldrh	r3, [r7, #24]
 8004d94:	4413      	add	r3, r2
 8004d96:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8004d98:	88fa      	ldrh	r2, [r7, #6]
 8004d9a:	8b3b      	ldrh	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <pbuf_copy_partial+0xca>
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1c4      	bne.n	8004d40 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8004db6:	8afb      	ldrh	r3, [r7, #22]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3720      	adds	r7, #32
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	0800e110 	.word	0x0800e110
 8004dc4:	0800e458 	.word	0x0800e458
 8004dc8:	0800e170 	.word	0x0800e170
 8004dcc:	0800e478 	.word	0x0800e478

08004dd0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	603a      	str	r2, [r7, #0]
 8004dda:	71fb      	strb	r3, [r7, #7]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	8919      	ldrh	r1, [r3, #8]
 8004de4:	88ba      	ldrh	r2, [r7, #4]
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fab5 	bl	8004358 <pbuf_alloc>
 8004dee:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <pbuf_clone+0x2a>
    return NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e011      	b.n	8004e1e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8004dfa:	6839      	ldr	r1, [r7, #0]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff fea3 	bl	8004b48 <pbuf_copy>
 8004e02:	4603      	mov	r3, r0
 8004e04:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8004e06:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d006      	beq.n	8004e1c <pbuf_clone+0x4c>
 8004e0e:	4b06      	ldr	r3, [pc, #24]	; (8004e28 <pbuf_clone+0x58>)
 8004e10:	f240 5224 	movw	r2, #1316	; 0x524
 8004e14:	4905      	ldr	r1, [pc, #20]	; (8004e2c <pbuf_clone+0x5c>)
 8004e16:	4806      	ldr	r0, [pc, #24]	; (8004e30 <pbuf_clone+0x60>)
 8004e18:	f007 ff68 	bl	800ccec <iprintf>
  return q;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	0800e110 	.word	0x0800e110
 8004e2c:	0800e584 	.word	0x0800e584
 8004e30:	0800e170 	.word	0x0800e170

08004e34 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8004e38:	f007 ff70 	bl	800cd1c <rand>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	4b01      	ldr	r3, [pc, #4]	; (8004e54 <tcp_init+0x20>)
 8004e4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8004e50:	bf00      	nop
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	2000000a 	.word	0x2000000a

08004e58 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	7d1b      	ldrb	r3, [r3, #20]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d105      	bne.n	8004e74 <tcp_free+0x1c>
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <tcp_free+0x2c>)
 8004e6a:	22d4      	movs	r2, #212	; 0xd4
 8004e6c:	4906      	ldr	r1, [pc, #24]	; (8004e88 <tcp_free+0x30>)
 8004e6e:	4807      	ldr	r0, [pc, #28]	; (8004e8c <tcp_free+0x34>)
 8004e70:	f007 ff3c 	bl	800ccec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	2001      	movs	r0, #1
 8004e78:	f7fe ff40 	bl	8003cfc <memp_free>
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	0800e610 	.word	0x0800e610
 8004e88:	0800e640 	.word	0x0800e640
 8004e8c:	0800e654 	.word	0x0800e654

08004e90 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	7d1b      	ldrb	r3, [r3, #20]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d105      	bne.n	8004eac <tcp_free_listen+0x1c>
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <tcp_free_listen+0x2c>)
 8004ea2:	22df      	movs	r2, #223	; 0xdf
 8004ea4:	4906      	ldr	r1, [pc, #24]	; (8004ec0 <tcp_free_listen+0x30>)
 8004ea6:	4807      	ldr	r0, [pc, #28]	; (8004ec4 <tcp_free_listen+0x34>)
 8004ea8:	f007 ff20 	bl	800ccec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	2002      	movs	r0, #2
 8004eb0:	f7fe ff24 	bl	8003cfc <memp_free>
}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	0800e610 	.word	0x0800e610
 8004ec0:	0800e67c 	.word	0x0800e67c
 8004ec4:	0800e654 	.word	0x0800e654

08004ec8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8004ecc:	f000 fe98 	bl	8005c00 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <tcp_tmr+0x28>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <tcp_tmr+0x28>)
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <tcp_tmr+0x28>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8004ee8:	f000 fb4c 	bl	8005584 <tcp_slowtmr>
  }
}
 8004eec:	bf00      	nop
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	200000c9 	.word	0x200000c9

08004ef4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <tcp_remove_listener+0x1c>
 8004f04:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <tcp_remove_listener+0x48>)
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	490d      	ldr	r1, [pc, #52]	; (8004f40 <tcp_remove_listener+0x4c>)
 8004f0a:	480e      	ldr	r0, [pc, #56]	; (8004f44 <tcp_remove_listener+0x50>)
 8004f0c:	f007 feee 	bl	800ccec <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e00a      	b.n	8004f2c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d102      	bne.n	8004f26 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f1      	bne.n	8004f16 <tcp_remove_listener+0x22>
    }
  }
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	0800e610 	.word	0x0800e610
 8004f40:	0800e698 	.word	0x0800e698
 8004f44:	0800e654 	.word	0x0800e654

08004f48 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <tcp_listen_closed+0x1c>
 8004f56:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <tcp_listen_closed+0x60>)
 8004f58:	f240 1211 	movw	r2, #273	; 0x111
 8004f5c:	4913      	ldr	r1, [pc, #76]	; (8004fac <tcp_listen_closed+0x64>)
 8004f5e:	4814      	ldr	r0, [pc, #80]	; (8004fb0 <tcp_listen_closed+0x68>)
 8004f60:	f007 fec4 	bl	800ccec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	7d1b      	ldrb	r3, [r3, #20]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d006      	beq.n	8004f7a <tcp_listen_closed+0x32>
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <tcp_listen_closed+0x60>)
 8004f6e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8004f72:	4910      	ldr	r1, [pc, #64]	; (8004fb4 <tcp_listen_closed+0x6c>)
 8004f74:	480e      	ldr	r0, [pc, #56]	; (8004fb0 <tcp_listen_closed+0x68>)
 8004f76:	f007 feb9 	bl	800ccec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	e00b      	b.n	8004f98 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8004f80:	4a0d      	ldr	r2, [pc, #52]	; (8004fb8 <tcp_listen_closed+0x70>)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff ffb1 	bl	8004ef4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3301      	adds	r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d9f0      	bls.n	8004f80 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	0800e610 	.word	0x0800e610
 8004fac:	0800e6c0 	.word	0x0800e6c0
 8004fb0:	0800e654 	.word	0x0800e654
 8004fb4:	0800e6cc 	.word	0x0800e6cc
 8004fb8:	080105dc 	.word	0x080105dc

08004fbc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8004fbc:	b5b0      	push	{r4, r5, r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af04      	add	r7, sp, #16
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <tcp_close_shutdown+0x20>
 8004fce:	4b61      	ldr	r3, [pc, #388]	; (8005154 <tcp_close_shutdown+0x198>)
 8004fd0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8004fd4:	4960      	ldr	r1, [pc, #384]	; (8005158 <tcp_close_shutdown+0x19c>)
 8004fd6:	4861      	ldr	r0, [pc, #388]	; (800515c <tcp_close_shutdown+0x1a0>)
 8004fd8:	f007 fe88 	bl	800ccec <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d066      	beq.n	80050b0 <tcp_close_shutdown+0xf4>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	7d1b      	ldrb	r3, [r3, #20]
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d003      	beq.n	8004ff2 <tcp_close_shutdown+0x36>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	7d1b      	ldrb	r3, [r3, #20]
 8004fee:	2b07      	cmp	r3, #7
 8004ff0:	d15e      	bne.n	80050b0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d104      	bne.n	8005004 <tcp_close_shutdown+0x48>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005002:	d055      	beq.n	80050b0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8b5b      	ldrh	r3, [r3, #26]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <tcp_close_shutdown+0x62>
 8005010:	4b50      	ldr	r3, [pc, #320]	; (8005154 <tcp_close_shutdown+0x198>)
 8005012:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005016:	4952      	ldr	r1, [pc, #328]	; (8005160 <tcp_close_shutdown+0x1a4>)
 8005018:	4850      	ldr	r0, [pc, #320]	; (800515c <tcp_close_shutdown+0x1a0>)
 800501a:	f007 fe67 	bl	800ccec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005026:	687d      	ldr	r5, [r7, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	8ad2      	ldrh	r2, [r2, #22]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	8b09      	ldrh	r1, [r1, #24]
 8005034:	9102      	str	r1, [sp, #8]
 8005036:	9201      	str	r2, [sp, #4]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	462b      	mov	r3, r5
 800503c:	4622      	mov	r2, r4
 800503e:	4601      	mov	r1, r0
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f004 fe8f 	bl	8009d64 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f001 f8ba 	bl	80061c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800504c:	4b45      	ldr	r3, [pc, #276]	; (8005164 <tcp_close_shutdown+0x1a8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d105      	bne.n	8005062 <tcp_close_shutdown+0xa6>
 8005056:	4b43      	ldr	r3, [pc, #268]	; (8005164 <tcp_close_shutdown+0x1a8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4a41      	ldr	r2, [pc, #260]	; (8005164 <tcp_close_shutdown+0x1a8>)
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	e013      	b.n	800508a <tcp_close_shutdown+0xce>
 8005062:	4b40      	ldr	r3, [pc, #256]	; (8005164 <tcp_close_shutdown+0x1a8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	e00c      	b.n	8005084 <tcp_close_shutdown+0xc8>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d104      	bne.n	800507e <tcp_close_shutdown+0xc2>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	60da      	str	r2, [r3, #12]
 800507c:	e005      	b.n	800508a <tcp_close_shutdown+0xce>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1ef      	bne.n	800506a <tcp_close_shutdown+0xae>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	60da      	str	r2, [r3, #12]
 8005090:	4b35      	ldr	r3, [pc, #212]	; (8005168 <tcp_close_shutdown+0x1ac>)
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005096:	4b35      	ldr	r3, [pc, #212]	; (800516c <tcp_close_shutdown+0x1b0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	429a      	cmp	r2, r3
 800509e:	d102      	bne.n	80050a6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80050a0:	f003 fd4c 	bl	8008b3c <tcp_trigger_input_pcb_close>
 80050a4:	e002      	b.n	80050ac <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fed6 	bl	8004e58 <tcp_free>
      }
      return ERR_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e04d      	b.n	800514c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	7d1b      	ldrb	r3, [r3, #20]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d02d      	beq.n	8005114 <tcp_close_shutdown+0x158>
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d036      	beq.n	800512a <tcp_close_shutdown+0x16e>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d13f      	bne.n	8005140 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8adb      	ldrh	r3, [r3, #22]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d021      	beq.n	800510c <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80050c8:	4b29      	ldr	r3, [pc, #164]	; (8005170 <tcp_close_shutdown+0x1b4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d105      	bne.n	80050de <tcp_close_shutdown+0x122>
 80050d2:	4b27      	ldr	r3, [pc, #156]	; (8005170 <tcp_close_shutdown+0x1b4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a25      	ldr	r2, [pc, #148]	; (8005170 <tcp_close_shutdown+0x1b4>)
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	e013      	b.n	8005106 <tcp_close_shutdown+0x14a>
 80050de:	4b24      	ldr	r3, [pc, #144]	; (8005170 <tcp_close_shutdown+0x1b4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60bb      	str	r3, [r7, #8]
 80050e4:	e00c      	b.n	8005100 <tcp_close_shutdown+0x144>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d104      	bne.n	80050fa <tcp_close_shutdown+0x13e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	e005      	b.n	8005106 <tcp_close_shutdown+0x14a>
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1ef      	bne.n	80050e6 <tcp_close_shutdown+0x12a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff fea3 	bl	8004e58 <tcp_free>
      break;
 8005112:	e01a      	b.n	800514a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ff17 	bl	8004f48 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	4815      	ldr	r0, [pc, #84]	; (8005174 <tcp_close_shutdown+0x1b8>)
 800511e:	f001 f89f 	bl	8006260 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff feb4 	bl	8004e90 <tcp_free_listen>
      break;
 8005128:	e00f      	b.n	800514a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	480d      	ldr	r0, [pc, #52]	; (8005164 <tcp_close_shutdown+0x1a8>)
 800512e:	f001 f897 	bl	8006260 <tcp_pcb_remove>
 8005132:	4b0d      	ldr	r3, [pc, #52]	; (8005168 <tcp_close_shutdown+0x1ac>)
 8005134:	2201      	movs	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff fe8d 	bl	8004e58 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800513e:	e004      	b.n	800514a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f819 	bl	8005178 <tcp_close_shutdown_fin>
 8005146:	4603      	mov	r3, r0
 8005148:	e000      	b.n	800514c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bdb0      	pop	{r4, r5, r7, pc}
 8005154:	0800e610 	.word	0x0800e610
 8005158:	0800e6e4 	.word	0x0800e6e4
 800515c:	0800e654 	.word	0x0800e654
 8005160:	0800e704 	.word	0x0800e704
 8005164:	2000688c 	.word	0x2000688c
 8005168:	20006888 	.word	0x20006888
 800516c:	200068a0 	.word	0x200068a0
 8005170:	20006898 	.word	0x20006898
 8005174:	20006894 	.word	0x20006894

08005178 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <tcp_close_shutdown_fin+0x1c>
 8005186:	4b2c      	ldr	r3, [pc, #176]	; (8005238 <tcp_close_shutdown_fin+0xc0>)
 8005188:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800518c:	492b      	ldr	r1, [pc, #172]	; (800523c <tcp_close_shutdown_fin+0xc4>)
 800518e:	482c      	ldr	r0, [pc, #176]	; (8005240 <tcp_close_shutdown_fin+0xc8>)
 8005190:	f007 fdac 	bl	800ccec <iprintf>

  switch (pcb->state) {
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	7d1b      	ldrb	r3, [r3, #20]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d010      	beq.n	80051be <tcp_close_shutdown_fin+0x46>
 800519c:	2b07      	cmp	r3, #7
 800519e:	d01b      	beq.n	80051d8 <tcp_close_shutdown_fin+0x60>
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d126      	bne.n	80051f2 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f003 fedb 	bl	8008f60 <tcp_send_fin>
 80051aa:	4603      	mov	r3, r0
 80051ac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80051ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d11f      	bne.n	80051f6 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2205      	movs	r2, #5
 80051ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80051bc:	e01b      	b.n	80051f6 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f003 fece 	bl	8008f60 <tcp_send_fin>
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80051c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d114      	bne.n	80051fa <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2205      	movs	r2, #5
 80051d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80051d6:	e010      	b.n	80051fa <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f003 fec1 	bl	8008f60 <tcp_send_fin>
 80051de:	4603      	mov	r3, r0
 80051e0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80051e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2209      	movs	r2, #9
 80051ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 80051f0:	e005      	b.n	80051fe <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e01c      	b.n	8005230 <tcp_close_shutdown_fin+0xb8>
      break;
 80051f6:	bf00      	nop
 80051f8:	e002      	b.n	8005200 <tcp_close_shutdown_fin+0x88>
      break;
 80051fa:	bf00      	nop
 80051fc:	e000      	b.n	8005200 <tcp_close_shutdown_fin+0x88>
      break;
 80051fe:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d103      	bne.n	8005210 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f003 ffe7 	bl	80091dc <tcp_output>
 800520e:	e00d      	b.n	800522c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8005210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d108      	bne.n	800522c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	8b5b      	ldrh	r3, [r3, #26]
 800521e:	f043 0308 	orr.w	r3, r3, #8
 8005222:	b29a      	uxth	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	e001      	b.n	8005230 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800522c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	0800e610 	.word	0x0800e610
 800523c:	0800e6c0 	.word	0x0800e6c0
 8005240:	0800e654 	.word	0x0800e654

08005244 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <tcp_close+0x22>
 8005252:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <tcp_close+0x4c>)
 8005254:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005258:	490e      	ldr	r1, [pc, #56]	; (8005294 <tcp_close+0x50>)
 800525a:	480f      	ldr	r0, [pc, #60]	; (8005298 <tcp_close+0x54>)
 800525c:	f007 fd46 	bl	800ccec <iprintf>
 8005260:	f06f 030f 	mvn.w	r3, #15
 8005264:	e00f      	b.n	8005286 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	7d1b      	ldrb	r3, [r3, #20]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d006      	beq.n	800527c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8b5b      	ldrh	r3, [r3, #26]
 8005272:	f043 0310 	orr.w	r3, r3, #16
 8005276:	b29a      	uxth	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800527c:	2101      	movs	r1, #1
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fe9c 	bl	8004fbc <tcp_close_shutdown>
 8005284:	4603      	mov	r3, r0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	0800e610 	.word	0x0800e610
 8005294:	0800e720 	.word	0x0800e720
 8005298:	0800e654 	.word	0x0800e654

0800529c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08e      	sub	sp, #56	; 0x38
 80052a0:	af04      	add	r7, sp, #16
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d107      	bne.n	80052bc <tcp_abandon+0x20>
 80052ac:	4b52      	ldr	r3, [pc, #328]	; (80053f8 <tcp_abandon+0x15c>)
 80052ae:	f240 223d 	movw	r2, #573	; 0x23d
 80052b2:	4952      	ldr	r1, [pc, #328]	; (80053fc <tcp_abandon+0x160>)
 80052b4:	4852      	ldr	r0, [pc, #328]	; (8005400 <tcp_abandon+0x164>)
 80052b6:	f007 fd19 	bl	800ccec <iprintf>
 80052ba:	e099      	b.n	80053f0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7d1b      	ldrb	r3, [r3, #20]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d106      	bne.n	80052d2 <tcp_abandon+0x36>
 80052c4:	4b4c      	ldr	r3, [pc, #304]	; (80053f8 <tcp_abandon+0x15c>)
 80052c6:	f240 2241 	movw	r2, #577	; 0x241
 80052ca:	494e      	ldr	r1, [pc, #312]	; (8005404 <tcp_abandon+0x168>)
 80052cc:	484c      	ldr	r0, [pc, #304]	; (8005400 <tcp_abandon+0x164>)
 80052ce:	f007 fd0d 	bl	800ccec <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	7d1b      	ldrb	r3, [r3, #20]
 80052d6:	2b0a      	cmp	r3, #10
 80052d8:	d107      	bne.n	80052ea <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	484a      	ldr	r0, [pc, #296]	; (8005408 <tcp_abandon+0x16c>)
 80052de:	f000 ffbf 	bl	8006260 <tcp_pcb_remove>
    tcp_free(pcb);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fdb8 	bl	8004e58 <tcp_free>
 80052e8:	e082      	b.n	80053f0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005304:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	7d1b      	ldrb	r3, [r3, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d126      	bne.n	8005362 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8adb      	ldrh	r3, [r3, #22]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d02e      	beq.n	800537a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800531c:	4b3b      	ldr	r3, [pc, #236]	; (800540c <tcp_abandon+0x170>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d105      	bne.n	8005332 <tcp_abandon+0x96>
 8005326:	4b39      	ldr	r3, [pc, #228]	; (800540c <tcp_abandon+0x170>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4a37      	ldr	r2, [pc, #220]	; (800540c <tcp_abandon+0x170>)
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	e013      	b.n	800535a <tcp_abandon+0xbe>
 8005332:	4b36      	ldr	r3, [pc, #216]	; (800540c <tcp_abandon+0x170>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	e00c      	b.n	8005354 <tcp_abandon+0xb8>
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d104      	bne.n	800534e <tcp_abandon+0xb2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	e005      	b.n	800535a <tcp_abandon+0xbe>
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	61fb      	str	r3, [r7, #28]
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1ef      	bne.n	800533a <tcp_abandon+0x9e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	60da      	str	r2, [r3, #12]
 8005360:	e00b      	b.n	800537a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8adb      	ldrh	r3, [r3, #22]
 800536a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4828      	ldr	r0, [pc, #160]	; (8005410 <tcp_abandon+0x174>)
 8005370:	f000 ff76 	bl	8006260 <tcp_pcb_remove>
 8005374:	4b27      	ldr	r3, [pc, #156]	; (8005414 <tcp_abandon+0x178>)
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fd1a 	bl	8005dc0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fd11 	bl	8005dc0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fd08 	bl	8005dc0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00e      	beq.n	80053d4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3304      	adds	r3, #4
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	8b12      	ldrh	r2, [r2, #24]
 80053c0:	9202      	str	r2, [sp, #8]
 80053c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80053c4:	9201      	str	r2, [sp, #4]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	460b      	mov	r3, r1
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	69b9      	ldr	r1, [r7, #24]
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f004 fcc8 	bl	8009d64 <tcp_rst>
    }
    last_state = pcb->state;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	7d1b      	ldrb	r3, [r3, #20]
 80053d8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fd3c 	bl	8004e58 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d004      	beq.n	80053f0 <tcp_abandon+0x154>
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f06f 010c 	mvn.w	r1, #12
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	4798      	blx	r3
  }
}
 80053f0:	3728      	adds	r7, #40	; 0x28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	0800e610 	.word	0x0800e610
 80053fc:	0800e754 	.word	0x0800e754
 8005400:	0800e654 	.word	0x0800e654
 8005404:	0800e770 	.word	0x0800e770
 8005408:	2000689c 	.word	0x2000689c
 800540c:	20006898 	.word	0x20006898
 8005410:	2000688c 	.word	0x2000688c
 8005414:	20006888 	.word	0x20006888

08005418 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005420:	2101      	movs	r1, #1
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff ff3a 	bl	800529c <tcp_abandon>
}
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <tcp_update_rcv_ann_wnd+0x1c>
 800543e:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <tcp_update_rcv_ann_wnd+0xa4>)
 8005440:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005444:	4924      	ldr	r1, [pc, #144]	; (80054d8 <tcp_update_rcv_ann_wnd+0xa8>)
 8005446:	4825      	ldr	r0, [pc, #148]	; (80054dc <tcp_update_rcv_ann_wnd+0xac>)
 8005448:	f007 fc50 	bl	800ccec <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005454:	4413      	add	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005460:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005464:	bf28      	it	cs
 8005466:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800546a:	b292      	uxth	r2, r2
 800546c:	4413      	add	r3, r2
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	db08      	blt.n	8005488 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	e020      	b.n	80054ca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	dd03      	ble.n	800549e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800549c:	e014      	b.n	80054c8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b0:	d306      	bcc.n	80054c0 <tcp_update_rcv_ann_wnd+0x90>
 80054b2:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <tcp_update_rcv_ann_wnd+0xa4>)
 80054b4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80054b8:	4909      	ldr	r1, [pc, #36]	; (80054e0 <tcp_update_rcv_ann_wnd+0xb0>)
 80054ba:	4808      	ldr	r0, [pc, #32]	; (80054dc <tcp_update_rcv_ann_wnd+0xac>)
 80054bc:	f007 fc16 	bl	800ccec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80054c8:	2300      	movs	r3, #0
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	0800e610 	.word	0x0800e610
 80054d8:	0800e86c 	.word	0x0800e86c
 80054dc:	0800e654 	.word	0x0800e654
 80054e0:	0800e890 	.word	0x0800e890

080054e4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d107      	bne.n	8005506 <tcp_recved+0x22>
 80054f6:	4b1f      	ldr	r3, [pc, #124]	; (8005574 <tcp_recved+0x90>)
 80054f8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80054fc:	491e      	ldr	r1, [pc, #120]	; (8005578 <tcp_recved+0x94>)
 80054fe:	481f      	ldr	r0, [pc, #124]	; (800557c <tcp_recved+0x98>)
 8005500:	f007 fbf4 	bl	800ccec <iprintf>
 8005504:	e032      	b.n	800556c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	7d1b      	ldrb	r3, [r3, #20]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d106      	bne.n	800551c <tcp_recved+0x38>
 800550e:	4b19      	ldr	r3, [pc, #100]	; (8005574 <tcp_recved+0x90>)
 8005510:	f240 32d3 	movw	r2, #979	; 0x3d3
 8005514:	491a      	ldr	r1, [pc, #104]	; (8005580 <tcp_recved+0x9c>)
 8005516:	4819      	ldr	r0, [pc, #100]	; (800557c <tcp_recved+0x98>)
 8005518:	f007 fbe8 	bl	800ccec <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005520:	887b      	ldrh	r3, [r7, #2]
 8005522:	4413      	add	r3, r2
 8005524:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005526:	89fb      	ldrh	r3, [r7, #14]
 8005528:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800552c:	d804      	bhi.n	8005538 <tcp_recved+0x54>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005532:	89fa      	ldrh	r2, [r7, #14]
 8005534:	429a      	cmp	r2, r3
 8005536:	d204      	bcs.n	8005542 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800553e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005540:	e002      	b.n	8005548 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	89fa      	ldrh	r2, [r7, #14]
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff ff71 	bl	8005430 <tcp_update_rcv_ann_wnd>
 800554e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005556:	d309      	bcc.n	800556c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8b5b      	ldrh	r3, [r3, #26]
 800555c:	f043 0302 	orr.w	r3, r3, #2
 8005560:	b29a      	uxth	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f003 fe38 	bl	80091dc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	0800e610 	.word	0x0800e610
 8005578:	0800e8ac 	.word	0x0800e8ac
 800557c:	0800e654 	.word	0x0800e654
 8005580:	0800e8c4 	.word	0x0800e8c4

08005584 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005584:	b5b0      	push	{r4, r5, r7, lr}
 8005586:	b090      	sub	sp, #64	; 0x40
 8005588:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005590:	4b94      	ldr	r3, [pc, #592]	; (80057e4 <tcp_slowtmr+0x260>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3301      	adds	r3, #1
 8005596:	4a93      	ldr	r2, [pc, #588]	; (80057e4 <tcp_slowtmr+0x260>)
 8005598:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800559a:	4b93      	ldr	r3, [pc, #588]	; (80057e8 <tcp_slowtmr+0x264>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	3301      	adds	r3, #1
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	4b91      	ldr	r3, [pc, #580]	; (80057e8 <tcp_slowtmr+0x264>)
 80055a4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80055aa:	4b90      	ldr	r3, [pc, #576]	; (80057ec <tcp_slowtmr+0x268>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80055b0:	e29f      	b.n	8005af2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	7d1b      	ldrb	r3, [r3, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <tcp_slowtmr+0x44>
 80055ba:	4b8d      	ldr	r3, [pc, #564]	; (80057f0 <tcp_slowtmr+0x26c>)
 80055bc:	f240 42be 	movw	r2, #1214	; 0x4be
 80055c0:	498c      	ldr	r1, [pc, #560]	; (80057f4 <tcp_slowtmr+0x270>)
 80055c2:	488d      	ldr	r0, [pc, #564]	; (80057f8 <tcp_slowtmr+0x274>)
 80055c4:	f007 fb92 	bl	800ccec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	7d1b      	ldrb	r3, [r3, #20]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d106      	bne.n	80055de <tcp_slowtmr+0x5a>
 80055d0:	4b87      	ldr	r3, [pc, #540]	; (80057f0 <tcp_slowtmr+0x26c>)
 80055d2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80055d6:	4989      	ldr	r1, [pc, #548]	; (80057fc <tcp_slowtmr+0x278>)
 80055d8:	4887      	ldr	r0, [pc, #540]	; (80057f8 <tcp_slowtmr+0x274>)
 80055da:	f007 fb87 	bl	800ccec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	7d1b      	ldrb	r3, [r3, #20]
 80055e2:	2b0a      	cmp	r3, #10
 80055e4:	d106      	bne.n	80055f4 <tcp_slowtmr+0x70>
 80055e6:	4b82      	ldr	r3, [pc, #520]	; (80057f0 <tcp_slowtmr+0x26c>)
 80055e8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80055ec:	4984      	ldr	r1, [pc, #528]	; (8005800 <tcp_slowtmr+0x27c>)
 80055ee:	4882      	ldr	r0, [pc, #520]	; (80057f8 <tcp_slowtmr+0x274>)
 80055f0:	f007 fb7c 	bl	800ccec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	7f9a      	ldrb	r2, [r3, #30]
 80055f8:	4b7b      	ldr	r3, [pc, #492]	; (80057e8 <tcp_slowtmr+0x264>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d105      	bne.n	800560c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800560a:	e272      	b.n	8005af2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800560c:	4b76      	ldr	r3, [pc, #472]	; (80057e8 <tcp_slowtmr+0x264>)
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	7d1b      	ldrb	r3, [r3, #20]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d10a      	bne.n	800563e <tcp_slowtmr+0xba>
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800562e:	2b05      	cmp	r3, #5
 8005630:	d905      	bls.n	800563e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005636:	3301      	adds	r3, #1
 8005638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800563c:	e11e      	b.n	800587c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005644:	2b0b      	cmp	r3, #11
 8005646:	d905      	bls.n	8005654 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8005648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800564c:	3301      	adds	r3, #1
 800564e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005652:	e113      	b.n	800587c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800565a:	2b00      	cmp	r3, #0
 800565c:	d075      	beq.n	800574a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005662:	2b00      	cmp	r3, #0
 8005664:	d006      	beq.n	8005674 <tcp_slowtmr+0xf0>
 8005666:	4b62      	ldr	r3, [pc, #392]	; (80057f0 <tcp_slowtmr+0x26c>)
 8005668:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800566c:	4965      	ldr	r1, [pc, #404]	; (8005804 <tcp_slowtmr+0x280>)
 800566e:	4862      	ldr	r0, [pc, #392]	; (80057f8 <tcp_slowtmr+0x274>)
 8005670:	f007 fb3c 	bl	800ccec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <tcp_slowtmr+0x106>
 800567c:	4b5c      	ldr	r3, [pc, #368]	; (80057f0 <tcp_slowtmr+0x26c>)
 800567e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005682:	4961      	ldr	r1, [pc, #388]	; (8005808 <tcp_slowtmr+0x284>)
 8005684:	485c      	ldr	r0, [pc, #368]	; (80057f8 <tcp_slowtmr+0x274>)
 8005686:	f007 fb31 	bl	800ccec <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005690:	2b0b      	cmp	r3, #11
 8005692:	d905      	bls.n	80056a0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005698:	3301      	adds	r3, #1
 800569a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800569e:	e0ed      	b.n	800587c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80056a6:	3b01      	subs	r3, #1
 80056a8:	4a58      	ldr	r2, [pc, #352]	; (800580c <tcp_slowtmr+0x288>)
 80056aa:	5cd3      	ldrb	r3, [r2, r3]
 80056ac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80056b4:	7c7a      	ldrb	r2, [r7, #17]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d907      	bls.n	80056ca <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80056ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80056c0:	3301      	adds	r3, #1
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80056d0:	7c7a      	ldrb	r2, [r7, #17]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	f200 80d2 	bhi.w	800587c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80056d8:	2301      	movs	r3, #1
 80056da:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d108      	bne.n	80056f8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80056e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056e8:	f004 fc30 	bl	8009f4c <tcp_zero_window_probe>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d014      	beq.n	800571c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80056f2:	2300      	movs	r3, #0
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	e011      	b.n	800571c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80056fe:	4619      	mov	r1, r3
 8005700:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005702:	f003 fae5 	bl	8008cd0 <tcp_split_unsent_seg>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d107      	bne.n	800571c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800570c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800570e:	f003 fd65 	bl	80091dc <tcp_output>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 80ac 	beq.w	800587c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005732:	2b06      	cmp	r3, #6
 8005734:	f200 80a2 	bhi.w	800587c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800573e:	3301      	adds	r3, #1
 8005740:	b2da      	uxtb	r2, r3
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005748:	e098      	b.n	800587c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005750:	2b00      	cmp	r3, #0
 8005752:	db0f      	blt.n	8005774 <tcp_slowtmr+0x1f0>
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800575a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800575e:	4293      	cmp	r3, r2
 8005760:	d008      	beq.n	8005774 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005764:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005768:	b29b      	uxth	r3, r3
 800576a:	3301      	adds	r3, #1
 800576c:	b29b      	uxth	r3, r3
 800576e:	b21a      	sxth	r2, r3
 8005770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005772:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005780:	429a      	cmp	r2, r3
 8005782:	db7b      	blt.n	800587c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005784:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005786:	f004 f821 	bl	80097cc <tcp_rexmit_rto_prepare>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <tcp_slowtmr+0x21c>
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005794:	2b00      	cmp	r3, #0
 8005796:	d171      	bne.n	800587c <tcp_slowtmr+0x2f8>
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d06d      	beq.n	800587c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	7d1b      	ldrb	r3, [r3, #20]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d03a      	beq.n	800581e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057ae:	2b0c      	cmp	r3, #12
 80057b0:	bf28      	it	cs
 80057b2:	230c      	movcs	r3, #12
 80057b4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80057bc:	10db      	asrs	r3, r3, #3
 80057be:	b21b      	sxth	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80057c8:	4413      	add	r3, r2
 80057ca:	7efa      	ldrb	r2, [r7, #27]
 80057cc:	4910      	ldr	r1, [pc, #64]	; (8005810 <tcp_slowtmr+0x28c>)
 80057ce:	5c8a      	ldrb	r2, [r1, r2]
 80057d0:	4093      	lsls	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80057da:	4293      	cmp	r3, r2
 80057dc:	dc1a      	bgt.n	8005814 <tcp_slowtmr+0x290>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	b21a      	sxth	r2, r3
 80057e2:	e019      	b.n	8005818 <tcp_slowtmr+0x294>
 80057e4:	20006890 	.word	0x20006890
 80057e8:	200000ca 	.word	0x200000ca
 80057ec:	2000688c 	.word	0x2000688c
 80057f0:	0800e610 	.word	0x0800e610
 80057f4:	0800e954 	.word	0x0800e954
 80057f8:	0800e654 	.word	0x0800e654
 80057fc:	0800e980 	.word	0x0800e980
 8005800:	0800e9ac 	.word	0x0800e9ac
 8005804:	0800e9dc 	.word	0x0800e9dc
 8005808:	0800ea10 	.word	0x0800ea10
 800580c:	080105d4 	.word	0x080105d4
 8005810:	080105c4 	.word	0x080105c4
 8005814:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	2200      	movs	r2, #0
 8005822:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005826:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005830:	4293      	cmp	r3, r2
 8005832:	bf28      	it	cs
 8005834:	4613      	movcs	r3, r2
 8005836:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005838:	8a7b      	ldrh	r3, [r7, #18]
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	b29b      	uxth	r3, r3
 8005852:	429a      	cmp	r2, r3
 8005854:	d206      	bcs.n	8005864 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	2200      	movs	r2, #0
 8005872:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005878:	f004 f818 	bl	80098ac <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	7d1b      	ldrb	r3, [r3, #20]
 8005880:	2b06      	cmp	r3, #6
 8005882:	d111      	bne.n	80058a8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005886:	8b5b      	ldrh	r3, [r3, #26]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00b      	beq.n	80058a8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005890:	4b9d      	ldr	r3, [pc, #628]	; (8005b08 <tcp_slowtmr+0x584>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b28      	cmp	r3, #40	; 0x28
 800589c:	d904      	bls.n	80058a8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800589e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058a2:	3301      	adds	r3, #1
 80058a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	7a5b      	ldrb	r3, [r3, #9]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d04c      	beq.n	800594e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d003      	beq.n	80058c4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80058bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058be:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80058c0:	2b07      	cmp	r3, #7
 80058c2:	d144      	bne.n	800594e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80058c4:	4b90      	ldr	r3, [pc, #576]	; (8005b08 <tcp_slowtmr+0x584>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058d4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80058d8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80058dc:	498b      	ldr	r1, [pc, #556]	; (8005b0c <tcp_slowtmr+0x588>)
 80058de:	fba1 1303 	umull	r1, r3, r1, r3
 80058e2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d90a      	bls.n	80058fe <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80058e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058ec:	3301      	adds	r3, #1
 80058ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80058f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058f6:	3301      	adds	r3, #1
 80058f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80058fc:	e027      	b.n	800594e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80058fe:	4b82      	ldr	r3, [pc, #520]	; (8005b08 <tcp_slowtmr+0x584>)
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005914:	4618      	mov	r0, r3
 8005916:	4b7e      	ldr	r3, [pc, #504]	; (8005b10 <tcp_slowtmr+0x58c>)
 8005918:	fb03 f300 	mul.w	r3, r3, r0
 800591c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800591e:	497b      	ldr	r1, [pc, #492]	; (8005b0c <tcp_slowtmr+0x588>)
 8005920:	fba1 1303 	umull	r1, r3, r1, r3
 8005924:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005926:	429a      	cmp	r2, r3
 8005928:	d911      	bls.n	800594e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800592a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800592c:	f004 face 	bl	8009ecc <tcp_keepalive>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005936:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800593a:	2b00      	cmp	r3, #0
 800593c:	d107      	bne.n	800594e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005944:	3301      	adds	r3, #1
 8005946:	b2da      	uxtb	r2, r3
 8005948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005952:	2b00      	cmp	r3, #0
 8005954:	d011      	beq.n	800597a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005956:	4b6c      	ldr	r3, [pc, #432]	; (8005b08 <tcp_slowtmr+0x584>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	1ad2      	subs	r2, r2, r3
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005966:	4619      	mov	r1, r3
 8005968:	460b      	mov	r3, r1
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	440b      	add	r3, r1
 800596e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005970:	429a      	cmp	r2, r3
 8005972:	d302      	bcc.n	800597a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8005974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005976:	f000 fdd7 	bl	8006528 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	7d1b      	ldrb	r3, [r3, #20]
 800597e:	2b03      	cmp	r3, #3
 8005980:	d10b      	bne.n	800599a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005982:	4b61      	ldr	r3, [pc, #388]	; (8005b08 <tcp_slowtmr+0x584>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b28      	cmp	r3, #40	; 0x28
 800598e:	d904      	bls.n	800599a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005994:	3301      	adds	r3, #1
 8005996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	7d1b      	ldrb	r3, [r3, #20]
 800599e:	2b09      	cmp	r3, #9
 80059a0:	d10b      	bne.n	80059ba <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80059a2:	4b59      	ldr	r3, [pc, #356]	; (8005b08 <tcp_slowtmr+0x584>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2bf0      	cmp	r3, #240	; 0xf0
 80059ae:	d904      	bls.n	80059ba <tcp_slowtmr+0x436>
        ++pcb_remove;
 80059b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059b4:	3301      	adds	r3, #1
 80059b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80059ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d060      	beq.n	8005a84 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80059c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80059ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059cc:	f000 fbf8 	bl	80061c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d010      	beq.n	80059f8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80059d6:	4b4f      	ldr	r3, [pc, #316]	; (8005b14 <tcp_slowtmr+0x590>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059dc:	429a      	cmp	r2, r3
 80059de:	d106      	bne.n	80059ee <tcp_slowtmr+0x46a>
 80059e0:	4b4d      	ldr	r3, [pc, #308]	; (8005b18 <tcp_slowtmr+0x594>)
 80059e2:	f240 526d 	movw	r2, #1389	; 0x56d
 80059e6:	494d      	ldr	r1, [pc, #308]	; (8005b1c <tcp_slowtmr+0x598>)
 80059e8:	484d      	ldr	r0, [pc, #308]	; (8005b20 <tcp_slowtmr+0x59c>)
 80059ea:	f007 f97f 	bl	800ccec <iprintf>
        prev->next = pcb->next;
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	60da      	str	r2, [r3, #12]
 80059f6:	e00f      	b.n	8005a18 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80059f8:	4b46      	ldr	r3, [pc, #280]	; (8005b14 <tcp_slowtmr+0x590>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d006      	beq.n	8005a10 <tcp_slowtmr+0x48c>
 8005a02:	4b45      	ldr	r3, [pc, #276]	; (8005b18 <tcp_slowtmr+0x594>)
 8005a04:	f240 5271 	movw	r2, #1393	; 0x571
 8005a08:	4946      	ldr	r1, [pc, #280]	; (8005b24 <tcp_slowtmr+0x5a0>)
 8005a0a:	4845      	ldr	r0, [pc, #276]	; (8005b20 <tcp_slowtmr+0x59c>)
 8005a0c:	f007 f96e 	bl	800ccec <iprintf>
        tcp_active_pcbs = pcb->next;
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4a3f      	ldr	r2, [pc, #252]	; (8005b14 <tcp_slowtmr+0x590>)
 8005a16:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005a18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d013      	beq.n	8005a48 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005a28:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a30:	8ad2      	ldrh	r2, [r2, #22]
 8005a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a34:	8b09      	ldrh	r1, [r1, #24]
 8005a36:	9102      	str	r1, [sp, #8]
 8005a38:	9201      	str	r2, [sp, #4]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	462b      	mov	r3, r5
 8005a3e:	4622      	mov	r2, r4
 8005a40:	4601      	mov	r1, r0
 8005a42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a44:	f004 f98e 	bl	8009d64 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	7d1b      	ldrb	r3, [r3, #20]
 8005a52:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005a5e:	6838      	ldr	r0, [r7, #0]
 8005a60:	f7ff f9fa 	bl	8004e58 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8005a64:	4b30      	ldr	r3, [pc, #192]	; (8005b28 <tcp_slowtmr+0x5a4>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <tcp_slowtmr+0x4f6>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f06f 010c 	mvn.w	r1, #12
 8005a76:	68b8      	ldr	r0, [r7, #8]
 8005a78:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005a7a:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <tcp_slowtmr+0x5a4>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d037      	beq.n	8005af2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8005a82:	e590      	b.n	80055a6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	7f1b      	ldrb	r3, [r3, #28]
 8005a92:	3301      	adds	r3, #1
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	7f1a      	ldrb	r2, [r3, #28]
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	7f5b      	ldrb	r3, [r3, #29]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d325      	bcc.n	8005af2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005aac:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <tcp_slowtmr+0x5a4>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00b      	beq.n	8005ad4 <tcp_slowtmr+0x550>
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac4:	6912      	ldr	r2, [r2, #16]
 8005ac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ac8:	4610      	mov	r0, r2
 8005aca:	4798      	blx	r3
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005ad2:	e002      	b.n	8005ada <tcp_slowtmr+0x556>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8005ada:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <tcp_slowtmr+0x5a4>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d000      	beq.n	8005ae4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8005ae2:	e560      	b.n	80055a6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005ae4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8005aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aee:	f003 fb75 	bl	80091dc <tcp_output>
  while (pcb != NULL) {
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f47f ad5c 	bne.w	80055b2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8005afe:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <tcp_slowtmr+0x5a8>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8005b04:	e067      	b.n	8005bd6 <tcp_slowtmr+0x652>
 8005b06:	bf00      	nop
 8005b08:	20006890 	.word	0x20006890
 8005b0c:	10624dd3 	.word	0x10624dd3
 8005b10:	000124f8 	.word	0x000124f8
 8005b14:	2000688c 	.word	0x2000688c
 8005b18:	0800e610 	.word	0x0800e610
 8005b1c:	0800ea48 	.word	0x0800ea48
 8005b20:	0800e654 	.word	0x0800e654
 8005b24:	0800ea74 	.word	0x0800ea74
 8005b28:	20006888 	.word	0x20006888
 8005b2c:	2000689c 	.word	0x2000689c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	7d1b      	ldrb	r3, [r3, #20]
 8005b34:	2b0a      	cmp	r3, #10
 8005b36:	d006      	beq.n	8005b46 <tcp_slowtmr+0x5c2>
 8005b38:	4b2a      	ldr	r3, [pc, #168]	; (8005be4 <tcp_slowtmr+0x660>)
 8005b3a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8005b3e:	492a      	ldr	r1, [pc, #168]	; (8005be8 <tcp_slowtmr+0x664>)
 8005b40:	482a      	ldr	r0, [pc, #168]	; (8005bec <tcp_slowtmr+0x668>)
 8005b42:	f007 f8d3 	bl	800ccec <iprintf>
    pcb_remove = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005b4c:	4b28      	ldr	r3, [pc, #160]	; (8005bf0 <tcp_slowtmr+0x66c>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2bf0      	cmp	r3, #240	; 0xf0
 8005b58:	d904      	bls.n	8005b64 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8005b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b5e:	3301      	adds	r3, #1
 8005b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d02f      	beq.n	8005bcc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b6e:	f000 fb27 	bl	80061c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d010      	beq.n	8005b9a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005b78:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <tcp_slowtmr+0x670>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d106      	bne.n	8005b90 <tcp_slowtmr+0x60c>
 8005b82:	4b18      	ldr	r3, [pc, #96]	; (8005be4 <tcp_slowtmr+0x660>)
 8005b84:	f240 52af 	movw	r2, #1455	; 0x5af
 8005b88:	491b      	ldr	r1, [pc, #108]	; (8005bf8 <tcp_slowtmr+0x674>)
 8005b8a:	4818      	ldr	r0, [pc, #96]	; (8005bec <tcp_slowtmr+0x668>)
 8005b8c:	f007 f8ae 	bl	800ccec <iprintf>
        prev->next = pcb->next;
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	60da      	str	r2, [r3, #12]
 8005b98:	e00f      	b.n	8005bba <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005b9a:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <tcp_slowtmr+0x670>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d006      	beq.n	8005bb2 <tcp_slowtmr+0x62e>
 8005ba4:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <tcp_slowtmr+0x660>)
 8005ba6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8005baa:	4914      	ldr	r1, [pc, #80]	; (8005bfc <tcp_slowtmr+0x678>)
 8005bac:	480f      	ldr	r0, [pc, #60]	; (8005bec <tcp_slowtmr+0x668>)
 8005bae:	f007 f89d 	bl	800ccec <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	4a0f      	ldr	r2, [pc, #60]	; (8005bf4 <tcp_slowtmr+0x670>)
 8005bb8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005bc4:	69f8      	ldr	r0, [r7, #28]
 8005bc6:	f7ff f947 	bl	8004e58 <tcp_free>
 8005bca:	e004      	b.n	8005bd6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1a9      	bne.n	8005b30 <tcp_slowtmr+0x5ac>
    }
  }
}
 8005bdc:	bf00      	nop
 8005bde:	3730      	adds	r7, #48	; 0x30
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bdb0      	pop	{r4, r5, r7, pc}
 8005be4:	0800e610 	.word	0x0800e610
 8005be8:	0800eaa0 	.word	0x0800eaa0
 8005bec:	0800e654 	.word	0x0800e654
 8005bf0:	20006890 	.word	0x20006890
 8005bf4:	2000689c 	.word	0x2000689c
 8005bf8:	0800ead0 	.word	0x0800ead0
 8005bfc:	0800eaf8 	.word	0x0800eaf8

08005c00 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8005c06:	4b2d      	ldr	r3, [pc, #180]	; (8005cbc <tcp_fasttmr+0xbc>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4b2b      	ldr	r3, [pc, #172]	; (8005cbc <tcp_fasttmr+0xbc>)
 8005c10:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8005c12:	4b2b      	ldr	r3, [pc, #172]	; (8005cc0 <tcp_fasttmr+0xc0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005c18:	e048      	b.n	8005cac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	7f9a      	ldrb	r2, [r3, #30]
 8005c1e:	4b27      	ldr	r3, [pc, #156]	; (8005cbc <tcp_fasttmr+0xbc>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d03f      	beq.n	8005ca6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8005c26:	4b25      	ldr	r3, [pc, #148]	; (8005cbc <tcp_fasttmr+0xbc>)
 8005c28:	781a      	ldrb	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8b5b      	ldrh	r3, [r3, #26]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d010      	beq.n	8005c5c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8b5b      	ldrh	r3, [r3, #26]
 8005c3e:	f043 0302 	orr.w	r3, r3, #2
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f003 fac7 	bl	80091dc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	8b5b      	ldrh	r3, [r3, #26]
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8b5b      	ldrh	r3, [r3, #26]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d009      	beq.n	8005c7c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8b5b      	ldrh	r3, [r3, #26]
 8005c6c:	f023 0308 	bic.w	r3, r3, #8
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff fa7e 	bl	8005178 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8005c8a:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <tcp_fasttmr+0xc4>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f819 	bl	8005cc8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <tcp_fasttmr+0xc4>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d000      	beq.n	8005ca0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8005c9e:	e7b8      	b.n	8005c12 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	607b      	str	r3, [r7, #4]
 8005ca4:	e002      	b.n	8005cac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1b3      	bne.n	8005c1a <tcp_fasttmr+0x1a>
    }
  }
}
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	200000ca 	.word	0x200000ca
 8005cc0:	2000688c 	.word	0x2000688c
 8005cc4:	20006888 	.word	0x20006888

08005cc8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <tcp_process_refused_data+0x22>
 8005cd6:	4b37      	ldr	r3, [pc, #220]	; (8005db4 <tcp_process_refused_data+0xec>)
 8005cd8:	f240 6209 	movw	r2, #1545	; 0x609
 8005cdc:	4936      	ldr	r1, [pc, #216]	; (8005db8 <tcp_process_refused_data+0xf0>)
 8005cde:	4837      	ldr	r0, [pc, #220]	; (8005dbc <tcp_process_refused_data+0xf4>)
 8005ce0:	f007 f804 	bl	800ccec <iprintf>
 8005ce4:	f06f 030f 	mvn.w	r3, #15
 8005ce8:	e060      	b.n	8005dac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cee:	7b5b      	ldrb	r3, [r3, #13]
 8005cf0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <tcp_process_refused_data+0x58>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6918      	ldr	r0, [r3, #16]
 8005d12:	2300      	movs	r3, #0
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	47a0      	blx	r4
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
 8005d1e:	e007      	b.n	8005d30 <tcp_process_refused_data+0x68>
 8005d20:	2300      	movs	r3, #0
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	6879      	ldr	r1, [r7, #4]
 8005d26:	2000      	movs	r0, #0
 8005d28:	f000 f8a2 	bl	8005e70 <tcp_recv_null>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d12a      	bne.n	8005d8e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8005d38:	7bbb      	ldrb	r3, [r7, #14]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d033      	beq.n	8005daa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005d4a:	d005      	beq.n	8005d58 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d50:	3301      	adds	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <tcp_process_refused_data+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6918      	ldr	r0, [r3, #16]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2200      	movs	r2, #0
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	47a0      	blx	r4
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]
 8005d78:	e001      	b.n	8005d7e <tcp_process_refused_data+0xb6>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8005d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d82:	f113 0f0d 	cmn.w	r3, #13
 8005d86:	d110      	bne.n	8005daa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8005d88:	f06f 030c 	mvn.w	r3, #12
 8005d8c:	e00e      	b.n	8005dac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8005d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d92:	f113 0f0d 	cmn.w	r3, #13
 8005d96:	d102      	bne.n	8005d9e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8005d98:	f06f 030c 	mvn.w	r3, #12
 8005d9c:	e006      	b.n	8005dac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8005da4:	f06f 0304 	mvn.w	r3, #4
 8005da8:	e000      	b.n	8005dac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd90      	pop	{r4, r7, pc}
 8005db4:	0800e610 	.word	0x0800e610
 8005db8:	0800eb20 	.word	0x0800eb20
 8005dbc:	0800e654 	.word	0x0800e654

08005dc0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8005dc8:	e007      	b.n	8005dda <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f809 	bl	8005de8 <tcp_seg_free>
    seg = next;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f4      	bne.n	8005dca <tcp_segs_free+0xa>
  }
}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00c      	beq.n	8005e10 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe fd88 	bl	8004918 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	2003      	movs	r0, #3
 8005e0c:	f7fd ff76 	bl	8003cfc <memp_free>
  }
}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <tcp_seg_copy+0x1c>
 8005e26:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <tcp_seg_copy+0x4c>)
 8005e28:	f240 6282 	movw	r2, #1666	; 0x682
 8005e2c:	490e      	ldr	r1, [pc, #56]	; (8005e68 <tcp_seg_copy+0x50>)
 8005e2e:	480f      	ldr	r0, [pc, #60]	; (8005e6c <tcp_seg_copy+0x54>)
 8005e30:	f006 ff5c 	bl	800ccec <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005e34:	2003      	movs	r0, #3
 8005e36:	f7fd ff15 	bl	8003c64 <memp_malloc>
 8005e3a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <tcp_seg_copy+0x2e>
    return NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	e00a      	b.n	8005e5c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005e46:	2210      	movs	r2, #16
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f006 ff3b 	bl	800ccc6 <memcpy>
  pbuf_ref(cseg->p);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe fdff 	bl	8004a58 <pbuf_ref>
  return cseg;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	0800e610 	.word	0x0800e610
 8005e68:	0800eb64 	.word	0x0800eb64
 8005e6c:	0800e654 	.word	0x0800e654

08005e70 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d109      	bne.n	8005e98 <tcp_recv_null+0x28>
 8005e84:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <tcp_recv_null+0x60>)
 8005e86:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8005e8a:	4912      	ldr	r1, [pc, #72]	; (8005ed4 <tcp_recv_null+0x64>)
 8005e8c:	4812      	ldr	r0, [pc, #72]	; (8005ed8 <tcp_recv_null+0x68>)
 8005e8e:	f006 ff2d 	bl	800ccec <iprintf>
 8005e92:	f06f 030f 	mvn.w	r3, #15
 8005e96:	e016      	b.n	8005ec6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	891b      	ldrh	r3, [r3, #8]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	68b8      	ldr	r0, [r7, #8]
 8005ea6:	f7ff fb1d 	bl	80054e4 <tcp_recved>
    pbuf_free(p);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fe fd34 	bl	8004918 <pbuf_free>
 8005eb0:	e008      	b.n	8005ec4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8005eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d104      	bne.n	8005ec4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8005eba:	68b8      	ldr	r0, [r7, #8]
 8005ebc:	f7ff f9c2 	bl	8005244 <tcp_close>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	e000      	b.n	8005ec6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	0800e610 	.word	0x0800e610
 8005ed4:	0800eb80 	.word	0x0800eb80
 8005ed8:	0800e654 	.word	0x0800e654

08005edc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8005ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	db01      	blt.n	8005ef2 <tcp_kill_prio+0x16>
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	e000      	b.n	8005ef4 <tcp_kill_prio+0x18>
 8005ef2:	237f      	movs	r3, #127	; 0x7f
 8005ef4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8005ef6:	7afb      	ldrb	r3, [r7, #11]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d034      	beq.n	8005f66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8005efc:	7afb      	ldrb	r3, [r7, #11]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005f0a:	4b19      	ldr	r3, [pc, #100]	; (8005f70 <tcp_kill_prio+0x94>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	e01f      	b.n	8005f52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	7d5b      	ldrb	r3, [r3, #21]
 8005f16:	7afa      	ldrb	r2, [r7, #11]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d80c      	bhi.n	8005f36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8005f20:	7afa      	ldrb	r2, [r7, #11]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d112      	bne.n	8005f4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8005f26:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <tcp_kill_prio+0x98>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d80a      	bhi.n	8005f4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8005f36:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <tcp_kill_prio+0x98>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	7d5b      	ldrb	r3, [r3, #21]
 8005f4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1dc      	bne.n	8005f12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d004      	beq.n	8005f68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005f5e:	6938      	ldr	r0, [r7, #16]
 8005f60:	f7ff fa5a 	bl	8005418 <tcp_abort>
 8005f64:	e000      	b.n	8005f68 <tcp_kill_prio+0x8c>
    return;
 8005f66:	bf00      	nop
  }
}
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	2000688c 	.word	0x2000688c
 8005f74:	20006890 	.word	0x20006890

08005f78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d009      	beq.n	8005f9c <tcp_kill_state+0x24>
 8005f88:	79fb      	ldrb	r3, [r7, #7]
 8005f8a:	2b09      	cmp	r3, #9
 8005f8c:	d006      	beq.n	8005f9c <tcp_kill_state+0x24>
 8005f8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ff8 <tcp_kill_state+0x80>)
 8005f90:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8005f94:	4919      	ldr	r1, [pc, #100]	; (8005ffc <tcp_kill_state+0x84>)
 8005f96:	481a      	ldr	r0, [pc, #104]	; (8006000 <tcp_kill_state+0x88>)
 8005f98:	f006 fea8 	bl	800ccec <iprintf>

  inactivity = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fa4:	4b17      	ldr	r3, [pc, #92]	; (8006004 <tcp_kill_state+0x8c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	e017      	b.n	8005fdc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	7d1b      	ldrb	r3, [r3, #20]
 8005fb0:	79fa      	ldrb	r2, [r7, #7]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d10f      	bne.n	8005fd6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005fb6:	4b14      	ldr	r3, [pc, #80]	; (8006008 <tcp_kill_state+0x90>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d807      	bhi.n	8005fd6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8005fc6:	4b10      	ldr	r3, [pc, #64]	; (8006008 <tcp_kill_state+0x90>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e4      	bne.n	8005fac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8005fe8:	2100      	movs	r1, #0
 8005fea:	6938      	ldr	r0, [r7, #16]
 8005fec:	f7ff f956 	bl	800529c <tcp_abandon>
  }
}
 8005ff0:	bf00      	nop
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	0800e610 	.word	0x0800e610
 8005ffc:	0800eb9c 	.word	0x0800eb9c
 8006000:	0800e654 	.word	0x0800e654
 8006004:	2000688c 	.word	0x2000688c
 8006008:	20006890 	.word	0x20006890

0800600c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800601a:	4b12      	ldr	r3, [pc, #72]	; (8006064 <tcp_kill_timewait+0x58>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	e012      	b.n	8006048 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006022:	4b11      	ldr	r3, [pc, #68]	; (8006068 <tcp_kill_timewait+0x5c>)
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	429a      	cmp	r2, r3
 8006030:	d807      	bhi.n	8006042 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006032:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <tcp_kill_timewait+0x5c>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e9      	bne.n	8006022 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006054:	68b8      	ldr	r0, [r7, #8]
 8006056:	f7ff f9df 	bl	8005418 <tcp_abort>
  }
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	2000689c 	.word	0x2000689c
 8006068:	20006890 	.word	0x20006890

0800606c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <tcp_handle_closepend+0x48>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006078:	e014      	b.n	80060a4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8b5b      	ldrh	r3, [r3, #26]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	8b5b      	ldrh	r3, [r3, #26]
 8006090:	f023 0308 	bic.w	r3, r3, #8
 8006094:	b29a      	uxth	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff f86c 	bl	8005178 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e7      	bne.n	800607a <tcp_handle_closepend+0xe>
  }
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	2000688c 	.word	0x2000688c

080060b8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80060c2:	2001      	movs	r0, #1
 80060c4:	f7fd fdce 	bl	8003c64 <memp_malloc>
 80060c8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d126      	bne.n	800611e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80060d0:	f7ff ffcc 	bl	800606c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80060d4:	f7ff ff9a 	bl	800600c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80060d8:	2001      	movs	r0, #1
 80060da:	f7fd fdc3 	bl	8003c64 <memp_malloc>
 80060de:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d11b      	bne.n	800611e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80060e6:	2009      	movs	r0, #9
 80060e8:	f7ff ff46 	bl	8005f78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80060ec:	2001      	movs	r0, #1
 80060ee:	f7fd fdb9 	bl	8003c64 <memp_malloc>
 80060f2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d111      	bne.n	800611e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80060fa:	2008      	movs	r0, #8
 80060fc:	f7ff ff3c 	bl	8005f78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006100:	2001      	movs	r0, #1
 8006102:	f7fd fdaf 	bl	8003c64 <memp_malloc>
 8006106:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d107      	bne.n	800611e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fee3 	bl	8005edc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006116:	2001      	movs	r0, #1
 8006118:	f7fd fda4 	bl	8003c64 <memp_malloc>
 800611c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d03f      	beq.n	80061a4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006124:	229c      	movs	r2, #156	; 0x9c
 8006126:	2100      	movs	r1, #0
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f006 fdd7 	bl	800ccdc <memset>
    pcb->prio = prio;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	79fa      	ldrb	r2, [r7, #7]
 8006132:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800613a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006144:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	22ff      	movs	r2, #255	; 0xff
 8006152:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f44f 7206 	mov.w	r2, #536	; 0x218
 800615a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2206      	movs	r2, #6
 8006160:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2206      	movs	r2, #6
 8006168:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006170:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800617a:	4b0d      	ldr	r3, [pc, #52]	; (80061b0 <tcp_alloc+0xf8>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006182:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <tcp_alloc+0xfc>)
 8006184:	781a      	ldrb	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006190:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4a08      	ldr	r2, [pc, #32]	; (80061b8 <tcp_alloc+0x100>)
 8006198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4a07      	ldr	r2, [pc, #28]	; (80061bc <tcp_alloc+0x104>)
 80061a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80061a4:	68fb      	ldr	r3, [r7, #12]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20006890 	.word	0x20006890
 80061b4:	200000ca 	.word	0x200000ca
 80061b8:	08005e71 	.word	0x08005e71
 80061bc:	006ddd00 	.word	0x006ddd00

080061c0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d107      	bne.n	80061de <tcp_pcb_purge+0x1e>
 80061ce:	4b21      	ldr	r3, [pc, #132]	; (8006254 <tcp_pcb_purge+0x94>)
 80061d0:	f640 0251 	movw	r2, #2129	; 0x851
 80061d4:	4920      	ldr	r1, [pc, #128]	; (8006258 <tcp_pcb_purge+0x98>)
 80061d6:	4821      	ldr	r0, [pc, #132]	; (800625c <tcp_pcb_purge+0x9c>)
 80061d8:	f006 fd88 	bl	800ccec <iprintf>
 80061dc:	e037      	b.n	800624e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	7d1b      	ldrb	r3, [r3, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d033      	beq.n	800624e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80061ea:	2b0a      	cmp	r3, #10
 80061ec:	d02f      	beq.n	800624e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d02b      	beq.n	800624e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fb88 	bl	8004918 <pbuf_free>
      pcb->refused_data = NULL;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f986 	bl	8006528 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006222:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fdc9 	bl	8005dc0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fdc4 	bl	8005dc0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	66da      	str	r2, [r3, #108]	; 0x6c
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	0800e610 	.word	0x0800e610
 8006258:	0800ec5c 	.word	0x0800ec5c
 800625c:	0800e654 	.word	0x0800e654

08006260 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <tcp_pcb_remove+0x1e>
 8006270:	4b3e      	ldr	r3, [pc, #248]	; (800636c <tcp_pcb_remove+0x10c>)
 8006272:	f640 0283 	movw	r2, #2179	; 0x883
 8006276:	493e      	ldr	r1, [pc, #248]	; (8006370 <tcp_pcb_remove+0x110>)
 8006278:	483e      	ldr	r0, [pc, #248]	; (8006374 <tcp_pcb_remove+0x114>)
 800627a:	f006 fd37 	bl	800ccec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <tcp_pcb_remove+0x32>
 8006284:	4b39      	ldr	r3, [pc, #228]	; (800636c <tcp_pcb_remove+0x10c>)
 8006286:	f640 0284 	movw	r2, #2180	; 0x884
 800628a:	493b      	ldr	r1, [pc, #236]	; (8006378 <tcp_pcb_remove+0x118>)
 800628c:	4839      	ldr	r0, [pc, #228]	; (8006374 <tcp_pcb_remove+0x114>)
 800628e:	f006 fd2d 	bl	800ccec <iprintf>

  TCP_RMV(pcblist, pcb);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d105      	bne.n	80062a8 <tcp_pcb_remove+0x48>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	e013      	b.n	80062d0 <tcp_pcb_remove+0x70>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	e00c      	b.n	80062ca <tcp_pcb_remove+0x6a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d104      	bne.n	80062c4 <tcp_pcb_remove+0x64>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	60da      	str	r2, [r3, #12]
 80062c2:	e005      	b.n	80062d0 <tcp_pcb_remove+0x70>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1ef      	bne.n	80062b0 <tcp_pcb_remove+0x50>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2200      	movs	r2, #0
 80062d4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80062d6:	6838      	ldr	r0, [r7, #0]
 80062d8:	f7ff ff72 	bl	80061c0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	7d1b      	ldrb	r3, [r3, #20]
 80062e0:	2b0a      	cmp	r3, #10
 80062e2:	d013      	beq.n	800630c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d00f      	beq.n	800630c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	8b5b      	ldrh	r3, [r3, #26]
 80062f0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d009      	beq.n	800630c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	8b5b      	ldrh	r3, [r3, #26]
 80062fc:	f043 0302 	orr.w	r3, r3, #2
 8006300:	b29a      	uxth	r2, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006306:	6838      	ldr	r0, [r7, #0]
 8006308:	f002 ff68 	bl	80091dc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	7d1b      	ldrb	r3, [r3, #20]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d020      	beq.n	8006356 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006318:	2b00      	cmp	r3, #0
 800631a:	d006      	beq.n	800632a <tcp_pcb_remove+0xca>
 800631c:	4b13      	ldr	r3, [pc, #76]	; (800636c <tcp_pcb_remove+0x10c>)
 800631e:	f640 0293 	movw	r2, #2195	; 0x893
 8006322:	4916      	ldr	r1, [pc, #88]	; (800637c <tcp_pcb_remove+0x11c>)
 8006324:	4813      	ldr	r0, [pc, #76]	; (8006374 <tcp_pcb_remove+0x114>)
 8006326:	f006 fce1 	bl	800ccec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632e:	2b00      	cmp	r3, #0
 8006330:	d006      	beq.n	8006340 <tcp_pcb_remove+0xe0>
 8006332:	4b0e      	ldr	r3, [pc, #56]	; (800636c <tcp_pcb_remove+0x10c>)
 8006334:	f640 0294 	movw	r2, #2196	; 0x894
 8006338:	4911      	ldr	r1, [pc, #68]	; (8006380 <tcp_pcb_remove+0x120>)
 800633a:	480e      	ldr	r0, [pc, #56]	; (8006374 <tcp_pcb_remove+0x114>)
 800633c:	f006 fcd6 	bl	800ccec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006344:	2b00      	cmp	r3, #0
 8006346:	d006      	beq.n	8006356 <tcp_pcb_remove+0xf6>
 8006348:	4b08      	ldr	r3, [pc, #32]	; (800636c <tcp_pcb_remove+0x10c>)
 800634a:	f640 0296 	movw	r2, #2198	; 0x896
 800634e:	490d      	ldr	r1, [pc, #52]	; (8006384 <tcp_pcb_remove+0x124>)
 8006350:	4808      	ldr	r0, [pc, #32]	; (8006374 <tcp_pcb_remove+0x114>)
 8006352:	f006 fccb 	bl	800ccec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2200      	movs	r2, #0
 800635a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2200      	movs	r2, #0
 8006360:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	0800e610 	.word	0x0800e610
 8006370:	0800ec78 	.word	0x0800ec78
 8006374:	0800e654 	.word	0x0800e654
 8006378:	0800ec94 	.word	0x0800ec94
 800637c:	0800ecb4 	.word	0x0800ecb4
 8006380:	0800eccc 	.word	0x0800eccc
 8006384:	0800ece8 	.word	0x0800ece8

08006388 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <tcp_next_iss+0x1c>
 8006396:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <tcp_next_iss+0x38>)
 8006398:	f640 02af 	movw	r2, #2223	; 0x8af
 800639c:	4909      	ldr	r1, [pc, #36]	; (80063c4 <tcp_next_iss+0x3c>)
 800639e:	480a      	ldr	r0, [pc, #40]	; (80063c8 <tcp_next_iss+0x40>)
 80063a0:	f006 fca4 	bl	800ccec <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80063a4:	4b09      	ldr	r3, [pc, #36]	; (80063cc <tcp_next_iss+0x44>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <tcp_next_iss+0x48>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4413      	add	r3, r2
 80063ae:	4a07      	ldr	r2, [pc, #28]	; (80063cc <tcp_next_iss+0x44>)
 80063b0:	6013      	str	r3, [r2, #0]
  return iss;
 80063b2:	4b06      	ldr	r3, [pc, #24]	; (80063cc <tcp_next_iss+0x44>)
 80063b4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	0800e610 	.word	0x0800e610
 80063c4:	0800ed00 	.word	0x0800ed00
 80063c8:	0800e654 	.word	0x0800e654
 80063cc:	2000000c 	.word	0x2000000c
 80063d0:	20006890 	.word	0x20006890

080063d4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d106      	bne.n	80063f6 <tcp_eff_send_mss_netif+0x22>
 80063e8:	4b14      	ldr	r3, [pc, #80]	; (800643c <tcp_eff_send_mss_netif+0x68>)
 80063ea:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80063ee:	4914      	ldr	r1, [pc, #80]	; (8006440 <tcp_eff_send_mss_netif+0x6c>)
 80063f0:	4814      	ldr	r0, [pc, #80]	; (8006444 <tcp_eff_send_mss_netif+0x70>)
 80063f2:	f006 fc7b 	bl	800ccec <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80063fc:	89fb      	ldrh	r3, [r7, #14]
 80063fe:	e019      	b.n	8006434 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006404:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006406:	8afb      	ldrh	r3, [r7, #22]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d012      	beq.n	8006432 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800640c:	2328      	movs	r3, #40	; 0x28
 800640e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006410:	8afa      	ldrh	r2, [r7, #22]
 8006412:	8abb      	ldrh	r3, [r7, #20]
 8006414:	429a      	cmp	r2, r3
 8006416:	d904      	bls.n	8006422 <tcp_eff_send_mss_netif+0x4e>
 8006418:	8afa      	ldrh	r2, [r7, #22]
 800641a:	8abb      	ldrh	r3, [r7, #20]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	b29b      	uxth	r3, r3
 8006420:	e000      	b.n	8006424 <tcp_eff_send_mss_netif+0x50>
 8006422:	2300      	movs	r3, #0
 8006424:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006426:	8a7a      	ldrh	r2, [r7, #18]
 8006428:	89fb      	ldrh	r3, [r7, #14]
 800642a:	4293      	cmp	r3, r2
 800642c:	bf28      	it	cs
 800642e:	4613      	movcs	r3, r2
 8006430:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006432:	89fb      	ldrh	r3, [r7, #14]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	0800e610 	.word	0x0800e610
 8006440:	0800ed1c 	.word	0x0800ed1c
 8006444:	0800e654 	.word	0x0800e654

08006448 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d119      	bne.n	8006490 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800645c:	4b10      	ldr	r3, [pc, #64]	; (80064a0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800645e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006462:	4910      	ldr	r1, [pc, #64]	; (80064a4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006464:	4810      	ldr	r0, [pc, #64]	; (80064a8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006466:	f006 fc41 	bl	800ccec <iprintf>

  while (pcb != NULL) {
 800646a:	e011      	b.n	8006490 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d108      	bne.n	800648a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f7fe ffca 	bl	8005418 <tcp_abort>
      pcb = next;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	e002      	b.n	8006490 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1ea      	bne.n	800646c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	0800e610 	.word	0x0800e610
 80064a4:	0800ed44 	.word	0x0800ed44
 80064a8:	0800e654 	.word	0x0800e654

080064ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d02a      	beq.n	8006512 <tcp_netif_ip_addr_changed+0x66>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d026      	beq.n	8006512 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80064c4:	4b15      	ldr	r3, [pc, #84]	; (800651c <tcp_netif_ip_addr_changed+0x70>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff ffbc 	bl	8006448 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80064d0:	4b13      	ldr	r3, [pc, #76]	; (8006520 <tcp_netif_ip_addr_changed+0x74>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff ffb6 	bl	8006448 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d017      	beq.n	8006512 <tcp_netif_ip_addr_changed+0x66>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d013      	beq.n	8006512 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80064ea:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <tcp_netif_ip_addr_changed+0x78>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	e00c      	b.n	800650c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d103      	bne.n	8006506 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1ef      	bne.n	80064f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006512:	bf00      	nop
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	2000688c 	.word	0x2000688c
 8006520:	20006898 	.word	0x20006898
 8006524:	20006894 	.word	0x20006894

08006528 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006534:	2b00      	cmp	r3, #0
 8006536:	d007      	beq.n	8006548 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff fc3f 	bl	8005dc0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006548:	bf00      	nop
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006550:	b590      	push	{r4, r7, lr}
 8006552:	b08d      	sub	sp, #52	; 0x34
 8006554:	af04      	add	r7, sp, #16
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <tcp_input+0x1c>
 8006560:	4b9b      	ldr	r3, [pc, #620]	; (80067d0 <tcp_input+0x280>)
 8006562:	2283      	movs	r2, #131	; 0x83
 8006564:	499b      	ldr	r1, [pc, #620]	; (80067d4 <tcp_input+0x284>)
 8006566:	489c      	ldr	r0, [pc, #624]	; (80067d8 <tcp_input+0x288>)
 8006568:	f006 fbc0 	bl	800ccec <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4a9a      	ldr	r2, [pc, #616]	; (80067dc <tcp_input+0x28c>)
 8006572:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	895b      	ldrh	r3, [r3, #10]
 8006578:	2b13      	cmp	r3, #19
 800657a:	f240 83c4 	bls.w	8006d06 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800657e:	4b98      	ldr	r3, [pc, #608]	; (80067e0 <tcp_input+0x290>)
 8006580:	695a      	ldr	r2, [r3, #20]
 8006582:	4b97      	ldr	r3, [pc, #604]	; (80067e0 <tcp_input+0x290>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4619      	mov	r1, r3
 8006588:	4610      	mov	r0, r2
 800658a:	f005 fc1d 	bl	800bdc8 <ip4_addr_isbroadcast_u32>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	f040 83ba 	bne.w	8006d0a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006596:	4b92      	ldr	r3, [pc, #584]	; (80067e0 <tcp_input+0x290>)
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800659e:	2be0      	cmp	r3, #224	; 0xe0
 80065a0:	f000 83b3 	beq.w	8006d0a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80065a4:	4b8d      	ldr	r3, [pc, #564]	; (80067dc <tcp_input+0x28c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	899b      	ldrh	r3, [r3, #12]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fc ff03 	bl	80033b8 <lwip_htons>
 80065b2:	4603      	mov	r3, r0
 80065b4:	0b1b      	lsrs	r3, r3, #12
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80065be:	7cbb      	ldrb	r3, [r7, #18]
 80065c0:	2b13      	cmp	r3, #19
 80065c2:	f240 83a2 	bls.w	8006d0a <tcp_input+0x7ba>
 80065c6:	7cbb      	ldrb	r3, [r7, #18]
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	891b      	ldrh	r3, [r3, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	f200 839b 	bhi.w	8006d0a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80065d4:	7cbb      	ldrb	r3, [r7, #18]
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	3b14      	subs	r3, #20
 80065da:	b29a      	uxth	r2, r3
 80065dc:	4b81      	ldr	r3, [pc, #516]	; (80067e4 <tcp_input+0x294>)
 80065de:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80065e0:	4b81      	ldr	r3, [pc, #516]	; (80067e8 <tcp_input+0x298>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	895a      	ldrh	r2, [r3, #10]
 80065ea:	7cbb      	ldrb	r3, [r7, #18]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d309      	bcc.n	8006606 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80065f2:	4b7c      	ldr	r3, [pc, #496]	; (80067e4 <tcp_input+0x294>)
 80065f4:	881a      	ldrh	r2, [r3, #0]
 80065f6:	4b7d      	ldr	r3, [pc, #500]	; (80067ec <tcp_input+0x29c>)
 80065f8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80065fa:	7cbb      	ldrb	r3, [r7, #18]
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7fe f904 	bl	800480c <pbuf_remove_header>
 8006604:	e04e      	b.n	80066a4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d105      	bne.n	800661a <tcp_input+0xca>
 800660e:	4b70      	ldr	r3, [pc, #448]	; (80067d0 <tcp_input+0x280>)
 8006610:	22c2      	movs	r2, #194	; 0xc2
 8006612:	4977      	ldr	r1, [pc, #476]	; (80067f0 <tcp_input+0x2a0>)
 8006614:	4870      	ldr	r0, [pc, #448]	; (80067d8 <tcp_input+0x288>)
 8006616:	f006 fb69 	bl	800ccec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800661a:	2114      	movs	r1, #20
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fe f8f5 	bl	800480c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	895a      	ldrh	r2, [r3, #10]
 8006626:	4b71      	ldr	r3, [pc, #452]	; (80067ec <tcp_input+0x29c>)
 8006628:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800662a:	4b6e      	ldr	r3, [pc, #440]	; (80067e4 <tcp_input+0x294>)
 800662c:	881a      	ldrh	r2, [r3, #0]
 800662e:	4b6f      	ldr	r3, [pc, #444]	; (80067ec <tcp_input+0x29c>)
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006636:	4b6d      	ldr	r3, [pc, #436]	; (80067ec <tcp_input+0x29c>)
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7fe f8e5 	bl	800480c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	895b      	ldrh	r3, [r3, #10]
 8006648:	8a3a      	ldrh	r2, [r7, #16]
 800664a:	429a      	cmp	r2, r3
 800664c:	f200 835f 	bhi.w	8006d0e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	4a64      	ldr	r2, [pc, #400]	; (80067e8 <tcp_input+0x298>)
 8006658:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	8a3a      	ldrh	r2, [r7, #16]
 8006660:	4611      	mov	r1, r2
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe f8d2 	bl	800480c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	891a      	ldrh	r2, [r3, #8]
 800666c:	8a3b      	ldrh	r3, [r7, #16]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	b29a      	uxth	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	895b      	ldrh	r3, [r3, #10]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <tcp_input+0x13a>
 800667e:	4b54      	ldr	r3, [pc, #336]	; (80067d0 <tcp_input+0x280>)
 8006680:	22df      	movs	r2, #223	; 0xdf
 8006682:	495c      	ldr	r1, [pc, #368]	; (80067f4 <tcp_input+0x2a4>)
 8006684:	4854      	ldr	r0, [pc, #336]	; (80067d8 <tcp_input+0x288>)
 8006686:	f006 fb31 	bl	800ccec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	891a      	ldrh	r2, [r3, #8]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	891b      	ldrh	r3, [r3, #8]
 8006694:	429a      	cmp	r2, r3
 8006696:	d005      	beq.n	80066a4 <tcp_input+0x154>
 8006698:	4b4d      	ldr	r3, [pc, #308]	; (80067d0 <tcp_input+0x280>)
 800669a:	22e0      	movs	r2, #224	; 0xe0
 800669c:	4956      	ldr	r1, [pc, #344]	; (80067f8 <tcp_input+0x2a8>)
 800669e:	484e      	ldr	r0, [pc, #312]	; (80067d8 <tcp_input+0x288>)
 80066a0:	f006 fb24 	bl	800ccec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80066a4:	4b4d      	ldr	r3, [pc, #308]	; (80067dc <tcp_input+0x28c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	4b4b      	ldr	r3, [pc, #300]	; (80067dc <tcp_input+0x28c>)
 80066ae:	681c      	ldr	r4, [r3, #0]
 80066b0:	4610      	mov	r0, r2
 80066b2:	f7fc fe81 	bl	80033b8 <lwip_htons>
 80066b6:	4603      	mov	r3, r0
 80066b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80066ba:	4b48      	ldr	r3, [pc, #288]	; (80067dc <tcp_input+0x28c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	885b      	ldrh	r3, [r3, #2]
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	4b46      	ldr	r3, [pc, #280]	; (80067dc <tcp_input+0x28c>)
 80066c4:	681c      	ldr	r4, [r3, #0]
 80066c6:	4610      	mov	r0, r2
 80066c8:	f7fc fe76 	bl	80033b8 <lwip_htons>
 80066cc:	4603      	mov	r3, r0
 80066ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80066d0:	4b42      	ldr	r3, [pc, #264]	; (80067dc <tcp_input+0x28c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	4b41      	ldr	r3, [pc, #260]	; (80067dc <tcp_input+0x28c>)
 80066d8:	681c      	ldr	r4, [r3, #0]
 80066da:	4610      	mov	r0, r2
 80066dc:	f7fc fe81 	bl	80033e2 <lwip_htonl>
 80066e0:	4603      	mov	r3, r0
 80066e2:	6063      	str	r3, [r4, #4]
 80066e4:	6863      	ldr	r3, [r4, #4]
 80066e6:	4a45      	ldr	r2, [pc, #276]	; (80067fc <tcp_input+0x2ac>)
 80066e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80066ea:	4b3c      	ldr	r3, [pc, #240]	; (80067dc <tcp_input+0x28c>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	4b3a      	ldr	r3, [pc, #232]	; (80067dc <tcp_input+0x28c>)
 80066f2:	681c      	ldr	r4, [r3, #0]
 80066f4:	4610      	mov	r0, r2
 80066f6:	f7fc fe74 	bl	80033e2 <lwip_htonl>
 80066fa:	4603      	mov	r3, r0
 80066fc:	60a3      	str	r3, [r4, #8]
 80066fe:	68a3      	ldr	r3, [r4, #8]
 8006700:	4a3f      	ldr	r2, [pc, #252]	; (8006800 <tcp_input+0x2b0>)
 8006702:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006704:	4b35      	ldr	r3, [pc, #212]	; (80067dc <tcp_input+0x28c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	89db      	ldrh	r3, [r3, #14]
 800670a:	b29a      	uxth	r2, r3
 800670c:	4b33      	ldr	r3, [pc, #204]	; (80067dc <tcp_input+0x28c>)
 800670e:	681c      	ldr	r4, [r3, #0]
 8006710:	4610      	mov	r0, r2
 8006712:	f7fc fe51 	bl	80033b8 <lwip_htons>
 8006716:	4603      	mov	r3, r0
 8006718:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800671a:	4b30      	ldr	r3, [pc, #192]	; (80067dc <tcp_input+0x28c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	899b      	ldrh	r3, [r3, #12]
 8006720:	b29b      	uxth	r3, r3
 8006722:	4618      	mov	r0, r3
 8006724:	f7fc fe48 	bl	80033b8 <lwip_htons>
 8006728:	4603      	mov	r3, r0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006730:	b2da      	uxtb	r2, r3
 8006732:	4b34      	ldr	r3, [pc, #208]	; (8006804 <tcp_input+0x2b4>)
 8006734:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	891a      	ldrh	r2, [r3, #8]
 800673a:	4b33      	ldr	r3, [pc, #204]	; (8006808 <tcp_input+0x2b8>)
 800673c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800673e:	4b31      	ldr	r3, [pc, #196]	; (8006804 <tcp_input+0x2b4>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00c      	beq.n	8006764 <tcp_input+0x214>
    tcplen++;
 800674a:	4b2f      	ldr	r3, [pc, #188]	; (8006808 <tcp_input+0x2b8>)
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	3301      	adds	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	4b2d      	ldr	r3, [pc, #180]	; (8006808 <tcp_input+0x2b8>)
 8006754:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	891a      	ldrh	r2, [r3, #8]
 800675a:	4b2b      	ldr	r3, [pc, #172]	; (8006808 <tcp_input+0x2b8>)
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	f200 82d7 	bhi.w	8006d12 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006768:	4b28      	ldr	r3, [pc, #160]	; (800680c <tcp_input+0x2bc>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	61fb      	str	r3, [r7, #28]
 800676e:	e09d      	b.n	80068ac <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	7d1b      	ldrb	r3, [r3, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d105      	bne.n	8006784 <tcp_input+0x234>
 8006778:	4b15      	ldr	r3, [pc, #84]	; (80067d0 <tcp_input+0x280>)
 800677a:	22fb      	movs	r2, #251	; 0xfb
 800677c:	4924      	ldr	r1, [pc, #144]	; (8006810 <tcp_input+0x2c0>)
 800677e:	4816      	ldr	r0, [pc, #88]	; (80067d8 <tcp_input+0x288>)
 8006780:	f006 fab4 	bl	800ccec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	7d1b      	ldrb	r3, [r3, #20]
 8006788:	2b0a      	cmp	r3, #10
 800678a:	d105      	bne.n	8006798 <tcp_input+0x248>
 800678c:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <tcp_input+0x280>)
 800678e:	22fc      	movs	r2, #252	; 0xfc
 8006790:	4920      	ldr	r1, [pc, #128]	; (8006814 <tcp_input+0x2c4>)
 8006792:	4811      	ldr	r0, [pc, #68]	; (80067d8 <tcp_input+0x288>)
 8006794:	f006 faaa 	bl	800ccec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	7d1b      	ldrb	r3, [r3, #20]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d105      	bne.n	80067ac <tcp_input+0x25c>
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <tcp_input+0x280>)
 80067a2:	22fd      	movs	r2, #253	; 0xfd
 80067a4:	491c      	ldr	r1, [pc, #112]	; (8006818 <tcp_input+0x2c8>)
 80067a6:	480c      	ldr	r0, [pc, #48]	; (80067d8 <tcp_input+0x288>)
 80067a8:	f006 faa0 	bl	800ccec <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	7a1b      	ldrb	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d033      	beq.n	800681c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	7a1a      	ldrb	r2, [r3, #8]
 80067b8:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <tcp_input+0x290>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067c0:	3301      	adds	r3, #1
 80067c2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d029      	beq.n	800681c <tcp_input+0x2cc>
      prev = pcb;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	61bb      	str	r3, [r7, #24]
      continue;
 80067cc:	e06b      	b.n	80068a6 <tcp_input+0x356>
 80067ce:	bf00      	nop
 80067d0:	0800ed78 	.word	0x0800ed78
 80067d4:	0800edac 	.word	0x0800edac
 80067d8:	0800edc4 	.word	0x0800edc4
 80067dc:	200000dc 	.word	0x200000dc
 80067e0:	20003348 	.word	0x20003348
 80067e4:	200000e0 	.word	0x200000e0
 80067e8:	200000e4 	.word	0x200000e4
 80067ec:	200000e2 	.word	0x200000e2
 80067f0:	0800edec 	.word	0x0800edec
 80067f4:	0800edfc 	.word	0x0800edfc
 80067f8:	0800ee08 	.word	0x0800ee08
 80067fc:	200000ec 	.word	0x200000ec
 8006800:	200000f0 	.word	0x200000f0
 8006804:	200000f8 	.word	0x200000f8
 8006808:	200000f6 	.word	0x200000f6
 800680c:	2000688c 	.word	0x2000688c
 8006810:	0800ee28 	.word	0x0800ee28
 8006814:	0800ee50 	.word	0x0800ee50
 8006818:	0800ee7c 	.word	0x0800ee7c
    }

    if (pcb->remote_port == tcphdr->src &&
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	8b1a      	ldrh	r2, [r3, #24]
 8006820:	4b94      	ldr	r3, [pc, #592]	; (8006a74 <tcp_input+0x524>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	429a      	cmp	r2, r3
 800682a:	d13a      	bne.n	80068a2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	8ada      	ldrh	r2, [r3, #22]
 8006830:	4b90      	ldr	r3, [pc, #576]	; (8006a74 <tcp_input+0x524>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	885b      	ldrh	r3, [r3, #2]
 8006836:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006838:	429a      	cmp	r2, r3
 800683a:	d132      	bne.n	80068a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	4b8d      	ldr	r3, [pc, #564]	; (8006a78 <tcp_input+0x528>)
 8006842:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006844:	429a      	cmp	r2, r3
 8006846:	d12c      	bne.n	80068a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4b8a      	ldr	r3, [pc, #552]	; (8006a78 <tcp_input+0x528>)
 800684e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006850:	429a      	cmp	r2, r3
 8006852:	d126      	bne.n	80068a2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	429a      	cmp	r2, r3
 800685c:	d106      	bne.n	800686c <tcp_input+0x31c>
 800685e:	4b87      	ldr	r3, [pc, #540]	; (8006a7c <tcp_input+0x52c>)
 8006860:	f240 120d 	movw	r2, #269	; 0x10d
 8006864:	4986      	ldr	r1, [pc, #536]	; (8006a80 <tcp_input+0x530>)
 8006866:	4887      	ldr	r0, [pc, #540]	; (8006a84 <tcp_input+0x534>)
 8006868:	f006 fa40 	bl	800ccec <iprintf>
      if (prev != NULL) {
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <tcp_input+0x338>
        prev->next = pcb->next;
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800687a:	4b83      	ldr	r3, [pc, #524]	; (8006a88 <tcp_input+0x538>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006882:	4a81      	ldr	r2, [pc, #516]	; (8006a88 <tcp_input+0x538>)
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	429a      	cmp	r2, r3
 8006890:	d111      	bne.n	80068b6 <tcp_input+0x366>
 8006892:	4b7a      	ldr	r3, [pc, #488]	; (8006a7c <tcp_input+0x52c>)
 8006894:	f240 1215 	movw	r2, #277	; 0x115
 8006898:	497c      	ldr	r1, [pc, #496]	; (8006a8c <tcp_input+0x53c>)
 800689a:	487a      	ldr	r0, [pc, #488]	; (8006a84 <tcp_input+0x534>)
 800689c:	f006 fa26 	bl	800ccec <iprintf>
      break;
 80068a0:	e009      	b.n	80068b6 <tcp_input+0x366>
    }
    prev = pcb;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f47f af5e 	bne.w	8006770 <tcp_input+0x220>
 80068b4:	e000      	b.n	80068b8 <tcp_input+0x368>
      break;
 80068b6:	bf00      	nop
  }

  if (pcb == NULL) {
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 8095 	bne.w	80069ea <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80068c0:	4b73      	ldr	r3, [pc, #460]	; (8006a90 <tcp_input+0x540>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	e03f      	b.n	8006948 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	7d1b      	ldrb	r3, [r3, #20]
 80068cc:	2b0a      	cmp	r3, #10
 80068ce:	d006      	beq.n	80068de <tcp_input+0x38e>
 80068d0:	4b6a      	ldr	r3, [pc, #424]	; (8006a7c <tcp_input+0x52c>)
 80068d2:	f240 121f 	movw	r2, #287	; 0x11f
 80068d6:	496f      	ldr	r1, [pc, #444]	; (8006a94 <tcp_input+0x544>)
 80068d8:	486a      	ldr	r0, [pc, #424]	; (8006a84 <tcp_input+0x534>)
 80068da:	f006 fa07 	bl	800ccec <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	7a1b      	ldrb	r3, [r3, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	7a1a      	ldrb	r2, [r3, #8]
 80068ea:	4b63      	ldr	r3, [pc, #396]	; (8006a78 <tcp_input+0x528>)
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068f2:	3301      	adds	r3, #1
 80068f4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d122      	bne.n	8006940 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	8b1a      	ldrh	r2, [r3, #24]
 80068fe:	4b5d      	ldr	r3, [pc, #372]	; (8006a74 <tcp_input+0x524>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	429a      	cmp	r2, r3
 8006908:	d11b      	bne.n	8006942 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	8ada      	ldrh	r2, [r3, #22]
 800690e:	4b59      	ldr	r3, [pc, #356]	; (8006a74 <tcp_input+0x524>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	885b      	ldrh	r3, [r3, #2]
 8006914:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006916:	429a      	cmp	r2, r3
 8006918:	d113      	bne.n	8006942 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	4b56      	ldr	r3, [pc, #344]	; (8006a78 <tcp_input+0x528>)
 8006920:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006922:	429a      	cmp	r2, r3
 8006924:	d10d      	bne.n	8006942 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b53      	ldr	r3, [pc, #332]	; (8006a78 <tcp_input+0x528>)
 800692c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800692e:	429a      	cmp	r2, r3
 8006930:	d107      	bne.n	8006942 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006932:	69f8      	ldr	r0, [r7, #28]
 8006934:	f000 fb52 	bl	8006fdc <tcp_timewait_input>
        }
        pbuf_free(p);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7fd ffed 	bl	8004918 <pbuf_free>
        return;
 800693e:	e1ee      	b.n	8006d1e <tcp_input+0x7ce>
        continue;
 8006940:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1bc      	bne.n	80068c8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800694e:	2300      	movs	r3, #0
 8006950:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006952:	4b51      	ldr	r3, [pc, #324]	; (8006a98 <tcp_input+0x548>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e02a      	b.n	80069b0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	7a1b      	ldrb	r3, [r3, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00c      	beq.n	800697c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	7a1a      	ldrb	r2, [r3, #8]
 8006966:	4b44      	ldr	r3, [pc, #272]	; (8006a78 <tcp_input+0x528>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800696e:	3301      	adds	r3, #1
 8006970:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006972:	429a      	cmp	r2, r3
 8006974:	d002      	beq.n	800697c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	61bb      	str	r3, [r7, #24]
        continue;
 800697a:	e016      	b.n	80069aa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	8ada      	ldrh	r2, [r3, #22]
 8006980:	4b3c      	ldr	r3, [pc, #240]	; (8006a74 <tcp_input+0x524>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	885b      	ldrh	r3, [r3, #2]
 8006986:	b29b      	uxth	r3, r3
 8006988:	429a      	cmp	r2, r3
 800698a:	d10c      	bne.n	80069a6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	4b39      	ldr	r3, [pc, #228]	; (8006a78 <tcp_input+0x528>)
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	429a      	cmp	r2, r3
 8006996:	d00f      	beq.n	80069b8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00d      	beq.n	80069ba <tcp_input+0x46a>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	617b      	str	r3, [r7, #20]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1d1      	bne.n	800695a <tcp_input+0x40a>
 80069b6:	e000      	b.n	80069ba <tcp_input+0x46a>
            break;
 80069b8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d014      	beq.n	80069ea <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80069ce:	4b32      	ldr	r3, [pc, #200]	; (8006a98 <tcp_input+0x548>)
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80069d6:	4a30      	ldr	r2, [pc, #192]	; (8006a98 <tcp_input+0x548>)
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80069dc:	6978      	ldr	r0, [r7, #20]
 80069de:	f000 f9ff 	bl	8006de0 <tcp_listen_input>
      }
      pbuf_free(p);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fd ff98 	bl	8004918 <pbuf_free>
      return;
 80069e8:	e199      	b.n	8006d1e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 8160 	beq.w	8006cb2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80069f2:	4b2a      	ldr	r3, [pc, #168]	; (8006a9c <tcp_input+0x54c>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	891a      	ldrh	r2, [r3, #8]
 80069fc:	4b27      	ldr	r3, [pc, #156]	; (8006a9c <tcp_input+0x54c>)
 80069fe:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006a00:	4a26      	ldr	r2, [pc, #152]	; (8006a9c <tcp_input+0x54c>)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006a06:	4b1b      	ldr	r3, [pc, #108]	; (8006a74 <tcp_input+0x524>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a24      	ldr	r2, [pc, #144]	; (8006a9c <tcp_input+0x54c>)
 8006a0c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006a0e:	4b24      	ldr	r3, [pc, #144]	; (8006aa0 <tcp_input+0x550>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006a14:	4b23      	ldr	r3, [pc, #140]	; (8006aa4 <tcp_input+0x554>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006a1a:	4b23      	ldr	r3, [pc, #140]	; (8006aa8 <tcp_input+0x558>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006a20:	4b22      	ldr	r3, [pc, #136]	; (8006aac <tcp_input+0x55c>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d006      	beq.n	8006a3a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	7b5b      	ldrb	r3, [r3, #13]
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d038      	beq.n	8006ab4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006a42:	69f8      	ldr	r0, [r7, #28]
 8006a44:	f7ff f940 	bl	8005cc8 <tcp_process_refused_data>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f113 0f0d 	cmn.w	r3, #13
 8006a4e:	d007      	beq.n	8006a60 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d02d      	beq.n	8006ab4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006a58:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <tcp_input+0x560>)
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d029      	beq.n	8006ab4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f040 8104 	bne.w	8006c72 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006a6a:	69f8      	ldr	r0, [r7, #28]
 8006a6c:	f003 f9cc 	bl	8009e08 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006a70:	e0ff      	b.n	8006c72 <tcp_input+0x722>
 8006a72:	bf00      	nop
 8006a74:	200000dc 	.word	0x200000dc
 8006a78:	20003348 	.word	0x20003348
 8006a7c:	0800ed78 	.word	0x0800ed78
 8006a80:	0800eea4 	.word	0x0800eea4
 8006a84:	0800edc4 	.word	0x0800edc4
 8006a88:	2000688c 	.word	0x2000688c
 8006a8c:	0800eed0 	.word	0x0800eed0
 8006a90:	2000689c 	.word	0x2000689c
 8006a94:	0800eefc 	.word	0x0800eefc
 8006a98:	20006894 	.word	0x20006894
 8006a9c:	200000cc 	.word	0x200000cc
 8006aa0:	200000fc 	.word	0x200000fc
 8006aa4:	200000f9 	.word	0x200000f9
 8006aa8:	200000f4 	.word	0x200000f4
 8006aac:	200000f8 	.word	0x200000f8
 8006ab0:	200000f6 	.word	0x200000f6
      }
    }
    tcp_input_pcb = pcb;
 8006ab4:	4a9b      	ldr	r2, [pc, #620]	; (8006d24 <tcp_input+0x7d4>)
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8006aba:	69f8      	ldr	r0, [r7, #28]
 8006abc:	f000 fb0a 	bl	80070d4 <tcp_process>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006ac4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ac8:	f113 0f0d 	cmn.w	r3, #13
 8006acc:	f000 80d3 	beq.w	8006c76 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8006ad0:	4b95      	ldr	r3, [pc, #596]	; (8006d28 <tcp_input+0x7d8>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d015      	beq.n	8006b08 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <tcp_input+0x5a8>
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	6912      	ldr	r2, [r2, #16]
 8006af0:	f06f 010d 	mvn.w	r1, #13
 8006af4:	4610      	mov	r0, r2
 8006af6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006af8:	69f9      	ldr	r1, [r7, #28]
 8006afa:	488c      	ldr	r0, [pc, #560]	; (8006d2c <tcp_input+0x7dc>)
 8006afc:	f7ff fbb0 	bl	8006260 <tcp_pcb_remove>
        tcp_free(pcb);
 8006b00:	69f8      	ldr	r0, [r7, #28]
 8006b02:	f7fe f9a9 	bl	8004e58 <tcp_free>
 8006b06:	e0c1      	b.n	8006c8c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8006b0c:	4b88      	ldr	r3, [pc, #544]	; (8006d30 <tcp_input+0x7e0>)
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01d      	beq.n	8006b50 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8006b14:	4b86      	ldr	r3, [pc, #536]	; (8006d30 <tcp_input+0x7e0>)
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <tcp_input+0x5ea>
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	6910      	ldr	r0, [r2, #16]
 8006b2e:	89fa      	ldrh	r2, [r7, #14]
 8006b30:	69f9      	ldr	r1, [r7, #28]
 8006b32:	4798      	blx	r3
 8006b34:	4603      	mov	r3, r0
 8006b36:	74fb      	strb	r3, [r7, #19]
 8006b38:	e001      	b.n	8006b3e <tcp_input+0x5ee>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006b3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006b42:	f113 0f0d 	cmn.w	r3, #13
 8006b46:	f000 8098 	beq.w	8006c7a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8006b4a:	4b79      	ldr	r3, [pc, #484]	; (8006d30 <tcp_input+0x7e0>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8006b50:	69f8      	ldr	r0, [r7, #28]
 8006b52:	f000 f905 	bl	8006d60 <tcp_input_delayed_close>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f040 8090 	bne.w	8006c7e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8006b5e:	4b75      	ldr	r3, [pc, #468]	; (8006d34 <tcp_input+0x7e4>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d041      	beq.n	8006bea <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d006      	beq.n	8006b7c <tcp_input+0x62c>
 8006b6e:	4b72      	ldr	r3, [pc, #456]	; (8006d38 <tcp_input+0x7e8>)
 8006b70:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006b74:	4971      	ldr	r1, [pc, #452]	; (8006d3c <tcp_input+0x7ec>)
 8006b76:	4872      	ldr	r0, [pc, #456]	; (8006d40 <tcp_input+0x7f0>)
 8006b78:	f006 f8b8 	bl	800ccec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	8b5b      	ldrh	r3, [r3, #26]
 8006b80:	f003 0310 	and.w	r3, r3, #16
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d008      	beq.n	8006b9a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006b88:	4b6a      	ldr	r3, [pc, #424]	; (8006d34 <tcp_input+0x7e4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fd fec3 	bl	8004918 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006b92:	69f8      	ldr	r0, [r7, #28]
 8006b94:	f7fe fc40 	bl	8005418 <tcp_abort>
            goto aborted;
 8006b98:	e078      	b.n	8006c8c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00c      	beq.n	8006bbe <tcp_input+0x66e>
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	6918      	ldr	r0, [r3, #16]
 8006bae:	4b61      	ldr	r3, [pc, #388]	; (8006d34 <tcp_input+0x7e4>)
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	69f9      	ldr	r1, [r7, #28]
 8006bb6:	47a0      	blx	r4
 8006bb8:	4603      	mov	r3, r0
 8006bba:	74fb      	strb	r3, [r7, #19]
 8006bbc:	e008      	b.n	8006bd0 <tcp_input+0x680>
 8006bbe:	4b5d      	ldr	r3, [pc, #372]	; (8006d34 <tcp_input+0x7e4>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	69f9      	ldr	r1, [r7, #28]
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	f7ff f952 	bl	8005e70 <tcp_recv_null>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8006bd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006bd4:	f113 0f0d 	cmn.w	r3, #13
 8006bd8:	d053      	beq.n	8006c82 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006bda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8006be2:	4b54      	ldr	r3, [pc, #336]	; (8006d34 <tcp_input+0x7e4>)
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8006bea:	4b4f      	ldr	r3, [pc, #316]	; (8006d28 <tcp_input+0x7d8>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d030      	beq.n	8006c58 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d009      	beq.n	8006c12 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c02:	7b5a      	ldrb	r2, [r3, #13]
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c08:	f042 0220 	orr.w	r2, r2, #32
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	735a      	strb	r2, [r3, #13]
 8006c10:	e022      	b.n	8006c58 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006c1a:	d005      	beq.n	8006c28 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	3301      	adds	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00b      	beq.n	8006c4a <tcp_input+0x6fa>
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	6918      	ldr	r0, [r3, #16]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2200      	movs	r2, #0
 8006c40:	69f9      	ldr	r1, [r7, #28]
 8006c42:	47a0      	blx	r4
 8006c44:	4603      	mov	r3, r0
 8006c46:	74fb      	strb	r3, [r7, #19]
 8006c48:	e001      	b.n	8006c4e <tcp_input+0x6fe>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006c4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c52:	f113 0f0d 	cmn.w	r3, #13
 8006c56:	d016      	beq.n	8006c86 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8006c58:	4b32      	ldr	r3, [pc, #200]	; (8006d24 <tcp_input+0x7d4>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006c5e:	69f8      	ldr	r0, [r7, #28]
 8006c60:	f000 f87e 	bl	8006d60 <tcp_input_delayed_close>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10f      	bne.n	8006c8a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8006c6a:	69f8      	ldr	r0, [r7, #28]
 8006c6c:	f002 fab6 	bl	80091dc <tcp_output>
 8006c70:	e00c      	b.n	8006c8c <tcp_input+0x73c>
        goto aborted;
 8006c72:	bf00      	nop
 8006c74:	e00a      	b.n	8006c8c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8006c76:	bf00      	nop
 8006c78:	e008      	b.n	8006c8c <tcp_input+0x73c>
              goto aborted;
 8006c7a:	bf00      	nop
 8006c7c:	e006      	b.n	8006c8c <tcp_input+0x73c>
          goto aborted;
 8006c7e:	bf00      	nop
 8006c80:	e004      	b.n	8006c8c <tcp_input+0x73c>
            goto aborted;
 8006c82:	bf00      	nop
 8006c84:	e002      	b.n	8006c8c <tcp_input+0x73c>
              goto aborted;
 8006c86:	bf00      	nop
 8006c88:	e000      	b.n	8006c8c <tcp_input+0x73c>
          goto aborted;
 8006c8a:	bf00      	nop
    tcp_input_pcb = NULL;
 8006c8c:	4b25      	ldr	r3, [pc, #148]	; (8006d24 <tcp_input+0x7d4>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006c92:	4b28      	ldr	r3, [pc, #160]	; (8006d34 <tcp_input+0x7e4>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8006c98:	4b2a      	ldr	r3, [pc, #168]	; (8006d44 <tcp_input+0x7f4>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d03d      	beq.n	8006d1c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8006ca0:	4b28      	ldr	r3, [pc, #160]	; (8006d44 <tcp_input+0x7f4>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fd fe37 	bl	8004918 <pbuf_free>
      inseg.p = NULL;
 8006caa:	4b26      	ldr	r3, [pc, #152]	; (8006d44 <tcp_input+0x7f4>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006cb0:	e034      	b.n	8006d1c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006cb2:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <tcp_input+0x7f8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	899b      	ldrh	r3, [r3, #12]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fc fb7c 	bl	80033b8 <lwip_htons>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d118      	bne.n	8006cfe <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ccc:	4b1f      	ldr	r3, [pc, #124]	; (8006d4c <tcp_input+0x7fc>)
 8006cce:	6819      	ldr	r1, [r3, #0]
 8006cd0:	4b1f      	ldr	r3, [pc, #124]	; (8006d50 <tcp_input+0x800>)
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	4b1f      	ldr	r3, [pc, #124]	; (8006d54 <tcp_input+0x804>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006cdc:	4b1a      	ldr	r3, [pc, #104]	; (8006d48 <tcp_input+0x7f8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ce0:	885b      	ldrh	r3, [r3, #2]
 8006ce2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006ce4:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <tcp_input+0x7f8>)
 8006ce6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ce8:	8812      	ldrh	r2, [r2, #0]
 8006cea:	b292      	uxth	r2, r2
 8006cec:	9202      	str	r2, [sp, #8]
 8006cee:	9301      	str	r3, [sp, #4]
 8006cf0:	4b19      	ldr	r3, [pc, #100]	; (8006d58 <tcp_input+0x808>)
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	4b19      	ldr	r3, [pc, #100]	; (8006d5c <tcp_input+0x80c>)
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	f003 f833 	bl	8009d64 <tcp_rst>
    pbuf_free(p);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fd fe0a 	bl	8004918 <pbuf_free>
  return;
 8006d04:	e00a      	b.n	8006d1c <tcp_input+0x7cc>
    goto dropped;
 8006d06:	bf00      	nop
 8006d08:	e004      	b.n	8006d14 <tcp_input+0x7c4>
dropped:
 8006d0a:	bf00      	nop
 8006d0c:	e002      	b.n	8006d14 <tcp_input+0x7c4>
      goto dropped;
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <tcp_input+0x7c4>
      goto dropped;
 8006d12:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7fd fdff 	bl	8004918 <pbuf_free>
 8006d1a:	e000      	b.n	8006d1e <tcp_input+0x7ce>
  return;
 8006d1c:	bf00      	nop
}
 8006d1e:	3724      	adds	r7, #36	; 0x24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd90      	pop	{r4, r7, pc}
 8006d24:	200068a0 	.word	0x200068a0
 8006d28:	200000f9 	.word	0x200000f9
 8006d2c:	2000688c 	.word	0x2000688c
 8006d30:	200000f4 	.word	0x200000f4
 8006d34:	200000fc 	.word	0x200000fc
 8006d38:	0800ed78 	.word	0x0800ed78
 8006d3c:	0800ef2c 	.word	0x0800ef2c
 8006d40:	0800edc4 	.word	0x0800edc4
 8006d44:	200000cc 	.word	0x200000cc
 8006d48:	200000dc 	.word	0x200000dc
 8006d4c:	200000f0 	.word	0x200000f0
 8006d50:	200000f6 	.word	0x200000f6
 8006d54:	200000ec 	.word	0x200000ec
 8006d58:	20003358 	.word	0x20003358
 8006d5c:	2000335c 	.word	0x2000335c

08006d60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <tcp_input_delayed_close+0x1c>
 8006d6e:	4b17      	ldr	r3, [pc, #92]	; (8006dcc <tcp_input_delayed_close+0x6c>)
 8006d70:	f240 225a 	movw	r2, #602	; 0x25a
 8006d74:	4916      	ldr	r1, [pc, #88]	; (8006dd0 <tcp_input_delayed_close+0x70>)
 8006d76:	4817      	ldr	r0, [pc, #92]	; (8006dd4 <tcp_input_delayed_close+0x74>)
 8006d78:	f005 ffb8 	bl	800ccec <iprintf>

  if (recv_flags & TF_CLOSED) {
 8006d7c:	4b16      	ldr	r3, [pc, #88]	; (8006dd8 <tcp_input_delayed_close+0x78>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	f003 0310 	and.w	r3, r3, #16
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01c      	beq.n	8006dc2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8b5b      	ldrh	r3, [r3, #26]
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10d      	bne.n	8006db0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d008      	beq.n	8006db0 <tcp_input_delayed_close+0x50>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6912      	ldr	r2, [r2, #16]
 8006da8:	f06f 010e 	mvn.w	r1, #14
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	480a      	ldr	r0, [pc, #40]	; (8006ddc <tcp_input_delayed_close+0x7c>)
 8006db4:	f7ff fa54 	bl	8006260 <tcp_pcb_remove>
    tcp_free(pcb);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fe f84d 	bl	8004e58 <tcp_free>
    return 1;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	0800ed78 	.word	0x0800ed78
 8006dd0:	0800ef48 	.word	0x0800ef48
 8006dd4:	0800edc4 	.word	0x0800edc4
 8006dd8:	200000f9 	.word	0x200000f9
 8006ddc:	2000688c 	.word	0x2000688c

08006de0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8006de0:	b590      	push	{r4, r7, lr}
 8006de2:	b08b      	sub	sp, #44	; 0x2c
 8006de4:	af04      	add	r7, sp, #16
 8006de6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8006de8:	4b6f      	ldr	r3, [pc, #444]	; (8006fa8 <tcp_listen_input+0x1c8>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f040 80d3 	bne.w	8006f9c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <tcp_listen_input+0x2a>
 8006dfc:	4b6b      	ldr	r3, [pc, #428]	; (8006fac <tcp_listen_input+0x1cc>)
 8006dfe:	f240 2281 	movw	r2, #641	; 0x281
 8006e02:	496b      	ldr	r1, [pc, #428]	; (8006fb0 <tcp_listen_input+0x1d0>)
 8006e04:	486b      	ldr	r0, [pc, #428]	; (8006fb4 <tcp_listen_input+0x1d4>)
 8006e06:	f005 ff71 	bl	800ccec <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8006e0a:	4b67      	ldr	r3, [pc, #412]	; (8006fa8 <tcp_listen_input+0x1c8>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d019      	beq.n	8006e4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e16:	4b68      	ldr	r3, [pc, #416]	; (8006fb8 <tcp_listen_input+0x1d8>)
 8006e18:	6819      	ldr	r1, [r3, #0]
 8006e1a:	4b68      	ldr	r3, [pc, #416]	; (8006fbc <tcp_listen_input+0x1dc>)
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	4b67      	ldr	r3, [pc, #412]	; (8006fc0 <tcp_listen_input+0x1e0>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006e26:	4b67      	ldr	r3, [pc, #412]	; (8006fc4 <tcp_listen_input+0x1e4>)
 8006e28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e2a:	885b      	ldrh	r3, [r3, #2]
 8006e2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006e2e:	4a65      	ldr	r2, [pc, #404]	; (8006fc4 <tcp_listen_input+0x1e4>)
 8006e30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006e32:	8812      	ldrh	r2, [r2, #0]
 8006e34:	b292      	uxth	r2, r2
 8006e36:	9202      	str	r2, [sp, #8]
 8006e38:	9301      	str	r3, [sp, #4]
 8006e3a:	4b63      	ldr	r3, [pc, #396]	; (8006fc8 <tcp_listen_input+0x1e8>)
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	4b63      	ldr	r3, [pc, #396]	; (8006fcc <tcp_listen_input+0x1ec>)
 8006e40:	4602      	mov	r2, r0
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f002 ff8e 	bl	8009d64 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8006e48:	e0aa      	b.n	8006fa0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8006e4a:	4b57      	ldr	r3, [pc, #348]	; (8006fa8 <tcp_listen_input+0x1c8>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 80a4 	beq.w	8006fa0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	7d5b      	ldrb	r3, [r3, #21]
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7ff f92b 	bl	80060b8 <tcp_alloc>
 8006e62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d111      	bne.n	8006e8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <tcp_listen_input+0xa8>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6910      	ldr	r0, [r2, #16]
 8006e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4798      	blx	r3
 8006e82:	4603      	mov	r3, r0
 8006e84:	73bb      	strb	r3, [r7, #14]
      return;
 8006e86:	e08c      	b.n	8006fa2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006e88:	23f0      	movs	r3, #240	; 0xf0
 8006e8a:	73bb      	strb	r3, [r7, #14]
      return;
 8006e8c:	e089      	b.n	8006fa2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006e8e:	4b50      	ldr	r3, [pc, #320]	; (8006fd0 <tcp_listen_input+0x1f0>)
 8006e90:	695a      	ldr	r2, [r3, #20]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006e96:	4b4e      	ldr	r3, [pc, #312]	; (8006fd0 <tcp_listen_input+0x1f0>)
 8006e98:	691a      	ldr	r2, [r3, #16]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	8ada      	ldrh	r2, [r3, #22]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8006ea6:	4b47      	ldr	r3, [pc, #284]	; (8006fc4 <tcp_listen_input+0x1e4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8006eb8:	4b41      	ldr	r3, [pc, #260]	; (8006fc0 <tcp_listen_input+0x1e0>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006eca:	6978      	ldr	r0, [r7, #20]
 8006ecc:	f7ff fa5c 	bl	8006388 <tcp_next_iss>
 8006ed0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006eea:	4b35      	ldr	r3, [pc, #212]	; (8006fc0 <tcp_listen_input+0x1e0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	1e5a      	subs	r2, r3, #1
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	7a5b      	ldrb	r3, [r3, #9]
 8006f06:	f003 030c 	and.w	r3, r3, #12
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	7a1a      	ldrb	r2, [r3, #8]
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8006f18:	4b2e      	ldr	r3, [pc, #184]	; (8006fd4 <tcp_listen_input+0x1f4>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	60da      	str	r2, [r3, #12]
 8006f20:	4a2c      	ldr	r2, [pc, #176]	; (8006fd4 <tcp_listen_input+0x1f4>)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	f003 f8df 	bl	800a0e8 <tcp_timer_needed>
 8006f2a:	4b2b      	ldr	r3, [pc, #172]	; (8006fd8 <tcp_listen_input+0x1f8>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8006f30:	6978      	ldr	r0, [r7, #20]
 8006f32:	f001 fd8f 	bl	8008a54 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8006f36:	4b23      	ldr	r3, [pc, #140]	; (8006fc4 <tcp_listen_input+0x1e4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	89db      	ldrh	r3, [r3, #14]
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f004 fca1 	bl	800b8a0 <ip4_route>
 8006f5e:	4601      	mov	r1, r0
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	3304      	adds	r3, #4
 8006f64:	461a      	mov	r2, r3
 8006f66:	4620      	mov	r0, r4
 8006f68:	f7ff fa34 	bl	80063d4 <tcp_eff_send_mss_netif>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	461a      	mov	r2, r3
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006f74:	2112      	movs	r1, #18
 8006f76:	6978      	ldr	r0, [r7, #20]
 8006f78:	f002 f842 	bl	8009000 <tcp_enqueue_flags>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8006f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8006f88:	2100      	movs	r1, #0
 8006f8a:	6978      	ldr	r0, [r7, #20]
 8006f8c:	f7fe f986 	bl	800529c <tcp_abandon>
      return;
 8006f90:	e007      	b.n	8006fa2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8006f92:	6978      	ldr	r0, [r7, #20]
 8006f94:	f002 f922 	bl	80091dc <tcp_output>
  return;
 8006f98:	bf00      	nop
 8006f9a:	e001      	b.n	8006fa0 <tcp_listen_input+0x1c0>
    return;
 8006f9c:	bf00      	nop
 8006f9e:	e000      	b.n	8006fa2 <tcp_listen_input+0x1c2>
  return;
 8006fa0:	bf00      	nop
}
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd90      	pop	{r4, r7, pc}
 8006fa8:	200000f8 	.word	0x200000f8
 8006fac:	0800ed78 	.word	0x0800ed78
 8006fb0:	0800ef70 	.word	0x0800ef70
 8006fb4:	0800edc4 	.word	0x0800edc4
 8006fb8:	200000f0 	.word	0x200000f0
 8006fbc:	200000f6 	.word	0x200000f6
 8006fc0:	200000ec 	.word	0x200000ec
 8006fc4:	200000dc 	.word	0x200000dc
 8006fc8:	20003358 	.word	0x20003358
 8006fcc:	2000335c 	.word	0x2000335c
 8006fd0:	20003348 	.word	0x20003348
 8006fd4:	2000688c 	.word	0x2000688c
 8006fd8:	20006888 	.word	0x20006888

08006fdc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af04      	add	r7, sp, #16
 8006fe2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8006fe4:	4b30      	ldr	r3, [pc, #192]	; (80070a8 <tcp_timewait_input+0xcc>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d154      	bne.n	800709a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <tcp_timewait_input+0x28>
 8006ff6:	4b2d      	ldr	r3, [pc, #180]	; (80070ac <tcp_timewait_input+0xd0>)
 8006ff8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8006ffc:	492c      	ldr	r1, [pc, #176]	; (80070b0 <tcp_timewait_input+0xd4>)
 8006ffe:	482d      	ldr	r0, [pc, #180]	; (80070b4 <tcp_timewait_input+0xd8>)
 8007000:	f005 fe74 	bl	800ccec <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007004:	4b28      	ldr	r3, [pc, #160]	; (80070a8 <tcp_timewait_input+0xcc>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d02a      	beq.n	8007066 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007010:	4b29      	ldr	r3, [pc, #164]	; (80070b8 <tcp_timewait_input+0xdc>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	db2d      	blt.n	800707a <tcp_timewait_input+0x9e>
 800701e:	4b26      	ldr	r3, [pc, #152]	; (80070b8 <tcp_timewait_input+0xdc>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800702a:	440b      	add	r3, r1
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	dc23      	bgt.n	800707a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007032:	4b22      	ldr	r3, [pc, #136]	; (80070bc <tcp_timewait_input+0xe0>)
 8007034:	6819      	ldr	r1, [r3, #0]
 8007036:	4b22      	ldr	r3, [pc, #136]	; (80070c0 <tcp_timewait_input+0xe4>)
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	4b1e      	ldr	r3, [pc, #120]	; (80070b8 <tcp_timewait_input+0xdc>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007042:	4b20      	ldr	r3, [pc, #128]	; (80070c4 <tcp_timewait_input+0xe8>)
 8007044:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007046:	885b      	ldrh	r3, [r3, #2]
 8007048:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800704a:	4a1e      	ldr	r2, [pc, #120]	; (80070c4 <tcp_timewait_input+0xe8>)
 800704c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800704e:	8812      	ldrh	r2, [r2, #0]
 8007050:	b292      	uxth	r2, r2
 8007052:	9202      	str	r2, [sp, #8]
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	4b1c      	ldr	r3, [pc, #112]	; (80070c8 <tcp_timewait_input+0xec>)
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	4b1c      	ldr	r3, [pc, #112]	; (80070cc <tcp_timewait_input+0xf0>)
 800705c:	4602      	mov	r2, r0
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f002 fe80 	bl	8009d64 <tcp_rst>
      return;
 8007064:	e01c      	b.n	80070a0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8007066:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <tcp_timewait_input+0xcc>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007072:	4b17      	ldr	r3, [pc, #92]	; (80070d0 <tcp_timewait_input+0xf4>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800707a:	4b11      	ldr	r3, [pc, #68]	; (80070c0 <tcp_timewait_input+0xe4>)
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	8b5b      	ldrh	r3, [r3, #26]
 8007086:	f043 0302 	orr.w	r3, r3, #2
 800708a:	b29a      	uxth	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f002 f8a3 	bl	80091dc <tcp_output>
  }
  return;
 8007096:	bf00      	nop
 8007098:	e001      	b.n	800709e <tcp_timewait_input+0xc2>
    return;
 800709a:	bf00      	nop
 800709c:	e000      	b.n	80070a0 <tcp_timewait_input+0xc4>
  return;
 800709e:	bf00      	nop
}
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200000f8 	.word	0x200000f8
 80070ac:	0800ed78 	.word	0x0800ed78
 80070b0:	0800ef90 	.word	0x0800ef90
 80070b4:	0800edc4 	.word	0x0800edc4
 80070b8:	200000ec 	.word	0x200000ec
 80070bc:	200000f0 	.word	0x200000f0
 80070c0:	200000f6 	.word	0x200000f6
 80070c4:	200000dc 	.word	0x200000dc
 80070c8:	20003358 	.word	0x20003358
 80070cc:	2000335c 	.word	0x2000335c
 80070d0:	20006890 	.word	0x20006890

080070d4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80070d4:	b590      	push	{r4, r7, lr}
 80070d6:	b08d      	sub	sp, #52	; 0x34
 80070d8:	af04      	add	r7, sp, #16
 80070da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <tcp_process+0x24>
 80070ea:	4ba5      	ldr	r3, [pc, #660]	; (8007380 <tcp_process+0x2ac>)
 80070ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80070f0:	49a4      	ldr	r1, [pc, #656]	; (8007384 <tcp_process+0x2b0>)
 80070f2:	48a5      	ldr	r0, [pc, #660]	; (8007388 <tcp_process+0x2b4>)
 80070f4:	f005 fdfa 	bl	800ccec <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80070f8:	4ba4      	ldr	r3, [pc, #656]	; (800738c <tcp_process+0x2b8>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d04e      	beq.n	80071a2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	7d1b      	ldrb	r3, [r3, #20]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d108      	bne.n	800711e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007110:	4b9f      	ldr	r3, [pc, #636]	; (8007390 <tcp_process+0x2bc>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d123      	bne.n	8007160 <tcp_process+0x8c>
        acceptable = 1;
 8007118:	2301      	movs	r3, #1
 800711a:	76fb      	strb	r3, [r7, #27]
 800711c:	e020      	b.n	8007160 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007122:	4b9c      	ldr	r3, [pc, #624]	; (8007394 <tcp_process+0x2c0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d102      	bne.n	8007130 <tcp_process+0x5c>
        acceptable = 1;
 800712a:	2301      	movs	r3, #1
 800712c:	76fb      	strb	r3, [r7, #27]
 800712e:	e017      	b.n	8007160 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007130:	4b98      	ldr	r3, [pc, #608]	; (8007394 <tcp_process+0x2c0>)
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	db10      	blt.n	8007160 <tcp_process+0x8c>
 800713e:	4b95      	ldr	r3, [pc, #596]	; (8007394 <tcp_process+0x2c0>)
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800714a:	440b      	add	r3, r1
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	dc06      	bgt.n	8007160 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	8b5b      	ldrh	r3, [r3, #26]
 8007156:	f043 0302 	orr.w	r3, r3, #2
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007160:	7efb      	ldrb	r3, [r7, #27]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d01b      	beq.n	800719e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	7d1b      	ldrb	r3, [r3, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <tcp_process+0xa8>
 800716e:	4b84      	ldr	r3, [pc, #528]	; (8007380 <tcp_process+0x2ac>)
 8007170:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007174:	4988      	ldr	r1, [pc, #544]	; (8007398 <tcp_process+0x2c4>)
 8007176:	4884      	ldr	r0, [pc, #528]	; (8007388 <tcp_process+0x2b4>)
 8007178:	f005 fdb8 	bl	800ccec <iprintf>
      recv_flags |= TF_RESET;
 800717c:	4b87      	ldr	r3, [pc, #540]	; (800739c <tcp_process+0x2c8>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	f043 0308 	orr.w	r3, r3, #8
 8007184:	b2da      	uxtb	r2, r3
 8007186:	4b85      	ldr	r3, [pc, #532]	; (800739c <tcp_process+0x2c8>)
 8007188:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	8b5b      	ldrh	r3, [r3, #26]
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007198:	f06f 030d 	mvn.w	r3, #13
 800719c:	e37a      	b.n	8007894 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	e378      	b.n	8007894 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80071a2:	4b7a      	ldr	r3, [pc, #488]	; (800738c <tcp_process+0x2b8>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d010      	beq.n	80071d0 <tcp_process+0xfc>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	7d1b      	ldrb	r3, [r3, #20]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d00c      	beq.n	80071d0 <tcp_process+0xfc>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	7d1b      	ldrb	r3, [r3, #20]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d008      	beq.n	80071d0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	8b5b      	ldrh	r3, [r3, #26]
 80071c2:	f043 0302 	orr.w	r3, r3, #2
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	e361      	b.n	8007894 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	8b5b      	ldrh	r3, [r3, #26]
 80071d4:	f003 0310 	and.w	r3, r3, #16
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d103      	bne.n	80071e4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80071dc:	4b70      	ldr	r3, [pc, #448]	; (80073a0 <tcp_process+0x2cc>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 fc2d 	bl	8008a54 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	7d1b      	ldrb	r3, [r3, #20]
 80071fe:	3b02      	subs	r3, #2
 8007200:	2b07      	cmp	r3, #7
 8007202:	f200 8337 	bhi.w	8007874 <tcp_process+0x7a0>
 8007206:	a201      	add	r2, pc, #4	; (adr r2, 800720c <tcp_process+0x138>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	0800722d 	.word	0x0800722d
 8007210:	0800745d 	.word	0x0800745d
 8007214:	080075d5 	.word	0x080075d5
 8007218:	080075ff 	.word	0x080075ff
 800721c:	08007723 	.word	0x08007723
 8007220:	080075d5 	.word	0x080075d5
 8007224:	080077af 	.word	0x080077af
 8007228:	0800783f 	.word	0x0800783f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800722c:	4b57      	ldr	r3, [pc, #348]	; (800738c <tcp_process+0x2b8>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	f003 0310 	and.w	r3, r3, #16
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 80e4 	beq.w	8007402 <tcp_process+0x32e>
 800723a:	4b54      	ldr	r3, [pc, #336]	; (800738c <tcp_process+0x2b8>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 80dd 	beq.w	8007402 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	4b50      	ldr	r3, [pc, #320]	; (8007390 <tcp_process+0x2bc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	f040 80d5 	bne.w	8007402 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007258:	4b4e      	ldr	r3, [pc, #312]	; (8007394 <tcp_process+0x2c0>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800726a:	4b49      	ldr	r3, [pc, #292]	; (8007390 <tcp_process+0x2bc>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007272:	4b4c      	ldr	r3, [pc, #304]	; (80073a4 <tcp_process+0x2d0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	89db      	ldrh	r3, [r3, #14]
 8007278:	b29a      	uxth	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800728c:	4b41      	ldr	r3, [pc, #260]	; (8007394 <tcp_process+0x2c0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	1e5a      	subs	r2, r3, #1
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2204      	movs	r2, #4
 800729a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3304      	adds	r3, #4
 80072a4:	4618      	mov	r0, r3
 80072a6:	f004 fafb 	bl	800b8a0 <ip4_route>
 80072aa:	4601      	mov	r1, r0
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3304      	adds	r3, #4
 80072b0:	461a      	mov	r2, r3
 80072b2:	4620      	mov	r0, r4
 80072b4:	f7ff f88e 	bl	80063d4 <tcp_eff_send_mss_netif>
 80072b8:	4603      	mov	r3, r0
 80072ba:	461a      	mov	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072c4:	009a      	lsls	r2, r3, #2
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	f241 111c 	movw	r1, #4380	; 0x111c
 80072d0:	428b      	cmp	r3, r1
 80072d2:	bf38      	it	cc
 80072d4:	460b      	movcc	r3, r1
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d204      	bcs.n	80072e4 <tcp_process+0x210>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	e00d      	b.n	8007300 <tcp_process+0x22c>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	f241 121c 	movw	r2, #4380	; 0x111c
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d904      	bls.n	80072fc <tcp_process+0x228>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	e001      	b.n	8007300 <tcp_process+0x22c>
 80072fc:	f241 131c 	movw	r3, #4380	; 0x111c
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800730c:	2b00      	cmp	r3, #0
 800730e:	d106      	bne.n	800731e <tcp_process+0x24a>
 8007310:	4b1b      	ldr	r3, [pc, #108]	; (8007380 <tcp_process+0x2ac>)
 8007312:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007316:	4924      	ldr	r1, [pc, #144]	; (80073a8 <tcp_process+0x2d4>)
 8007318:	481b      	ldr	r0, [pc, #108]	; (8007388 <tcp_process+0x2b4>)
 800731a:	f005 fce7 	bl	800ccec <iprintf>
        --pcb->snd_queuelen;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007332:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d111      	bne.n	800735e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d106      	bne.n	8007354 <tcp_process+0x280>
 8007346:	4b0e      	ldr	r3, [pc, #56]	; (8007380 <tcp_process+0x2ac>)
 8007348:	f44f 725d 	mov.w	r2, #884	; 0x374
 800734c:	4917      	ldr	r1, [pc, #92]	; (80073ac <tcp_process+0x2d8>)
 800734e:	480e      	ldr	r0, [pc, #56]	; (8007388 <tcp_process+0x2b4>)
 8007350:	f005 fccc 	bl	800ccec <iprintf>
          pcb->unsent = rseg->next;
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	66da      	str	r2, [r3, #108]	; 0x6c
 800735c:	e003      	b.n	8007366 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007366:	69f8      	ldr	r0, [r7, #28]
 8007368:	f7fe fd3e 	bl	8005de8 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007370:	2b00      	cmp	r3, #0
 8007372:	d11d      	bne.n	80073b0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800737a:	861a      	strh	r2, [r3, #48]	; 0x30
 800737c:	e01f      	b.n	80073be <tcp_process+0x2ea>
 800737e:	bf00      	nop
 8007380:	0800ed78 	.word	0x0800ed78
 8007384:	0800efb0 	.word	0x0800efb0
 8007388:	0800edc4 	.word	0x0800edc4
 800738c:	200000f8 	.word	0x200000f8
 8007390:	200000f0 	.word	0x200000f0
 8007394:	200000ec 	.word	0x200000ec
 8007398:	0800efcc 	.word	0x0800efcc
 800739c:	200000f9 	.word	0x200000f9
 80073a0:	20006890 	.word	0x20006890
 80073a4:	200000dc 	.word	0x200000dc
 80073a8:	0800efec 	.word	0x0800efec
 80073ac:	0800f004 	.word	0x0800f004
        } else {
          pcb->rtime = 0;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <tcp_process+0x30a>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6910      	ldr	r0, [r2, #16]
 80073d2:	2200      	movs	r2, #0
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	4798      	blx	r3
 80073d8:	4603      	mov	r3, r0
 80073da:	76bb      	strb	r3, [r7, #26]
 80073dc:	e001      	b.n	80073e2 <tcp_process+0x30e>
 80073de:	2300      	movs	r3, #0
 80073e0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80073e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80073e6:	f113 0f0d 	cmn.w	r3, #13
 80073ea:	d102      	bne.n	80073f2 <tcp_process+0x31e>
          return ERR_ABRT;
 80073ec:	f06f 030c 	mvn.w	r3, #12
 80073f0:	e250      	b.n	8007894 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	8b5b      	ldrh	r3, [r3, #26]
 80073f6:	f043 0302 	orr.w	r3, r3, #2
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007400:	e23a      	b.n	8007878 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007402:	4b9d      	ldr	r3, [pc, #628]	; (8007678 <tcp_process+0x5a4>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 8234 	beq.w	8007878 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007410:	4b9a      	ldr	r3, [pc, #616]	; (800767c <tcp_process+0x5a8>)
 8007412:	6819      	ldr	r1, [r3, #0]
 8007414:	4b9a      	ldr	r3, [pc, #616]	; (8007680 <tcp_process+0x5ac>)
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	4b9a      	ldr	r3, [pc, #616]	; (8007684 <tcp_process+0x5b0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007420:	4b99      	ldr	r3, [pc, #612]	; (8007688 <tcp_process+0x5b4>)
 8007422:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007424:	885b      	ldrh	r3, [r3, #2]
 8007426:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007428:	4a97      	ldr	r2, [pc, #604]	; (8007688 <tcp_process+0x5b4>)
 800742a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800742c:	8812      	ldrh	r2, [r2, #0]
 800742e:	b292      	uxth	r2, r2
 8007430:	9202      	str	r2, [sp, #8]
 8007432:	9301      	str	r3, [sp, #4]
 8007434:	4b95      	ldr	r3, [pc, #596]	; (800768c <tcp_process+0x5b8>)
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	4b95      	ldr	r3, [pc, #596]	; (8007690 <tcp_process+0x5bc>)
 800743a:	4602      	mov	r2, r0
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f002 fc91 	bl	8009d64 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007448:	2b05      	cmp	r3, #5
 800744a:	f200 8215 	bhi.w	8007878 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f002 fa51 	bl	80098fc <tcp_rexmit_rto>
      break;
 800745a:	e20d      	b.n	8007878 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800745c:	4b86      	ldr	r3, [pc, #536]	; (8007678 <tcp_process+0x5a4>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 80a1 	beq.w	80075ac <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800746a:	4b84      	ldr	r3, [pc, #528]	; (800767c <tcp_process+0x5a8>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	3b01      	subs	r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	db7e      	blt.n	8007578 <tcp_process+0x4a4>
 800747a:	4b80      	ldr	r3, [pc, #512]	; (800767c <tcp_process+0x5a8>)
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	dc77      	bgt.n	8007578 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2204      	movs	r2, #4
 800748c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d102      	bne.n	800749c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007496:	23fa      	movs	r3, #250	; 0xfa
 8007498:	76bb      	strb	r3, [r7, #26]
 800749a:	e01d      	b.n	80074d8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <tcp_process+0x3e0>
 80074a6:	4b7b      	ldr	r3, [pc, #492]	; (8007694 <tcp_process+0x5c0>)
 80074a8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80074ac:	497a      	ldr	r1, [pc, #488]	; (8007698 <tcp_process+0x5c4>)
 80074ae:	487b      	ldr	r0, [pc, #492]	; (800769c <tcp_process+0x5c8>)
 80074b0:	f005 fc1c 	bl	800ccec <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <tcp_process+0x400>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6910      	ldr	r0, [r2, #16]
 80074c8:	2200      	movs	r2, #0
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	4798      	blx	r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	76bb      	strb	r3, [r7, #26]
 80074d2:	e001      	b.n	80074d8 <tcp_process+0x404>
 80074d4:	23f0      	movs	r3, #240	; 0xf0
 80074d6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80074d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80074e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80074e4:	f113 0f0d 	cmn.w	r3, #13
 80074e8:	d002      	beq.n	80074f0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7fd ff94 	bl	8005418 <tcp_abort>
            }
            return ERR_ABRT;
 80074f0:	f06f 030c 	mvn.w	r3, #12
 80074f4:	e1ce      	b.n	8007894 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fae0 	bl	8007abc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80074fc:	4b68      	ldr	r3, [pc, #416]	; (80076a0 <tcp_process+0x5cc>)
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <tcp_process+0x43c>
            recv_acked--;
 8007504:	4b66      	ldr	r3, [pc, #408]	; (80076a0 <tcp_process+0x5cc>)
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	4b64      	ldr	r3, [pc, #400]	; (80076a0 <tcp_process+0x5cc>)
 800750e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007514:	009a      	lsls	r2, r3, #2
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	f241 111c 	movw	r1, #4380	; 0x111c
 8007520:	428b      	cmp	r3, r1
 8007522:	bf38      	it	cc
 8007524:	460b      	movcc	r3, r1
 8007526:	429a      	cmp	r2, r3
 8007528:	d204      	bcs.n	8007534 <tcp_process+0x460>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	b29b      	uxth	r3, r3
 8007532:	e00d      	b.n	8007550 <tcp_process+0x47c>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	f241 121c 	movw	r2, #4380	; 0x111c
 800753e:	4293      	cmp	r3, r2
 8007540:	d904      	bls.n	800754c <tcp_process+0x478>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	b29b      	uxth	r3, r3
 800754a:	e001      	b.n	8007550 <tcp_process+0x47c>
 800754c:	f241 131c 	movw	r3, #4380	; 0x111c
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007556:	4b53      	ldr	r3, [pc, #332]	; (80076a4 <tcp_process+0x5d0>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d037      	beq.n	80075d2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	8b5b      	ldrh	r3, [r3, #26]
 8007566:	f043 0302 	orr.w	r3, r3, #2
 800756a:	b29a      	uxth	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2207      	movs	r2, #7
 8007574:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007576:	e02c      	b.n	80075d2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007578:	4b40      	ldr	r3, [pc, #256]	; (800767c <tcp_process+0x5a8>)
 800757a:	6819      	ldr	r1, [r3, #0]
 800757c:	4b40      	ldr	r3, [pc, #256]	; (8007680 <tcp_process+0x5ac>)
 800757e:	881b      	ldrh	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	4b40      	ldr	r3, [pc, #256]	; (8007684 <tcp_process+0x5b0>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007588:	4b3f      	ldr	r3, [pc, #252]	; (8007688 <tcp_process+0x5b4>)
 800758a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800758c:	885b      	ldrh	r3, [r3, #2]
 800758e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007590:	4a3d      	ldr	r2, [pc, #244]	; (8007688 <tcp_process+0x5b4>)
 8007592:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007594:	8812      	ldrh	r2, [r2, #0]
 8007596:	b292      	uxth	r2, r2
 8007598:	9202      	str	r2, [sp, #8]
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	4b3b      	ldr	r3, [pc, #236]	; (800768c <tcp_process+0x5b8>)
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	4b3b      	ldr	r3, [pc, #236]	; (8007690 <tcp_process+0x5bc>)
 80075a2:	4602      	mov	r2, r0
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f002 fbdd 	bl	8009d64 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80075aa:	e167      	b.n	800787c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80075ac:	4b32      	ldr	r3, [pc, #200]	; (8007678 <tcp_process+0x5a4>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8161 	beq.w	800787c <tcp_process+0x7a8>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	1e5a      	subs	r2, r3, #1
 80075c0:	4b30      	ldr	r3, [pc, #192]	; (8007684 <tcp_process+0x5b0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	f040 8159 	bne.w	800787c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f002 f9b8 	bl	8009940 <tcp_rexmit>
      break;
 80075d0:	e154      	b.n	800787c <tcp_process+0x7a8>
 80075d2:	e153      	b.n	800787c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fa71 	bl	8007abc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80075da:	4b32      	ldr	r3, [pc, #200]	; (80076a4 <tcp_process+0x5d0>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 814c 	beq.w	8007880 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	8b5b      	ldrh	r3, [r3, #26]
 80075ec:	f043 0302 	orr.w	r3, r3, #2
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2207      	movs	r2, #7
 80075fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80075fc:	e140      	b.n	8007880 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fa5c 	bl	8007abc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007604:	4b27      	ldr	r3, [pc, #156]	; (80076a4 <tcp_process+0x5d0>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b00      	cmp	r3, #0
 800760e:	d071      	beq.n	80076f4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007610:	4b19      	ldr	r3, [pc, #100]	; (8007678 <tcp_process+0x5a4>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	f003 0310 	and.w	r3, r3, #16
 8007618:	2b00      	cmp	r3, #0
 800761a:	d060      	beq.n	80076de <tcp_process+0x60a>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007620:	4b16      	ldr	r3, [pc, #88]	; (800767c <tcp_process+0x5a8>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	429a      	cmp	r2, r3
 8007626:	d15a      	bne.n	80076de <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800762c:	2b00      	cmp	r3, #0
 800762e:	d156      	bne.n	80076de <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	8b5b      	ldrh	r3, [r3, #26]
 8007634:	f043 0302 	orr.w	r3, r3, #2
 8007638:	b29a      	uxth	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fe fdbe 	bl	80061c0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007644:	4b18      	ldr	r3, [pc, #96]	; (80076a8 <tcp_process+0x5d4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	429a      	cmp	r2, r3
 800764c:	d105      	bne.n	800765a <tcp_process+0x586>
 800764e:	4b16      	ldr	r3, [pc, #88]	; (80076a8 <tcp_process+0x5d4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4a14      	ldr	r2, [pc, #80]	; (80076a8 <tcp_process+0x5d4>)
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	e02e      	b.n	80076b8 <tcp_process+0x5e4>
 800765a:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <tcp_process+0x5d4>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	e027      	b.n	80076b2 <tcp_process+0x5de>
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	429a      	cmp	r2, r3
 800766a:	d11f      	bne.n	80076ac <tcp_process+0x5d8>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	60da      	str	r2, [r3, #12]
 8007674:	e020      	b.n	80076b8 <tcp_process+0x5e4>
 8007676:	bf00      	nop
 8007678:	200000f8 	.word	0x200000f8
 800767c:	200000f0 	.word	0x200000f0
 8007680:	200000f6 	.word	0x200000f6
 8007684:	200000ec 	.word	0x200000ec
 8007688:	200000dc 	.word	0x200000dc
 800768c:	20003358 	.word	0x20003358
 8007690:	2000335c 	.word	0x2000335c
 8007694:	0800ed78 	.word	0x0800ed78
 8007698:	0800f018 	.word	0x0800f018
 800769c:	0800edc4 	.word	0x0800edc4
 80076a0:	200000f4 	.word	0x200000f4
 80076a4:	200000f9 	.word	0x200000f9
 80076a8:	2000688c 	.word	0x2000688c
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	617b      	str	r3, [r7, #20]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1d4      	bne.n	8007662 <tcp_process+0x58e>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	60da      	str	r2, [r3, #12]
 80076be:	4b77      	ldr	r3, [pc, #476]	; (800789c <tcp_process+0x7c8>)
 80076c0:	2201      	movs	r2, #1
 80076c2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	220a      	movs	r2, #10
 80076c8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80076ca:	4b75      	ldr	r3, [pc, #468]	; (80078a0 <tcp_process+0x7cc>)
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60da      	str	r2, [r3, #12]
 80076d2:	4a73      	ldr	r2, [pc, #460]	; (80078a0 <tcp_process+0x7cc>)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	f002 fd06 	bl	800a0e8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80076dc:	e0d2      	b.n	8007884 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	8b5b      	ldrh	r3, [r3, #26]
 80076e2:	f043 0302 	orr.w	r3, r3, #2
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2208      	movs	r2, #8
 80076f0:	751a      	strb	r2, [r3, #20]
      break;
 80076f2:	e0c7      	b.n	8007884 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80076f4:	4b6b      	ldr	r3, [pc, #428]	; (80078a4 <tcp_process+0x7d0>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 80c1 	beq.w	8007884 <tcp_process+0x7b0>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007706:	4b68      	ldr	r3, [pc, #416]	; (80078a8 <tcp_process+0x7d4>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	429a      	cmp	r2, r3
 800770c:	f040 80ba 	bne.w	8007884 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007714:	2b00      	cmp	r3, #0
 8007716:	f040 80b5 	bne.w	8007884 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2206      	movs	r2, #6
 800771e:	751a      	strb	r2, [r3, #20]
      break;
 8007720:	e0b0      	b.n	8007884 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f9ca 	bl	8007abc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007728:	4b60      	ldr	r3, [pc, #384]	; (80078ac <tcp_process+0x7d8>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 80a9 	beq.w	8007888 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	8b5b      	ldrh	r3, [r3, #26]
 800773a:	f043 0302 	orr.w	r3, r3, #2
 800773e:	b29a      	uxth	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7fe fd3b 	bl	80061c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800774a:	4b59      	ldr	r3, [pc, #356]	; (80078b0 <tcp_process+0x7dc>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d105      	bne.n	8007760 <tcp_process+0x68c>
 8007754:	4b56      	ldr	r3, [pc, #344]	; (80078b0 <tcp_process+0x7dc>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	4a55      	ldr	r2, [pc, #340]	; (80078b0 <tcp_process+0x7dc>)
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	e013      	b.n	8007788 <tcp_process+0x6b4>
 8007760:	4b53      	ldr	r3, [pc, #332]	; (80078b0 <tcp_process+0x7dc>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	613b      	str	r3, [r7, #16]
 8007766:	e00c      	b.n	8007782 <tcp_process+0x6ae>
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	429a      	cmp	r2, r3
 8007770:	d104      	bne.n	800777c <tcp_process+0x6a8>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	60da      	str	r2, [r3, #12]
 800777a:	e005      	b.n	8007788 <tcp_process+0x6b4>
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1ef      	bne.n	8007768 <tcp_process+0x694>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	4b43      	ldr	r3, [pc, #268]	; (800789c <tcp_process+0x7c8>)
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	220a      	movs	r2, #10
 8007798:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800779a:	4b41      	ldr	r3, [pc, #260]	; (80078a0 <tcp_process+0x7cc>)
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	60da      	str	r2, [r3, #12]
 80077a2:	4a3f      	ldr	r2, [pc, #252]	; (80078a0 <tcp_process+0x7cc>)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	f002 fc9e 	bl	800a0e8 <tcp_timer_needed>
      }
      break;
 80077ac:	e06c      	b.n	8007888 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f984 	bl	8007abc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80077b4:	4b3b      	ldr	r3, [pc, #236]	; (80078a4 <tcp_process+0x7d0>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	f003 0310 	and.w	r3, r3, #16
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d065      	beq.n	800788c <tcp_process+0x7b8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077c4:	4b38      	ldr	r3, [pc, #224]	; (80078a8 <tcp_process+0x7d4>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d15f      	bne.n	800788c <tcp_process+0x7b8>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d15b      	bne.n	800788c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7fe fcf3 	bl	80061c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80077da:	4b35      	ldr	r3, [pc, #212]	; (80078b0 <tcp_process+0x7dc>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d105      	bne.n	80077f0 <tcp_process+0x71c>
 80077e4:	4b32      	ldr	r3, [pc, #200]	; (80078b0 <tcp_process+0x7dc>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	4a31      	ldr	r2, [pc, #196]	; (80078b0 <tcp_process+0x7dc>)
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	e013      	b.n	8007818 <tcp_process+0x744>
 80077f0:	4b2f      	ldr	r3, [pc, #188]	; (80078b0 <tcp_process+0x7dc>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	e00c      	b.n	8007812 <tcp_process+0x73e>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d104      	bne.n	800780c <tcp_process+0x738>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	60da      	str	r2, [r3, #12]
 800780a:	e005      	b.n	8007818 <tcp_process+0x744>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1ef      	bne.n	80077f8 <tcp_process+0x724>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	60da      	str	r2, [r3, #12]
 800781e:	4b1f      	ldr	r3, [pc, #124]	; (800789c <tcp_process+0x7c8>)
 8007820:	2201      	movs	r2, #1
 8007822:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	220a      	movs	r2, #10
 8007828:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800782a:	4b1d      	ldr	r3, [pc, #116]	; (80078a0 <tcp_process+0x7cc>)
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60da      	str	r2, [r3, #12]
 8007832:	4a1b      	ldr	r2, [pc, #108]	; (80078a0 <tcp_process+0x7cc>)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	f002 fc56 	bl	800a0e8 <tcp_timer_needed>
      }
      break;
 800783c:	e026      	b.n	800788c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f93c 	bl	8007abc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007844:	4b17      	ldr	r3, [pc, #92]	; (80078a4 <tcp_process+0x7d0>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01f      	beq.n	8007890 <tcp_process+0x7bc>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007854:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <tcp_process+0x7d4>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	d119      	bne.n	8007890 <tcp_process+0x7bc>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d115      	bne.n	8007890 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007864:	4b11      	ldr	r3, [pc, #68]	; (80078ac <tcp_process+0x7d8>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f043 0310 	orr.w	r3, r3, #16
 800786c:	b2da      	uxtb	r2, r3
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <tcp_process+0x7d8>)
 8007870:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007872:	e00d      	b.n	8007890 <tcp_process+0x7bc>
    default:
      break;
 8007874:	bf00      	nop
 8007876:	e00c      	b.n	8007892 <tcp_process+0x7be>
      break;
 8007878:	bf00      	nop
 800787a:	e00a      	b.n	8007892 <tcp_process+0x7be>
      break;
 800787c:	bf00      	nop
 800787e:	e008      	b.n	8007892 <tcp_process+0x7be>
      break;
 8007880:	bf00      	nop
 8007882:	e006      	b.n	8007892 <tcp_process+0x7be>
      break;
 8007884:	bf00      	nop
 8007886:	e004      	b.n	8007892 <tcp_process+0x7be>
      break;
 8007888:	bf00      	nop
 800788a:	e002      	b.n	8007892 <tcp_process+0x7be>
      break;
 800788c:	bf00      	nop
 800788e:	e000      	b.n	8007892 <tcp_process+0x7be>
      break;
 8007890:	bf00      	nop
  }
  return ERR_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3724      	adds	r7, #36	; 0x24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd90      	pop	{r4, r7, pc}
 800789c:	20006888 	.word	0x20006888
 80078a0:	2000689c 	.word	0x2000689c
 80078a4:	200000f8 	.word	0x200000f8
 80078a8:	200000f0 	.word	0x200000f0
 80078ac:	200000f9 	.word	0x200000f9
 80078b0:	2000688c 	.word	0x2000688c

080078b4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80078b4:	b590      	push	{r4, r7, lr}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d106      	bne.n	80078d2 <tcp_oos_insert_segment+0x1e>
 80078c4:	4b3b      	ldr	r3, [pc, #236]	; (80079b4 <tcp_oos_insert_segment+0x100>)
 80078c6:	f240 421f 	movw	r2, #1055	; 0x41f
 80078ca:	493b      	ldr	r1, [pc, #236]	; (80079b8 <tcp_oos_insert_segment+0x104>)
 80078cc:	483b      	ldr	r0, [pc, #236]	; (80079bc <tcp_oos_insert_segment+0x108>)
 80078ce:	f005 fa0d 	bl	800ccec <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	899b      	ldrh	r3, [r3, #12]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fb fd6c 	bl	80033b8 <lwip_htons>
 80078e0:	4603      	mov	r3, r0
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d028      	beq.n	800793e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80078ec:	6838      	ldr	r0, [r7, #0]
 80078ee:	f7fe fa67 	bl	8005dc0 <tcp_segs_free>
    next = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	603b      	str	r3, [r7, #0]
 80078f6:	e056      	b.n	80079a6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	899b      	ldrh	r3, [r3, #12]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	4618      	mov	r0, r3
 8007902:	f7fb fd59 	bl	80033b8 <lwip_htons>
 8007906:	4603      	mov	r3, r0
 8007908:	b2db      	uxtb	r3, r3
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00d      	beq.n	800792e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	899b      	ldrh	r3, [r3, #12]
 8007918:	b29c      	uxth	r4, r3
 800791a:	2001      	movs	r0, #1
 800791c:	f7fb fd4c 	bl	80033b8 <lwip_htons>
 8007920:	4603      	mov	r3, r0
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	4322      	orrs	r2, r4
 800792a:	b292      	uxth	r2, r2
 800792c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7fe fa55 	bl	8005de8 <tcp_seg_free>
    while (next &&
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00e      	beq.n	8007962 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	891b      	ldrh	r3, [r3, #8]
 8007948:	461a      	mov	r2, r3
 800794a:	4b1d      	ldr	r3, [pc, #116]	; (80079c0 <tcp_oos_insert_segment+0x10c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	441a      	add	r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	8909      	ldrh	r1, [r1, #8]
 800795a:	440b      	add	r3, r1
 800795c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800795e:	2b00      	cmp	r3, #0
 8007960:	daca      	bge.n	80078f8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01e      	beq.n	80079a6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	891b      	ldrh	r3, [r3, #8]
 800796c:	461a      	mov	r2, r3
 800796e:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <tcp_oos_insert_segment+0x10c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	441a      	add	r2, r3
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800797c:	2b00      	cmp	r3, #0
 800797e:	dd12      	ble.n	80079a6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	b29a      	uxth	r2, r3
 8007988:	4b0d      	ldr	r3, [pc, #52]	; (80079c0 <tcp_oos_insert_segment+0x10c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	b29b      	uxth	r3, r3
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	b29a      	uxth	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	891b      	ldrh	r3, [r3, #8]
 800799e:	4619      	mov	r1, r3
 80079a0:	4610      	mov	r0, r2
 80079a2:	f7fc fe33 	bl	800460c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	601a      	str	r2, [r3, #0]
}
 80079ac:	bf00      	nop
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd90      	pop	{r4, r7, pc}
 80079b4:	0800ed78 	.word	0x0800ed78
 80079b8:	0800f038 	.word	0x0800f038
 80079bc:	0800edc4 	.word	0x0800edc4
 80079c0:	200000ec 	.word	0x200000ec

080079c4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80079c4:	b5b0      	push	{r4, r5, r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80079d2:	e03e      	b.n	8007a52 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fd f820 	bl	8004a28 <pbuf_clen>
 80079e8:	4603      	mov	r3, r0
 80079ea:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80079f2:	8a7a      	ldrh	r2, [r7, #18]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d906      	bls.n	8007a06 <tcp_free_acked_segments+0x42>
 80079f8:	4b2a      	ldr	r3, [pc, #168]	; (8007aa4 <tcp_free_acked_segments+0xe0>)
 80079fa:	f240 4257 	movw	r2, #1111	; 0x457
 80079fe:	492a      	ldr	r1, [pc, #168]	; (8007aa8 <tcp_free_acked_segments+0xe4>)
 8007a00:	482a      	ldr	r0, [pc, #168]	; (8007aac <tcp_free_acked_segments+0xe8>)
 8007a02:	f005 f973 	bl	800ccec <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8007a0c:	8a7b      	ldrh	r3, [r7, #18]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	891a      	ldrh	r2, [r3, #8]
 8007a1c:	4b24      	ldr	r3, [pc, #144]	; (8007ab0 <tcp_free_acked_segments+0xec>)
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	4413      	add	r3, r2
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	4b22      	ldr	r3, [pc, #136]	; (8007ab0 <tcp_free_acked_segments+0xec>)
 8007a26:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8007a28:	6978      	ldr	r0, [r7, #20]
 8007a2a:	f7fe f9dd 	bl	8005de8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00c      	beq.n	8007a52 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d109      	bne.n	8007a52 <tcp_free_acked_segments+0x8e>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d106      	bne.n	8007a52 <tcp_free_acked_segments+0x8e>
 8007a44:	4b17      	ldr	r3, [pc, #92]	; (8007aa4 <tcp_free_acked_segments+0xe0>)
 8007a46:	f240 4262 	movw	r2, #1122	; 0x462
 8007a4a:	491a      	ldr	r1, [pc, #104]	; (8007ab4 <tcp_free_acked_segments+0xf0>)
 8007a4c:	4817      	ldr	r0, [pc, #92]	; (8007aac <tcp_free_acked_segments+0xe8>)
 8007a4e:	f005 f94d 	bl	800ccec <iprintf>
  while (seg_list != NULL &&
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d020      	beq.n	8007a9a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fb fcbf 	bl	80033e2 <lwip_htonl>
 8007a64:	4604      	mov	r4, r0
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	891b      	ldrh	r3, [r3, #8]
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	899b      	ldrh	r3, [r3, #12]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fb fc9f 	bl	80033b8 <lwip_htons>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <tcp_free_acked_segments+0xc6>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <tcp_free_acked_segments+0xc8>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	442b      	add	r3, r5
 8007a8e:	18e2      	adds	r2, r4, r3
 8007a90:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <tcp_free_acked_segments+0xf4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dd9c      	ble.n	80079d4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8007aa4:	0800ed78 	.word	0x0800ed78
 8007aa8:	0800f060 	.word	0x0800f060
 8007aac:	0800edc4 	.word	0x0800edc4
 8007ab0:	200000f4 	.word	0x200000f4
 8007ab4:	0800f088 	.word	0x0800f088
 8007ab8:	200000f0 	.word	0x200000f0

08007abc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007abc:	b5b0      	push	{r4, r5, r7, lr}
 8007abe:	b094      	sub	sp, #80	; 0x50
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <tcp_receive+0x20>
 8007ace:	4ba6      	ldr	r3, [pc, #664]	; (8007d68 <tcp_receive+0x2ac>)
 8007ad0:	f240 427b 	movw	r2, #1147	; 0x47b
 8007ad4:	49a5      	ldr	r1, [pc, #660]	; (8007d6c <tcp_receive+0x2b0>)
 8007ad6:	48a6      	ldr	r0, [pc, #664]	; (8007d70 <tcp_receive+0x2b4>)
 8007ad8:	f005 f908 	bl	800ccec <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	7d1b      	ldrb	r3, [r3, #20]
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d806      	bhi.n	8007af2 <tcp_receive+0x36>
 8007ae4:	4ba0      	ldr	r3, [pc, #640]	; (8007d68 <tcp_receive+0x2ac>)
 8007ae6:	f240 427c 	movw	r2, #1148	; 0x47c
 8007aea:	49a2      	ldr	r1, [pc, #648]	; (8007d74 <tcp_receive+0x2b8>)
 8007aec:	48a0      	ldr	r0, [pc, #640]	; (8007d70 <tcp_receive+0x2b4>)
 8007aee:	f005 f8fd 	bl	800ccec <iprintf>

  if (flags & TCP_ACK) {
 8007af2:	4ba1      	ldr	r3, [pc, #644]	; (8007d78 <tcp_receive+0x2bc>)
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	f003 0310 	and.w	r3, r3, #16
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 8263 	beq.w	8007fc6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b06:	461a      	mov	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0c:	4413      	add	r3, r2
 8007b0e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b14:	4b99      	ldr	r3, [pc, #612]	; (8007d7c <tcp_receive+0x2c0>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	db1b      	blt.n	8007b56 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b22:	4b96      	ldr	r3, [pc, #600]	; (8007d7c <tcp_receive+0x2c0>)
 8007b24:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d106      	bne.n	8007b38 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b2e:	4b94      	ldr	r3, [pc, #592]	; (8007d80 <tcp_receive+0x2c4>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	db0e      	blt.n	8007b56 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b3c:	4b90      	ldr	r3, [pc, #576]	; (8007d80 <tcp_receive+0x2c4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d125      	bne.n	8007b90 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007b44:	4b8f      	ldr	r3, [pc, #572]	; (8007d84 <tcp_receive+0x2c8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	89db      	ldrh	r3, [r3, #14]
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d91c      	bls.n	8007b90 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007b56:	4b8b      	ldr	r3, [pc, #556]	; (8007d84 <tcp_receive+0x2c8>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	89db      	ldrh	r3, [r3, #14]
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d205      	bcs.n	8007b80 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8007b80:	4b7e      	ldr	r3, [pc, #504]	; (8007d7c <tcp_receive+0x2c0>)
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8007b88:	4b7d      	ldr	r3, [pc, #500]	; (8007d80 <tcp_receive+0x2c4>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007b90:	4b7b      	ldr	r3, [pc, #492]	; (8007d80 <tcp_receive+0x2c4>)
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	dc58      	bgt.n	8007c50 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8007b9e:	4b7a      	ldr	r3, [pc, #488]	; (8007d88 <tcp_receive+0x2cc>)
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d14b      	bne.n	8007c3e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8007bb0:	4413      	add	r3, r2
 8007bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d142      	bne.n	8007c3e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	db3d      	blt.n	8007c3e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bc6:	4b6e      	ldr	r3, [pc, #440]	; (8007d80 <tcp_receive+0x2c4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d137      	bne.n	8007c3e <tcp_receive+0x182>
              found_dupack = 1;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007bd8:	2bff      	cmp	r3, #255	; 0xff
 8007bda:	d007      	beq.n	8007bec <tcp_receive+0x130>
                ++pcb->dupacks;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007be2:	3301      	adds	r3, #1
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d91b      	bls.n	8007c2e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c00:	4413      	add	r3, r2
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d30a      	bcc.n	8007c24 <tcp_receive+0x168>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c18:	4413      	add	r3, r2
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007c22:	e004      	b.n	8007c2e <tcp_receive+0x172>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d902      	bls.n	8007c3e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 feed 	bl	8009a18 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8007c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f040 8160 	bne.w	8007f06 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c4e:	e15a      	b.n	8007f06 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007c50:	4b4b      	ldr	r3, [pc, #300]	; (8007d80 <tcp_receive+0x2c4>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f2c0 814d 	blt.w	8007efc <tcp_receive+0x440>
 8007c62:	4b47      	ldr	r3, [pc, #284]	; (8007d80 <tcp_receive+0x2c4>)
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f300 8145 	bgt.w	8007efc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	8b5b      	ldrh	r3, [r3, #26]
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d010      	beq.n	8007ca0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	8b5b      	ldrh	r3, [r3, #26]
 8007c82:	f023 0304 	bic.w	r3, r3, #4
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007cae:	10db      	asrs	r3, r3, #3
 8007cb0:	b21b      	sxth	r3, r3
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	4413      	add	r3, r2
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	b21a      	sxth	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8007cc8:	4b2d      	ldr	r3, [pc, #180]	; (8007d80 <tcp_receive+0x2c4>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8007ce0:	4b27      	ldr	r3, [pc, #156]	; (8007d80 <tcp_receive+0x2c4>)
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	7d1b      	ldrb	r3, [r3, #20]
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	f240 8096 	bls.w	8007e1e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d244      	bcs.n	8007d8c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	8b5b      	ldrh	r3, [r3, #26]
 8007d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <tcp_receive+0x256>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e000      	b.n	8007d14 <tcp_receive+0x258>
 8007d12:	2302      	movs	r3, #2
 8007d14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8007d18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d22:	fb12 f303 	smulbb	r3, r2, r3
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	bf28      	it	cs
 8007d2e:	4613      	movcs	r3, r2
 8007d30:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007d38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007d3a:	4413      	add	r3, r2
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d309      	bcc.n	8007d5c <tcp_receive+0x2a0>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007d4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007d50:	4413      	add	r3, r2
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007d5a:	e060      	b.n	8007e1e <tcp_receive+0x362>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007d66:	e05a      	b.n	8007e1e <tcp_receive+0x362>
 8007d68:	0800ed78 	.word	0x0800ed78
 8007d6c:	0800f0a8 	.word	0x0800f0a8
 8007d70:	0800edc4 	.word	0x0800edc4
 8007d74:	0800f0c4 	.word	0x0800f0c4
 8007d78:	200000f8 	.word	0x200000f8
 8007d7c:	200000ec 	.word	0x200000ec
 8007d80:	200000f0 	.word	0x200000f0
 8007d84:	200000dc 	.word	0x200000dc
 8007d88:	200000f6 	.word	0x200000f6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007d92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d94:	4413      	add	r3, r2
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d309      	bcc.n	8007db6 <tcp_receive+0x2fa>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007da8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007daa:	4413      	add	r3, r2
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007db4:	e004      	b.n	8007dc0 <tcp_receive+0x304>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d326      	bcc.n	8007e1e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007df0:	4413      	add	r3, r2
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d30a      	bcc.n	8007e14 <tcp_receive+0x358>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007e08:	4413      	add	r3, r2
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007e12:	e004      	b.n	8007e1e <tcp_receive+0x362>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e26:	4a98      	ldr	r2, [pc, #608]	; (8008088 <tcp_receive+0x5cc>)
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff fdcb 	bl	80079c4 <tcp_free_acked_segments>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3c:	4a93      	ldr	r2, [pc, #588]	; (800808c <tcp_receive+0x5d0>)
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff fdc0 	bl	80079c4 <tcp_free_acked_segments>
 8007e44:	4602      	mov	r2, r0
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e58:	861a      	strh	r2, [r3, #48]	; 0x30
 8007e5a:	e002      	b.n	8007e62 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d103      	bne.n	8007e78 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8007e7e:	4b84      	ldr	r3, [pc, #528]	; (8008090 <tcp_receive+0x5d4>)
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	4413      	add	r3, r2
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	8b5b      	ldrh	r3, [r3, #26]
 8007e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d035      	beq.n	8007f04 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d118      	bne.n	8007ed2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00c      	beq.n	8007ec2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fb fa94 	bl	80033e2 <lwip_htonl>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	dc20      	bgt.n	8007f04 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	8b5b      	ldrh	r3, [r3, #26]
 8007ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007ed0:	e018      	b.n	8007f04 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fb fa7f 	bl	80033e2 <lwip_htonl>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	1ae3      	subs	r3, r4, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dc0b      	bgt.n	8007f04 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	8b5b      	ldrh	r3, [r3, #26]
 8007ef0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007efa:	e003      	b.n	8007f04 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 ff83 	bl	8009e08 <tcp_send_empty_ack>
 8007f02:	e000      	b.n	8007f06 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007f04:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d05b      	beq.n	8007fc6 <tcp_receive+0x50a>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f12:	4b60      	ldr	r3, [pc, #384]	; (8008094 <tcp_receive+0x5d8>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	da54      	bge.n	8007fc6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007f1c:	4b5e      	ldr	r3, [pc, #376]	; (8008098 <tcp_receive+0x5dc>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8007f30:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007f3a:	10db      	asrs	r3, r3, #3
 8007f3c:	b21b      	sxth	r3, r3
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f54:	4413      	add	r3, r2
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	b21a      	sxth	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8007f5e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da05      	bge.n	8007f72 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8007f66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f6a:	425b      	negs	r3, r3
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8007f72:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007f7c:	109b      	asrs	r3, r3, #2
 8007f7e:	b21b      	sxth	r3, r3
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f96:	4413      	add	r3, r2
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	b21a      	sxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007fa6:	10db      	asrs	r3, r3, #3
 8007fa8:	b21b      	sxth	r3, r3
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	b21a      	sxth	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8007fc6:	4b35      	ldr	r3, [pc, #212]	; (800809c <tcp_receive+0x5e0>)
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 84e1 	beq.w	8008992 <tcp_receive+0xed6>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7d1b      	ldrb	r3, [r3, #20]
 8007fd4:	2b06      	cmp	r3, #6
 8007fd6:	f200 84dc 	bhi.w	8008992 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fde:	4b30      	ldr	r3, [pc, #192]	; (80080a0 <tcp_receive+0x5e4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f2c0 808e 	blt.w	8008108 <tcp_receive+0x64c>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ff0:	4b2a      	ldr	r3, [pc, #168]	; (800809c <tcp_receive+0x5e0>)
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4b2a      	ldr	r3, [pc, #168]	; (80080a0 <tcp_receive+0x5e4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	440b      	add	r3, r1
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	3301      	adds	r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	f300 8081 	bgt.w	8008108 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008006:	4b27      	ldr	r3, [pc, #156]	; (80080a4 <tcp_receive+0x5e8>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008010:	4b23      	ldr	r3, [pc, #140]	; (80080a0 <tcp_receive+0x5e4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008018:	4b22      	ldr	r3, [pc, #136]	; (80080a4 <tcp_receive+0x5e8>)
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d106      	bne.n	800802e <tcp_receive+0x572>
 8008020:	4b21      	ldr	r3, [pc, #132]	; (80080a8 <tcp_receive+0x5ec>)
 8008022:	f240 5294 	movw	r2, #1428	; 0x594
 8008026:	4921      	ldr	r1, [pc, #132]	; (80080ac <tcp_receive+0x5f0>)
 8008028:	4821      	ldr	r0, [pc, #132]	; (80080b0 <tcp_receive+0x5f4>)
 800802a:	f004 fe5f 	bl	800ccec <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008034:	4293      	cmp	r3, r2
 8008036:	d906      	bls.n	8008046 <tcp_receive+0x58a>
 8008038:	4b1b      	ldr	r3, [pc, #108]	; (80080a8 <tcp_receive+0x5ec>)
 800803a:	f240 5295 	movw	r2, #1429	; 0x595
 800803e:	491d      	ldr	r1, [pc, #116]	; (80080b4 <tcp_receive+0x5f8>)
 8008040:	481b      	ldr	r0, [pc, #108]	; (80080b0 <tcp_receive+0x5f4>)
 8008042:	f004 fe53 	bl	800ccec <iprintf>
      off = (u16_t)off32;
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800804c:	4b15      	ldr	r3, [pc, #84]	; (80080a4 <tcp_receive+0x5e8>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	891b      	ldrh	r3, [r3, #8]
 8008052:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008056:	429a      	cmp	r2, r3
 8008058:	d906      	bls.n	8008068 <tcp_receive+0x5ac>
 800805a:	4b13      	ldr	r3, [pc, #76]	; (80080a8 <tcp_receive+0x5ec>)
 800805c:	f240 5297 	movw	r2, #1431	; 0x597
 8008060:	4915      	ldr	r1, [pc, #84]	; (80080b8 <tcp_receive+0x5fc>)
 8008062:	4813      	ldr	r0, [pc, #76]	; (80080b0 <tcp_receive+0x5f4>)
 8008064:	f004 fe42 	bl	800ccec <iprintf>
      inseg.len -= off;
 8008068:	4b0e      	ldr	r3, [pc, #56]	; (80080a4 <tcp_receive+0x5e8>)
 800806a:	891a      	ldrh	r2, [r3, #8]
 800806c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	b29a      	uxth	r2, r3
 8008074:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <tcp_receive+0x5e8>)
 8008076:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008078:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <tcp_receive+0x5e8>)
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	891a      	ldrh	r2, [r3, #8]
 800807e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008086:	e029      	b.n	80080dc <tcp_receive+0x620>
 8008088:	0800f0e0 	.word	0x0800f0e0
 800808c:	0800f0e8 	.word	0x0800f0e8
 8008090:	200000f4 	.word	0x200000f4
 8008094:	200000f0 	.word	0x200000f0
 8008098:	20006890 	.word	0x20006890
 800809c:	200000f6 	.word	0x200000f6
 80080a0:	200000ec 	.word	0x200000ec
 80080a4:	200000cc 	.word	0x200000cc
 80080a8:	0800ed78 	.word	0x0800ed78
 80080ac:	0800f0f0 	.word	0x0800f0f0
 80080b0:	0800edc4 	.word	0x0800edc4
 80080b4:	0800f100 	.word	0x0800f100
 80080b8:	0800f110 	.word	0x0800f110
        off -= p->len;
 80080bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080be:	895b      	ldrh	r3, [r3, #10]
 80080c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80080ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80080ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80080d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080d2:	2200      	movs	r2, #0
 80080d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80080d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80080dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080de:	895b      	ldrh	r3, [r3, #10]
 80080e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d8e9      	bhi.n	80080bc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80080e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80080ec:	4619      	mov	r1, r3
 80080ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80080f0:	f7fc fb8c 	bl	800480c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	4a91      	ldr	r2, [pc, #580]	; (8008340 <tcp_receive+0x884>)
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	4b91      	ldr	r3, [pc, #580]	; (8008344 <tcp_receive+0x888>)
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	4a8f      	ldr	r2, [pc, #572]	; (8008340 <tcp_receive+0x884>)
 8008102:	6812      	ldr	r2, [r2, #0]
 8008104:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008106:	e00d      	b.n	8008124 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008108:	4b8d      	ldr	r3, [pc, #564]	; (8008340 <tcp_receive+0x884>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	da06      	bge.n	8008124 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	8b5b      	ldrh	r3, [r3, #26]
 800811a:	f043 0302 	orr.w	r3, r3, #2
 800811e:	b29a      	uxth	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008124:	4b86      	ldr	r3, [pc, #536]	; (8008340 <tcp_receive+0x884>)
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	f2c0 842a 	blt.w	8008988 <tcp_receive+0xecc>
 8008134:	4b82      	ldr	r3, [pc, #520]	; (8008340 <tcp_receive+0x884>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008140:	440b      	add	r3, r1
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	3301      	adds	r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	f300 841e 	bgt.w	8008988 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008150:	4b7b      	ldr	r3, [pc, #492]	; (8008340 <tcp_receive+0x884>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	f040 829a 	bne.w	800868e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800815a:	4b7a      	ldr	r3, [pc, #488]	; (8008344 <tcp_receive+0x888>)
 800815c:	891c      	ldrh	r4, [r3, #8]
 800815e:	4b79      	ldr	r3, [pc, #484]	; (8008344 <tcp_receive+0x888>)
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	899b      	ldrh	r3, [r3, #12]
 8008164:	b29b      	uxth	r3, r3
 8008166:	4618      	mov	r0, r3
 8008168:	f7fb f926 	bl	80033b8 <lwip_htons>
 800816c:	4603      	mov	r3, r0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <tcp_receive+0x6c0>
 8008178:	2301      	movs	r3, #1
 800817a:	e000      	b.n	800817e <tcp_receive+0x6c2>
 800817c:	2300      	movs	r3, #0
 800817e:	4423      	add	r3, r4
 8008180:	b29a      	uxth	r2, r3
 8008182:	4b71      	ldr	r3, [pc, #452]	; (8008348 <tcp_receive+0x88c>)
 8008184:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800818a:	4b6f      	ldr	r3, [pc, #444]	; (8008348 <tcp_receive+0x88c>)
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d275      	bcs.n	800827e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008192:	4b6c      	ldr	r3, [pc, #432]	; (8008344 <tcp_receive+0x888>)
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	899b      	ldrh	r3, [r3, #12]
 8008198:	b29b      	uxth	r3, r3
 800819a:	4618      	mov	r0, r3
 800819c:	f7fb f90c 	bl	80033b8 <lwip_htons>
 80081a0:	4603      	mov	r3, r0
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01f      	beq.n	80081ec <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80081ac:	4b65      	ldr	r3, [pc, #404]	; (8008344 <tcp_receive+0x888>)
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	899b      	ldrh	r3, [r3, #12]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	b21b      	sxth	r3, r3
 80081b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80081ba:	b21c      	sxth	r4, r3
 80081bc:	4b61      	ldr	r3, [pc, #388]	; (8008344 <tcp_receive+0x888>)
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	899b      	ldrh	r3, [r3, #12]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fb f8f7 	bl	80033b8 <lwip_htons>
 80081ca:	4603      	mov	r3, r0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fb f8ee 	bl	80033b8 <lwip_htons>
 80081dc:	4603      	mov	r3, r0
 80081de:	b21b      	sxth	r3, r3
 80081e0:	4323      	orrs	r3, r4
 80081e2:	b21a      	sxth	r2, r3
 80081e4:	4b57      	ldr	r3, [pc, #348]	; (8008344 <tcp_receive+0x888>)
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	b292      	uxth	r2, r2
 80081ea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80081f0:	4b54      	ldr	r3, [pc, #336]	; (8008344 <tcp_receive+0x888>)
 80081f2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80081f4:	4b53      	ldr	r3, [pc, #332]	; (8008344 <tcp_receive+0x888>)
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	899b      	ldrh	r3, [r3, #12]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fb f8db 	bl	80033b8 <lwip_htons>
 8008202:	4603      	mov	r3, r0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d005      	beq.n	800821a <tcp_receive+0x75e>
            inseg.len -= 1;
 800820e:	4b4d      	ldr	r3, [pc, #308]	; (8008344 <tcp_receive+0x888>)
 8008210:	891b      	ldrh	r3, [r3, #8]
 8008212:	3b01      	subs	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	4b4b      	ldr	r3, [pc, #300]	; (8008344 <tcp_receive+0x888>)
 8008218:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800821a:	4b4a      	ldr	r3, [pc, #296]	; (8008344 <tcp_receive+0x888>)
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	4b49      	ldr	r3, [pc, #292]	; (8008344 <tcp_receive+0x888>)
 8008220:	891b      	ldrh	r3, [r3, #8]
 8008222:	4619      	mov	r1, r3
 8008224:	4610      	mov	r0, r2
 8008226:	f7fc f9f1 	bl	800460c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800822a:	4b46      	ldr	r3, [pc, #280]	; (8008344 <tcp_receive+0x888>)
 800822c:	891c      	ldrh	r4, [r3, #8]
 800822e:	4b45      	ldr	r3, [pc, #276]	; (8008344 <tcp_receive+0x888>)
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	899b      	ldrh	r3, [r3, #12]
 8008234:	b29b      	uxth	r3, r3
 8008236:	4618      	mov	r0, r3
 8008238:	f7fb f8be 	bl	80033b8 <lwip_htons>
 800823c:	4603      	mov	r3, r0
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <tcp_receive+0x790>
 8008248:	2301      	movs	r3, #1
 800824a:	e000      	b.n	800824e <tcp_receive+0x792>
 800824c:	2300      	movs	r3, #0
 800824e:	4423      	add	r3, r4
 8008250:	b29a      	uxth	r2, r3
 8008252:	4b3d      	ldr	r3, [pc, #244]	; (8008348 <tcp_receive+0x88c>)
 8008254:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008256:	4b3c      	ldr	r3, [pc, #240]	; (8008348 <tcp_receive+0x88c>)
 8008258:	881b      	ldrh	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	4b38      	ldr	r3, [pc, #224]	; (8008340 <tcp_receive+0x884>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	441a      	add	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800826a:	440b      	add	r3, r1
 800826c:	429a      	cmp	r2, r3
 800826e:	d006      	beq.n	800827e <tcp_receive+0x7c2>
 8008270:	4b36      	ldr	r3, [pc, #216]	; (800834c <tcp_receive+0x890>)
 8008272:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8008276:	4936      	ldr	r1, [pc, #216]	; (8008350 <tcp_receive+0x894>)
 8008278:	4836      	ldr	r0, [pc, #216]	; (8008354 <tcp_receive+0x898>)
 800827a:	f004 fd37 	bl	800ccec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 80e7 	beq.w	8008456 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008288:	4b2e      	ldr	r3, [pc, #184]	; (8008344 <tcp_receive+0x888>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	899b      	ldrh	r3, [r3, #12]
 800828e:	b29b      	uxth	r3, r3
 8008290:	4618      	mov	r0, r3
 8008292:	f7fb f891 	bl	80033b8 <lwip_htons>
 8008296:	4603      	mov	r3, r0
 8008298:	b2db      	uxtb	r3, r3
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d010      	beq.n	80082c4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80082a2:	e00a      	b.n	80082ba <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7fd fd97 	bl	8005de8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1f0      	bne.n	80082a4 <tcp_receive+0x7e8>
 80082c2:	e0c8      	b.n	8008456 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80082ca:	e052      	b.n	8008372 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80082cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	899b      	ldrh	r3, [r3, #12]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fb f86f 	bl	80033b8 <lwip_htons>
 80082da:	4603      	mov	r3, r0
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d03d      	beq.n	8008362 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80082e6:	4b17      	ldr	r3, [pc, #92]	; (8008344 <tcp_receive+0x888>)
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	899b      	ldrh	r3, [r3, #12]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fb f862 	bl	80033b8 <lwip_htons>
 80082f4:	4603      	mov	r3, r0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d130      	bne.n	8008362 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008300:	4b10      	ldr	r3, [pc, #64]	; (8008344 <tcp_receive+0x888>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	899b      	ldrh	r3, [r3, #12]
 8008306:	b29c      	uxth	r4, r3
 8008308:	2001      	movs	r0, #1
 800830a:	f7fb f855 	bl	80033b8 <lwip_htons>
 800830e:	4603      	mov	r3, r0
 8008310:	461a      	mov	r2, r3
 8008312:	4b0c      	ldr	r3, [pc, #48]	; (8008344 <tcp_receive+0x888>)
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	4322      	orrs	r2, r4
 8008318:	b292      	uxth	r2, r2
 800831a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800831c:	4b09      	ldr	r3, [pc, #36]	; (8008344 <tcp_receive+0x888>)
 800831e:	891c      	ldrh	r4, [r3, #8]
 8008320:	4b08      	ldr	r3, [pc, #32]	; (8008344 <tcp_receive+0x888>)
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	899b      	ldrh	r3, [r3, #12]
 8008326:	b29b      	uxth	r3, r3
 8008328:	4618      	mov	r0, r3
 800832a:	f7fb f845 	bl	80033b8 <lwip_htons>
 800832e:	4603      	mov	r3, r0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00e      	beq.n	8008358 <tcp_receive+0x89c>
 800833a:	2301      	movs	r3, #1
 800833c:	e00d      	b.n	800835a <tcp_receive+0x89e>
 800833e:	bf00      	nop
 8008340:	200000ec 	.word	0x200000ec
 8008344:	200000cc 	.word	0x200000cc
 8008348:	200000f6 	.word	0x200000f6
 800834c:	0800ed78 	.word	0x0800ed78
 8008350:	0800f120 	.word	0x0800f120
 8008354:	0800edc4 	.word	0x0800edc4
 8008358:	2300      	movs	r3, #0
 800835a:	4423      	add	r3, r4
 800835c:	b29a      	uxth	r2, r3
 800835e:	4b98      	ldr	r3, [pc, #608]	; (80085c0 <tcp_receive+0xb04>)
 8008360:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008364:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800836c:	6938      	ldr	r0, [r7, #16]
 800836e:	f7fd fd3b 	bl	8005de8 <tcp_seg_free>
            while (next &&
 8008372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00e      	beq.n	8008396 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008378:	4b91      	ldr	r3, [pc, #580]	; (80085c0 <tcp_receive+0xb04>)
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	4b91      	ldr	r3, [pc, #580]	; (80085c4 <tcp_receive+0xb08>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	441a      	add	r2, r3
 8008384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800838c:	8909      	ldrh	r1, [r1, #8]
 800838e:	440b      	add	r3, r1
 8008390:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008392:	2b00      	cmp	r3, #0
 8008394:	da9a      	bge.n	80082cc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008398:	2b00      	cmp	r3, #0
 800839a:	d059      	beq.n	8008450 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800839c:	4b88      	ldr	r3, [pc, #544]	; (80085c0 <tcp_receive+0xb04>)
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	4b88      	ldr	r3, [pc, #544]	; (80085c4 <tcp_receive+0xb08>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	441a      	add	r2, r3
 80083a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	1ad3      	subs	r3, r2, r3
            if (next &&
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	dd4d      	ble.n	8008450 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80083b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	4b81      	ldr	r3, [pc, #516]	; (80085c4 <tcp_receive+0xb08>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	4b80      	ldr	r3, [pc, #512]	; (80085c8 <tcp_receive+0xb0c>)
 80083c8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80083ca:	4b7f      	ldr	r3, [pc, #508]	; (80085c8 <tcp_receive+0xb0c>)
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	899b      	ldrh	r3, [r3, #12]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fa fff0 	bl	80033b8 <lwip_htons>
 80083d8:	4603      	mov	r3, r0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <tcp_receive+0x934>
                inseg.len -= 1;
 80083e4:	4b78      	ldr	r3, [pc, #480]	; (80085c8 <tcp_receive+0xb0c>)
 80083e6:	891b      	ldrh	r3, [r3, #8]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	4b76      	ldr	r3, [pc, #472]	; (80085c8 <tcp_receive+0xb0c>)
 80083ee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80083f0:	4b75      	ldr	r3, [pc, #468]	; (80085c8 <tcp_receive+0xb0c>)
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	4b74      	ldr	r3, [pc, #464]	; (80085c8 <tcp_receive+0xb0c>)
 80083f6:	891b      	ldrh	r3, [r3, #8]
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f7fc f906 	bl	800460c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008400:	4b71      	ldr	r3, [pc, #452]	; (80085c8 <tcp_receive+0xb0c>)
 8008402:	891c      	ldrh	r4, [r3, #8]
 8008404:	4b70      	ldr	r3, [pc, #448]	; (80085c8 <tcp_receive+0xb0c>)
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	899b      	ldrh	r3, [r3, #12]
 800840a:	b29b      	uxth	r3, r3
 800840c:	4618      	mov	r0, r3
 800840e:	f7fa ffd3 	bl	80033b8 <lwip_htons>
 8008412:	4603      	mov	r3, r0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <tcp_receive+0x966>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <tcp_receive+0x968>
 8008422:	2300      	movs	r3, #0
 8008424:	4423      	add	r3, r4
 8008426:	b29a      	uxth	r2, r3
 8008428:	4b65      	ldr	r3, [pc, #404]	; (80085c0 <tcp_receive+0xb04>)
 800842a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800842c:	4b64      	ldr	r3, [pc, #400]	; (80085c0 <tcp_receive+0xb04>)
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	4b64      	ldr	r3, [pc, #400]	; (80085c4 <tcp_receive+0xb08>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	441a      	add	r2, r3
 8008438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	429a      	cmp	r2, r3
 8008440:	d006      	beq.n	8008450 <tcp_receive+0x994>
 8008442:	4b62      	ldr	r3, [pc, #392]	; (80085cc <tcp_receive+0xb10>)
 8008444:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8008448:	4961      	ldr	r1, [pc, #388]	; (80085d0 <tcp_receive+0xb14>)
 800844a:	4862      	ldr	r0, [pc, #392]	; (80085d4 <tcp_receive+0xb18>)
 800844c:	f004 fc4e 	bl	800ccec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008454:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008456:	4b5a      	ldr	r3, [pc, #360]	; (80085c0 <tcp_receive+0xb04>)
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	4b59      	ldr	r3, [pc, #356]	; (80085c4 <tcp_receive+0xb08>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	441a      	add	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800846a:	4b55      	ldr	r3, [pc, #340]	; (80085c0 <tcp_receive+0xb04>)
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	429a      	cmp	r2, r3
 8008470:	d206      	bcs.n	8008480 <tcp_receive+0x9c4>
 8008472:	4b56      	ldr	r3, [pc, #344]	; (80085cc <tcp_receive+0xb10>)
 8008474:	f240 6207 	movw	r2, #1543	; 0x607
 8008478:	4957      	ldr	r1, [pc, #348]	; (80085d8 <tcp_receive+0xb1c>)
 800847a:	4856      	ldr	r0, [pc, #344]	; (80085d4 <tcp_receive+0xb18>)
 800847c:	f004 fc36 	bl	800ccec <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008484:	4b4e      	ldr	r3, [pc, #312]	; (80085c0 <tcp_receive+0xb04>)
 8008486:	881b      	ldrh	r3, [r3, #0]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	b29a      	uxth	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7fc ffcd 	bl	8005430 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008496:	4b4c      	ldr	r3, [pc, #304]	; (80085c8 <tcp_receive+0xb0c>)
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	891b      	ldrh	r3, [r3, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d006      	beq.n	80084ae <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80084a0:	4b49      	ldr	r3, [pc, #292]	; (80085c8 <tcp_receive+0xb0c>)
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	4a4d      	ldr	r2, [pc, #308]	; (80085dc <tcp_receive+0xb20>)
 80084a6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80084a8:	4b47      	ldr	r3, [pc, #284]	; (80085c8 <tcp_receive+0xb0c>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80084ae:	4b46      	ldr	r3, [pc, #280]	; (80085c8 <tcp_receive+0xb0c>)
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	899b      	ldrh	r3, [r3, #12]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fa ff7e 	bl	80033b8 <lwip_htons>
 80084bc:	4603      	mov	r3, r0
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 80b8 	beq.w	800863a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80084ca:	4b45      	ldr	r3, [pc, #276]	; (80085e0 <tcp_receive+0xb24>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	f043 0320 	orr.w	r3, r3, #32
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	4b42      	ldr	r3, [pc, #264]	; (80085e0 <tcp_receive+0xb24>)
 80084d6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80084d8:	e0af      	b.n	800863a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084de:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	4a36      	ldr	r2, [pc, #216]	; (80085c4 <tcp_receive+0xb08>)
 80084ea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	891b      	ldrh	r3, [r3, #8]
 80084f0:	461c      	mov	r4, r3
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	899b      	ldrh	r3, [r3, #12]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fa ff5c 	bl	80033b8 <lwip_htons>
 8008500:	4603      	mov	r3, r0
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <tcp_receive+0xa54>
 800850c:	2301      	movs	r3, #1
 800850e:	e000      	b.n	8008512 <tcp_receive+0xa56>
 8008510:	2300      	movs	r3, #0
 8008512:	191a      	adds	r2, r3, r4
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	441a      	add	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008522:	461c      	mov	r4, r3
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	891b      	ldrh	r3, [r3, #8]
 8008528:	461d      	mov	r5, r3
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	899b      	ldrh	r3, [r3, #12]
 8008530:	b29b      	uxth	r3, r3
 8008532:	4618      	mov	r0, r3
 8008534:	f7fa ff40 	bl	80033b8 <lwip_htons>
 8008538:	4603      	mov	r3, r0
 800853a:	b2db      	uxtb	r3, r3
 800853c:	f003 0303 	and.w	r3, r3, #3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <tcp_receive+0xa8c>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <tcp_receive+0xa8e>
 8008548:	2300      	movs	r3, #0
 800854a:	442b      	add	r3, r5
 800854c:	429c      	cmp	r4, r3
 800854e:	d206      	bcs.n	800855e <tcp_receive+0xaa2>
 8008550:	4b1e      	ldr	r3, [pc, #120]	; (80085cc <tcp_receive+0xb10>)
 8008552:	f240 622c 	movw	r2, #1580	; 0x62c
 8008556:	4923      	ldr	r1, [pc, #140]	; (80085e4 <tcp_receive+0xb28>)
 8008558:	481e      	ldr	r0, [pc, #120]	; (80085d4 <tcp_receive+0xb18>)
 800855a:	f004 fbc7 	bl	800ccec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	891b      	ldrh	r3, [r3, #8]
 8008562:	461c      	mov	r4, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	899b      	ldrh	r3, [r3, #12]
 800856a:	b29b      	uxth	r3, r3
 800856c:	4618      	mov	r0, r3
 800856e:	f7fa ff23 	bl	80033b8 <lwip_htons>
 8008572:	4603      	mov	r3, r0
 8008574:	b2db      	uxtb	r3, r3
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <tcp_receive+0xac6>
 800857e:	2301      	movs	r3, #1
 8008580:	e000      	b.n	8008584 <tcp_receive+0xac8>
 8008582:	2300      	movs	r3, #0
 8008584:	1919      	adds	r1, r3, r4
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800858a:	b28b      	uxth	r3, r1
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	b29a      	uxth	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7fc ff4b 	bl	8005430 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	891b      	ldrh	r3, [r3, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d028      	beq.n	80085f6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80085a4:	4b0d      	ldr	r3, [pc, #52]	; (80085dc <tcp_receive+0xb20>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01d      	beq.n	80085e8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80085ac:	4b0b      	ldr	r3, [pc, #44]	; (80085dc <tcp_receive+0xb20>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	4619      	mov	r1, r3
 80085b6:	4610      	mov	r0, r2
 80085b8:	f7fc fa70 	bl	8004a9c <pbuf_cat>
 80085bc:	e018      	b.n	80085f0 <tcp_receive+0xb34>
 80085be:	bf00      	nop
 80085c0:	200000f6 	.word	0x200000f6
 80085c4:	200000ec 	.word	0x200000ec
 80085c8:	200000cc 	.word	0x200000cc
 80085cc:	0800ed78 	.word	0x0800ed78
 80085d0:	0800f158 	.word	0x0800f158
 80085d4:	0800edc4 	.word	0x0800edc4
 80085d8:	0800f194 	.word	0x0800f194
 80085dc:	200000fc 	.word	0x200000fc
 80085e0:	200000f9 	.word	0x200000f9
 80085e4:	0800f1b4 	.word	0x0800f1b4
            } else {
              recv_data = cseg->p;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	4a70      	ldr	r2, [pc, #448]	; (80087b0 <tcp_receive+0xcf4>)
 80085ee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2200      	movs	r2, #0
 80085f4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	899b      	ldrh	r3, [r3, #12]
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fa feda 	bl	80033b8 <lwip_htons>
 8008604:	4603      	mov	r3, r0
 8008606:	b2db      	uxtb	r3, r3
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00d      	beq.n	800862c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008610:	4b68      	ldr	r3, [pc, #416]	; (80087b4 <tcp_receive+0xcf8>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	f043 0320 	orr.w	r3, r3, #32
 8008618:	b2da      	uxtb	r2, r3
 800861a:	4b66      	ldr	r3, [pc, #408]	; (80087b4 <tcp_receive+0xcf8>)
 800861c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	7d1b      	ldrb	r3, [r3, #20]
 8008622:	2b04      	cmp	r3, #4
 8008624:	d102      	bne.n	800862c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2207      	movs	r2, #7
 800862a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008634:	68b8      	ldr	r0, [r7, #8]
 8008636:	f7fd fbd7 	bl	8005de8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800863e:	2b00      	cmp	r3, #0
 8008640:	d008      	beq.n	8008654 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800864e:	429a      	cmp	r2, r3
 8008650:	f43f af43 	beq.w	80084da <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	8b5b      	ldrh	r3, [r3, #26]
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00e      	beq.n	800867e <tcp_receive+0xbc2>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	8b5b      	ldrh	r3, [r3, #26]
 8008664:	f023 0301 	bic.w	r3, r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	835a      	strh	r2, [r3, #26]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	8b5b      	ldrh	r3, [r3, #26]
 8008672:	f043 0302 	orr.w	r3, r3, #2
 8008676:	b29a      	uxth	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800867c:	e188      	b.n	8008990 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	8b5b      	ldrh	r3, [r3, #26]
 8008682:	f043 0301 	orr.w	r3, r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800868c:	e180      	b.n	8008990 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008696:	4848      	ldr	r0, [pc, #288]	; (80087b8 <tcp_receive+0xcfc>)
 8008698:	f7fd fbbe 	bl	8005e18 <tcp_seg_copy>
 800869c:	4602      	mov	r2, r0
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	675a      	str	r2, [r3, #116]	; 0x74
 80086a2:	e16d      	b.n	8008980 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80086a4:	2300      	movs	r3, #0
 80086a6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80086ae:	e157      	b.n	8008960 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	4b41      	ldr	r3, [pc, #260]	; (80087bc <tcp_receive+0xd00>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d11d      	bne.n	80086fa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80086be:	4b3e      	ldr	r3, [pc, #248]	; (80087b8 <tcp_receive+0xcfc>)
 80086c0:	891a      	ldrh	r2, [r3, #8]
 80086c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c4:	891b      	ldrh	r3, [r3, #8]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	f240 814f 	bls.w	800896a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80086cc:	483a      	ldr	r0, [pc, #232]	; (80087b8 <tcp_receive+0xcfc>)
 80086ce:	f7fd fba3 	bl	8005e18 <tcp_seg_copy>
 80086d2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 8149 	beq.w	800896e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80086dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <tcp_receive+0xc2e>
                    prev->next = cseg;
 80086e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	e002      	b.n	80086f0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80086f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086f2:	6978      	ldr	r0, [r7, #20]
 80086f4:	f7ff f8de 	bl	80078b4 <tcp_oos_insert_segment>
                }
                break;
 80086f8:	e139      	b.n	800896e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80086fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d117      	bne.n	8008730 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008700:	4b2e      	ldr	r3, [pc, #184]	; (80087bc <tcp_receive+0xd00>)
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	da57      	bge.n	80087c0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008710:	4829      	ldr	r0, [pc, #164]	; (80087b8 <tcp_receive+0xcfc>)
 8008712:	f7fd fb81 	bl	8005e18 <tcp_seg_copy>
 8008716:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 8129 	beq.w	8008972 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008726:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008728:	69b8      	ldr	r0, [r7, #24]
 800872a:	f7ff f8c3 	bl	80078b4 <tcp_oos_insert_segment>
                  }
                  break;
 800872e:	e120      	b.n	8008972 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008730:	4b22      	ldr	r3, [pc, #136]	; (80087bc <tcp_receive+0xd00>)
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	db3e      	blt.n	80087c0 <tcp_receive+0xd04>
 8008742:	4b1e      	ldr	r3, [pc, #120]	; (80087bc <tcp_receive+0xd00>)
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	3301      	adds	r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	dc35      	bgt.n	80087c0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008754:	4818      	ldr	r0, [pc, #96]	; (80087b8 <tcp_receive+0xcfc>)
 8008756:	f7fd fb5f 	bl	8005e18 <tcp_seg_copy>
 800875a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 8109 	beq.w	8008976 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800876c:	8912      	ldrh	r2, [r2, #8]
 800876e:	441a      	add	r2, r3
 8008770:	4b12      	ldr	r3, [pc, #72]	; (80087bc <tcp_receive+0xd00>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	dd12      	ble.n	80087a0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800877a:	4b10      	ldr	r3, [pc, #64]	; (80087bc <tcp_receive+0xd00>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	b29a      	uxth	r2, r3
 8008780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	b29b      	uxth	r3, r3
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	b29a      	uxth	r2, r3
 800878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008796:	891b      	ldrh	r3, [r3, #8]
 8008798:	4619      	mov	r1, r3
 800879a:	4610      	mov	r0, r2
 800879c:	f7fb ff36 	bl	800460c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80087a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80087a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087a8:	69f8      	ldr	r0, [r7, #28]
 80087aa:	f7ff f883 	bl	80078b4 <tcp_oos_insert_segment>
                  }
                  break;
 80087ae:	e0e2      	b.n	8008976 <tcp_receive+0xeba>
 80087b0:	200000fc 	.word	0x200000fc
 80087b4:	200000f9 	.word	0x200000f9
 80087b8:	200000cc 	.word	0x200000cc
 80087bc:	200000ec 	.word	0x200000ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f040 80c6 	bne.w	800895a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80087ce:	4b80      	ldr	r3, [pc, #512]	; (80089d0 <tcp_receive+0xf14>)
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f340 80bd 	ble.w	800895a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	899b      	ldrh	r3, [r3, #12]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fa fde5 	bl	80033b8 <lwip_htons>
 80087ee:	4603      	mov	r3, r0
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f040 80bf 	bne.w	800897a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80087fc:	4875      	ldr	r0, [pc, #468]	; (80089d4 <tcp_receive+0xf18>)
 80087fe:	f7fd fb0b 	bl	8005e18 <tcp_seg_copy>
 8008802:	4602      	mov	r2, r0
 8008804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008806:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 80b6 	beq.w	800897e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800881a:	8912      	ldrh	r2, [r2, #8]
 800881c:	441a      	add	r2, r3
 800881e:	4b6c      	ldr	r3, [pc, #432]	; (80089d0 <tcp_receive+0xf14>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	dd12      	ble.n	800884e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008828:	4b69      	ldr	r3, [pc, #420]	; (80089d0 <tcp_receive+0xf14>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	b29a      	uxth	r2, r3
 800882e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	b29b      	uxth	r3, r3
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	b29a      	uxth	r2, r3
 800883a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	891b      	ldrh	r3, [r3, #8]
 8008846:	4619      	mov	r1, r3
 8008848:	4610      	mov	r0, r2
 800884a:	f7fb fedf 	bl	800460c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800884e:	4b62      	ldr	r3, [pc, #392]	; (80089d8 <tcp_receive+0xf1c>)
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	4b5e      	ldr	r3, [pc, #376]	; (80089d0 <tcp_receive+0xf14>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	441a      	add	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008862:	440b      	add	r3, r1
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	f340 8089 	ble.w	800897e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	899b      	ldrh	r3, [r3, #12]
 8008874:	b29b      	uxth	r3, r3
 8008876:	4618      	mov	r0, r3
 8008878:	f7fa fd9e 	bl	80033b8 <lwip_htons>
 800887c:	4603      	mov	r3, r0
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d022      	beq.n	80088ce <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	899b      	ldrh	r3, [r3, #12]
 8008890:	b29b      	uxth	r3, r3
 8008892:	b21b      	sxth	r3, r3
 8008894:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008898:	b21c      	sxth	r4, r3
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	899b      	ldrh	r3, [r3, #12]
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fa fd87 	bl	80033b8 <lwip_htons>
 80088aa:	4603      	mov	r3, r0
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fa fd7e 	bl	80033b8 <lwip_htons>
 80088bc:	4603      	mov	r3, r0
 80088be:	b21b      	sxth	r3, r3
 80088c0:	4323      	orrs	r3, r4
 80088c2:	b21a      	sxth	r2, r3
 80088c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	b292      	uxth	r2, r2
 80088cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d8:	4413      	add	r3, r2
 80088da:	b299      	uxth	r1, r3
 80088dc:	4b3c      	ldr	r3, [pc, #240]	; (80089d0 <tcp_receive+0xf14>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	1a8a      	subs	r2, r1, r2
 80088e8:	b292      	uxth	r2, r2
 80088ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	891b      	ldrh	r3, [r3, #8]
 80088f8:	4619      	mov	r1, r3
 80088fa:	4610      	mov	r0, r2
 80088fc:	f7fb fe86 	bl	800460c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	891c      	ldrh	r4, [r3, #8]
 8008906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	899b      	ldrh	r3, [r3, #12]
 800890e:	b29b      	uxth	r3, r3
 8008910:	4618      	mov	r0, r3
 8008912:	f7fa fd51 	bl	80033b8 <lwip_htons>
 8008916:	4603      	mov	r3, r0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <tcp_receive+0xe6a>
 8008922:	2301      	movs	r3, #1
 8008924:	e000      	b.n	8008928 <tcp_receive+0xe6c>
 8008926:	2300      	movs	r3, #0
 8008928:	4423      	add	r3, r4
 800892a:	b29a      	uxth	r2, r3
 800892c:	4b2a      	ldr	r3, [pc, #168]	; (80089d8 <tcp_receive+0xf1c>)
 800892e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008930:	4b29      	ldr	r3, [pc, #164]	; (80089d8 <tcp_receive+0xf1c>)
 8008932:	881b      	ldrh	r3, [r3, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	4b26      	ldr	r3, [pc, #152]	; (80089d0 <tcp_receive+0xf14>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	441a      	add	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008944:	440b      	add	r3, r1
 8008946:	429a      	cmp	r2, r3
 8008948:	d019      	beq.n	800897e <tcp_receive+0xec2>
 800894a:	4b24      	ldr	r3, [pc, #144]	; (80089dc <tcp_receive+0xf20>)
 800894c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8008950:	4923      	ldr	r1, [pc, #140]	; (80089e0 <tcp_receive+0xf24>)
 8008952:	4824      	ldr	r0, [pc, #144]	; (80089e4 <tcp_receive+0xf28>)
 8008954:	f004 f9ca 	bl	800ccec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008958:	e011      	b.n	800897e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	2b00      	cmp	r3, #0
 8008964:	f47f aea4 	bne.w	80086b0 <tcp_receive+0xbf4>
 8008968:	e00a      	b.n	8008980 <tcp_receive+0xec4>
                break;
 800896a:	bf00      	nop
 800896c:	e008      	b.n	8008980 <tcp_receive+0xec4>
                break;
 800896e:	bf00      	nop
 8008970:	e006      	b.n	8008980 <tcp_receive+0xec4>
                  break;
 8008972:	bf00      	nop
 8008974:	e004      	b.n	8008980 <tcp_receive+0xec4>
                  break;
 8008976:	bf00      	nop
 8008978:	e002      	b.n	8008980 <tcp_receive+0xec4>
                  break;
 800897a:	bf00      	nop
 800897c:	e000      	b.n	8008980 <tcp_receive+0xec4>
                break;
 800897e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 fa41 	bl	8009e08 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008986:	e003      	b.n	8008990 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 fa3d 	bl	8009e08 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800898e:	e01a      	b.n	80089c6 <tcp_receive+0xf0a>
 8008990:	e019      	b.n	80089c6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008992:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <tcp_receive+0xf14>)
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	2b00      	cmp	r3, #0
 800899e:	db0a      	blt.n	80089b6 <tcp_receive+0xefa>
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <tcp_receive+0xf14>)
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	6879      	ldr	r1, [r7, #4]
 80089aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80089ac:	440b      	add	r3, r1
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	3301      	adds	r3, #1
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dd07      	ble.n	80089c6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	8b5b      	ldrh	r3, [r3, #26]
 80089ba:	f043 0302 	orr.w	r3, r3, #2
 80089be:	b29a      	uxth	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80089c4:	e7ff      	b.n	80089c6 <tcp_receive+0xf0a>
 80089c6:	bf00      	nop
 80089c8:	3750      	adds	r7, #80	; 0x50
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bdb0      	pop	{r4, r5, r7, pc}
 80089ce:	bf00      	nop
 80089d0:	200000ec 	.word	0x200000ec
 80089d4:	200000cc 	.word	0x200000cc
 80089d8:	200000f6 	.word	0x200000f6
 80089dc:	0800ed78 	.word	0x0800ed78
 80089e0:	0800f120 	.word	0x0800f120
 80089e4:	0800edc4 	.word	0x0800edc4

080089e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80089ee:	4b15      	ldr	r3, [pc, #84]	; (8008a44 <tcp_get_next_optbyte+0x5c>)
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	b291      	uxth	r1, r2
 80089f6:	4a13      	ldr	r2, [pc, #76]	; (8008a44 <tcp_get_next_optbyte+0x5c>)
 80089f8:	8011      	strh	r1, [r2, #0]
 80089fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80089fc:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <tcp_get_next_optbyte+0x60>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d004      	beq.n	8008a0e <tcp_get_next_optbyte+0x26>
 8008a04:	4b11      	ldr	r3, [pc, #68]	; (8008a4c <tcp_get_next_optbyte+0x64>)
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	88fa      	ldrh	r2, [r7, #6]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d208      	bcs.n	8008a20 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008a0e:	4b10      	ldr	r3, [pc, #64]	; (8008a50 <tcp_get_next_optbyte+0x68>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3314      	adds	r3, #20
 8008a14:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8008a16:	88fb      	ldrh	r3, [r7, #6]
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	e00b      	b.n	8008a38 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	4b09      	ldr	r3, [pc, #36]	; (8008a4c <tcp_get_next_optbyte+0x64>)
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8008a2e:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <tcp_get_next_optbyte+0x60>)
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	797b      	ldrb	r3, [r7, #5]
 8008a34:	4413      	add	r3, r2
 8008a36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	200000e8 	.word	0x200000e8
 8008a48:	200000e4 	.word	0x200000e4
 8008a4c:	200000e2 	.word	0x200000e2
 8008a50:	200000dc 	.word	0x200000dc

08008a54 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d106      	bne.n	8008a70 <tcp_parseopt+0x1c>
 8008a62:	4b31      	ldr	r3, [pc, #196]	; (8008b28 <tcp_parseopt+0xd4>)
 8008a64:	f240 727d 	movw	r2, #1917	; 0x77d
 8008a68:	4930      	ldr	r1, [pc, #192]	; (8008b2c <tcp_parseopt+0xd8>)
 8008a6a:	4831      	ldr	r0, [pc, #196]	; (8008b30 <tcp_parseopt+0xdc>)
 8008a6c:	f004 f93e 	bl	800ccec <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008a70:	4b30      	ldr	r3, [pc, #192]	; (8008b34 <tcp_parseopt+0xe0>)
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d053      	beq.n	8008b20 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008a78:	4b2f      	ldr	r3, [pc, #188]	; (8008b38 <tcp_parseopt+0xe4>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	801a      	strh	r2, [r3, #0]
 8008a7e:	e043      	b.n	8008b08 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8008a80:	f7ff ffb2 	bl	80089e8 <tcp_get_next_optbyte>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d03c      	beq.n	8008b08 <tcp_parseopt+0xb4>
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d002      	beq.n	8008a98 <tcp_parseopt+0x44>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d03f      	beq.n	8008b16 <tcp_parseopt+0xc2>
 8008a96:	e026      	b.n	8008ae6 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008a98:	f7ff ffa6 	bl	80089e8 <tcp_get_next_optbyte>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d13b      	bne.n	8008b1a <tcp_parseopt+0xc6>
 8008aa2:	4b25      	ldr	r3, [pc, #148]	; (8008b38 <tcp_parseopt+0xe4>)
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	3302      	adds	r3, #2
 8008aa8:	4a22      	ldr	r2, [pc, #136]	; (8008b34 <tcp_parseopt+0xe0>)
 8008aaa:	8812      	ldrh	r2, [r2, #0]
 8008aac:	4293      	cmp	r3, r2
 8008aae:	dc34      	bgt.n	8008b1a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8008ab0:	f7ff ff9a 	bl	80089e8 <tcp_get_next_optbyte>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	021b      	lsls	r3, r3, #8
 8008aba:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8008abc:	f7ff ff94 	bl	80089e8 <tcp_get_next_optbyte>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	89bb      	ldrh	r3, [r7, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008aca:	89bb      	ldrh	r3, [r7, #12]
 8008acc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008ad0:	d804      	bhi.n	8008adc <tcp_parseopt+0x88>
 8008ad2:	89bb      	ldrh	r3, [r7, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <tcp_parseopt+0x88>
 8008ad8:	89ba      	ldrh	r2, [r7, #12]
 8008ada:	e001      	b.n	8008ae0 <tcp_parseopt+0x8c>
 8008adc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8008ae4:	e010      	b.n	8008b08 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8008ae6:	f7ff ff7f 	bl	80089e8 <tcp_get_next_optbyte>
 8008aea:	4603      	mov	r3, r0
 8008aec:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d914      	bls.n	8008b1e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8008af4:	7afb      	ldrb	r3, [r7, #11]
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <tcp_parseopt+0xe4>)
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	4413      	add	r3, r2
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	3b02      	subs	r3, #2
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	4b0c      	ldr	r3, [pc, #48]	; (8008b38 <tcp_parseopt+0xe4>)
 8008b06:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008b08:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <tcp_parseopt+0xe4>)
 8008b0a:	881a      	ldrh	r2, [r3, #0]
 8008b0c:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <tcp_parseopt+0xe0>)
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d3b5      	bcc.n	8008a80 <tcp_parseopt+0x2c>
 8008b14:	e004      	b.n	8008b20 <tcp_parseopt+0xcc>
          return;
 8008b16:	bf00      	nop
 8008b18:	e002      	b.n	8008b20 <tcp_parseopt+0xcc>
            return;
 8008b1a:	bf00      	nop
 8008b1c:	e000      	b.n	8008b20 <tcp_parseopt+0xcc>
            return;
 8008b1e:	bf00      	nop
      }
    }
  }
}
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	0800ed78 	.word	0x0800ed78
 8008b2c:	0800f1dc 	.word	0x0800f1dc
 8008b30:	0800edc4 	.word	0x0800edc4
 8008b34:	200000e0 	.word	0x200000e0
 8008b38:	200000e8 	.word	0x200000e8

08008b3c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8008b40:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <tcp_trigger_input_pcb_close+0x1c>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	f043 0310 	orr.w	r3, r3, #16
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	4b03      	ldr	r3, [pc, #12]	; (8008b58 <tcp_trigger_input_pcb_close+0x1c>)
 8008b4c:	701a      	strb	r2, [r3, #0]
}
 8008b4e:	bf00      	nop
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	200000f9 	.word	0x200000f9

08008b5c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <tcp_route+0x28>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	7a1b      	ldrb	r3, [r3, #8]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d006      	beq.n	8008b84 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	7a1b      	ldrb	r3, [r3, #8]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fb fb70 	bl	8004260 <netif_get_by_index>
 8008b80:	4603      	mov	r3, r0
 8008b82:	e003      	b.n	8008b8c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f002 fe8b 	bl	800b8a0 <ip4_route>
 8008b8a:	4603      	mov	r3, r0
  }
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8008b94:	b590      	push	{r4, r7, lr}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d105      	bne.n	8008bb6 <tcp_create_segment+0x22>
 8008baa:	4b44      	ldr	r3, [pc, #272]	; (8008cbc <tcp_create_segment+0x128>)
 8008bac:	22a3      	movs	r2, #163	; 0xa3
 8008bae:	4944      	ldr	r1, [pc, #272]	; (8008cc0 <tcp_create_segment+0x12c>)
 8008bb0:	4844      	ldr	r0, [pc, #272]	; (8008cc4 <tcp_create_segment+0x130>)
 8008bb2:	f004 f89b 	bl	800ccec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d105      	bne.n	8008bc8 <tcp_create_segment+0x34>
 8008bbc:	4b3f      	ldr	r3, [pc, #252]	; (8008cbc <tcp_create_segment+0x128>)
 8008bbe:	22a4      	movs	r2, #164	; 0xa4
 8008bc0:	4941      	ldr	r1, [pc, #260]	; (8008cc8 <tcp_create_segment+0x134>)
 8008bc2:	4840      	ldr	r0, [pc, #256]	; (8008cc4 <tcp_create_segment+0x130>)
 8008bc4:	f004 f892 	bl	800ccec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008bc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008bd6:	2003      	movs	r0, #3
 8008bd8:	f7fb f844 	bl	8003c64 <memp_malloc>
 8008bdc:	6138      	str	r0, [r7, #16]
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d104      	bne.n	8008bee <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008be4:	68b8      	ldr	r0, [r7, #8]
 8008be6:	f7fb fe97 	bl	8004918 <pbuf_free>
    return NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	e061      	b.n	8008cb2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008bf4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	891a      	ldrh	r2, [r3, #8]
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d205      	bcs.n	8008c1a <tcp_create_segment+0x86>
 8008c0e:	4b2b      	ldr	r3, [pc, #172]	; (8008cbc <tcp_create_segment+0x128>)
 8008c10:	22b0      	movs	r2, #176	; 0xb0
 8008c12:	492e      	ldr	r1, [pc, #184]	; (8008ccc <tcp_create_segment+0x138>)
 8008c14:	482b      	ldr	r0, [pc, #172]	; (8008cc4 <tcp_create_segment+0x130>)
 8008c16:	f004 f869 	bl	800ccec <iprintf>
  seg->len = p->tot_len - optlen;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	891a      	ldrh	r2, [r3, #8]
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8008c2a:	2114      	movs	r1, #20
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f7fb fddd 	bl	80047ec <pbuf_add_header>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d004      	beq.n	8008c42 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8008c38:	6938      	ldr	r0, [r7, #16]
 8008c3a:	f7fd f8d5 	bl	8005de8 <tcp_seg_free>
    return NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	e037      	b.n	8008cb2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8ada      	ldrh	r2, [r3, #22]
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	68dc      	ldr	r4, [r3, #12]
 8008c54:	4610      	mov	r0, r2
 8008c56:	f7fa fbaf 	bl	80033b8 <lwip_htons>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8b1a      	ldrh	r2, [r3, #24]
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	68dc      	ldr	r4, [r3, #12]
 8008c66:	4610      	mov	r0, r2
 8008c68:	f7fa fba6 	bl	80033b8 <lwip_htons>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	68dc      	ldr	r4, [r3, #12]
 8008c74:	6838      	ldr	r0, [r7, #0]
 8008c76:	f7fa fbb4 	bl	80033e2 <lwip_htonl>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	089b      	lsrs	r3, r3, #2
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3305      	adds	r3, #5
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	031b      	lsls	r3, r3, #12
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	79fb      	ldrb	r3, [r7, #7]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	4313      	orrs	r3, r2
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	68dc      	ldr	r4, [r3, #12]
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	f7fa fb8c 	bl	80033b8 <lwip_htons>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	749a      	strb	r2, [r3, #18]
 8008cac:	2200      	movs	r2, #0
 8008cae:	74da      	strb	r2, [r3, #19]
  return seg;
 8008cb0:	693b      	ldr	r3, [r7, #16]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd90      	pop	{r4, r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	0800f1f8 	.word	0x0800f1f8
 8008cc0:	0800f22c 	.word	0x0800f22c
 8008cc4:	0800f24c 	.word	0x0800f24c
 8008cc8:	0800f274 	.word	0x0800f274
 8008ccc:	0800f298 	.word	0x0800f298

08008cd0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8008cd0:	b590      	push	{r4, r7, lr}
 8008cd2:	b08b      	sub	sp, #44	; 0x2c
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61fb      	str	r3, [r7, #28]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <tcp_split_unsent_seg+0x2c>
 8008cee:	4b95      	ldr	r3, [pc, #596]	; (8008f44 <tcp_split_unsent_seg+0x274>)
 8008cf0:	f240 324b 	movw	r2, #843	; 0x34b
 8008cf4:	4994      	ldr	r1, [pc, #592]	; (8008f48 <tcp_split_unsent_seg+0x278>)
 8008cf6:	4895      	ldr	r0, [pc, #596]	; (8008f4c <tcp_split_unsent_seg+0x27c>)
 8008cf8:	f003 fff8 	bl	800ccec <iprintf>

  useg = pcb->unsent;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d00:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d102      	bne.n	8008d0e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8008d08:	f04f 33ff 	mov.w	r3, #4294967295
 8008d0c:	e116      	b.n	8008f3c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8008d0e:	887b      	ldrh	r3, [r7, #2]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d109      	bne.n	8008d28 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8008d14:	4b8b      	ldr	r3, [pc, #556]	; (8008f44 <tcp_split_unsent_seg+0x274>)
 8008d16:	f240 3253 	movw	r2, #851	; 0x353
 8008d1a:	498d      	ldr	r1, [pc, #564]	; (8008f50 <tcp_split_unsent_seg+0x280>)
 8008d1c:	488b      	ldr	r0, [pc, #556]	; (8008f4c <tcp_split_unsent_seg+0x27c>)
 8008d1e:	f003 ffe5 	bl	800ccec <iprintf>
    return ERR_VAL;
 8008d22:	f06f 0305 	mvn.w	r3, #5
 8008d26:	e109      	b.n	8008f3c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	891b      	ldrh	r3, [r3, #8]
 8008d2c:	887a      	ldrh	r2, [r7, #2]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d301      	bcc.n	8008d36 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	e102      	b.n	8008f3c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d3a:	887a      	ldrh	r2, [r7, #2]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d906      	bls.n	8008d4e <tcp_split_unsent_seg+0x7e>
 8008d40:	4b80      	ldr	r3, [pc, #512]	; (8008f44 <tcp_split_unsent_seg+0x274>)
 8008d42:	f240 325b 	movw	r2, #859	; 0x35b
 8008d46:	4983      	ldr	r1, [pc, #524]	; (8008f54 <tcp_split_unsent_seg+0x284>)
 8008d48:	4880      	ldr	r0, [pc, #512]	; (8008f4c <tcp_split_unsent_seg+0x27c>)
 8008d4a:	f003 ffcf 	bl	800ccec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	891b      	ldrh	r3, [r3, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d106      	bne.n	8008d64 <tcp_split_unsent_seg+0x94>
 8008d56:	4b7b      	ldr	r3, [pc, #492]	; (8008f44 <tcp_split_unsent_seg+0x274>)
 8008d58:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8008d5c:	497e      	ldr	r1, [pc, #504]	; (8008f58 <tcp_split_unsent_seg+0x288>)
 8008d5e:	487b      	ldr	r0, [pc, #492]	; (8008f4c <tcp_split_unsent_seg+0x27c>)
 8008d60:	f003 ffc4 	bl	800ccec <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	7a9b      	ldrb	r3, [r3, #10]
 8008d68:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	891a      	ldrh	r2, [r3, #8]
 8008d7a:	887b      	ldrh	r3, [r7, #2]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	89bb      	ldrh	r3, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008d8e:	4619      	mov	r1, r3
 8008d90:	2036      	movs	r0, #54	; 0x36
 8008d92:	f7fb fae1 	bl	8004358 <pbuf_alloc>
 8008d96:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 80b7 	beq.w	8008f0e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	891a      	ldrh	r2, [r3, #8]
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	891b      	ldrh	r3, [r3, #8]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	887b      	ldrh	r3, [r7, #2]
 8008db0:	4413      	add	r3, r2
 8008db2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	6858      	ldr	r0, [r3, #4]
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	18d1      	adds	r1, r2, r3
 8008dc0:	897b      	ldrh	r3, [r7, #10]
 8008dc2:	89ba      	ldrh	r2, [r7, #12]
 8008dc4:	f7fb ff92 	bl	8004cec <pbuf_copy_partial>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	461a      	mov	r2, r3
 8008dcc:	89bb      	ldrh	r3, [r7, #12]
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	f040 809f 	bne.w	8008f12 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	899b      	ldrh	r3, [r3, #12]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fa faeb 	bl	80033b8 <lwip_htons>
 8008de2:	4603      	mov	r3, r0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dea:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8008dec:	2300      	movs	r3, #0
 8008dee:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8008df0:	7efb      	ldrb	r3, [r7, #27]
 8008df2:	f003 0308 	and.w	r3, r3, #8
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d007      	beq.n	8008e0a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8008dfa:	7efb      	ldrb	r3, [r7, #27]
 8008dfc:	f023 0308 	bic.w	r3, r3, #8
 8008e00:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8008e02:	7ebb      	ldrb	r3, [r7, #26]
 8008e04:	f043 0308 	orr.w	r3, r3, #8
 8008e08:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8008e0a:	7efb      	ldrb	r3, [r7, #27]
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d007      	beq.n	8008e24 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8008e14:	7efb      	ldrb	r3, [r7, #27]
 8008e16:	f023 0301 	bic.w	r3, r3, #1
 8008e1a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8008e1c:	7ebb      	ldrb	r3, [r7, #26]
 8008e1e:	f043 0301 	orr.w	r3, r3, #1
 8008e22:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fa fad9 	bl	80033e2 <lwip_htonl>
 8008e30:	4602      	mov	r2, r0
 8008e32:	887b      	ldrh	r3, [r7, #2]
 8008e34:	18d1      	adds	r1, r2, r3
 8008e36:	7eba      	ldrb	r2, [r7, #26]
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	6939      	ldr	r1, [r7, #16]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff fea7 	bl	8008b94 <tcp_create_segment>
 8008e46:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d063      	beq.n	8008f16 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fb fde8 	bl	8004a28 <pbuf_clen>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008e62:	1a9b      	subs	r3, r3, r2
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	6858      	ldr	r0, [r3, #4]
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	891a      	ldrh	r2, [r3, #8]
 8008e76:	89bb      	ldrh	r3, [r7, #12]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	f7fb fbc5 	bl	800460c <pbuf_realloc>
  useg->len -= remainder;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	891a      	ldrh	r2, [r3, #8]
 8008e86:	89bb      	ldrh	r3, [r7, #12]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	899b      	ldrh	r3, [r3, #12]
 8008e96:	b29c      	uxth	r4, r3
 8008e98:	7efb      	ldrb	r3, [r7, #27]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fa fa8b 	bl	80033b8 <lwip_htons>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	4322      	orrs	r2, r4
 8008eac:	b292      	uxth	r2, r2
 8008eae:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fb fdb7 	bl	8004a28 <pbuf_clen>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008ec4:	4413      	add	r3, r2
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fb fda8 	bl	8004a28 <pbuf_clen>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	461a      	mov	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008ee2:	4413      	add	r3, r2
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	69fa      	ldr	r2, [r7, #28]
 8008ef8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d103      	bne.n	8008f0a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e016      	b.n	8008f3c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8008f0e:	bf00      	nop
 8008f10:	e002      	b.n	8008f18 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8008f12:	bf00      	nop
 8008f14:	e000      	b.n	8008f18 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8008f16:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d006      	beq.n	8008f2c <tcp_split_unsent_seg+0x25c>
 8008f1e:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <tcp_split_unsent_seg+0x274>)
 8008f20:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8008f24:	490d      	ldr	r1, [pc, #52]	; (8008f5c <tcp_split_unsent_seg+0x28c>)
 8008f26:	4809      	ldr	r0, [pc, #36]	; (8008f4c <tcp_split_unsent_seg+0x27c>)
 8008f28:	f003 fee0 	bl	800ccec <iprintf>
  if (p != NULL) {
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8008f32:	6938      	ldr	r0, [r7, #16]
 8008f34:	f7fb fcf0 	bl	8004918 <pbuf_free>
  }

  return ERR_MEM;
 8008f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3724      	adds	r7, #36	; 0x24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd90      	pop	{r4, r7, pc}
 8008f44:	0800f1f8 	.word	0x0800f1f8
 8008f48:	0800f58c 	.word	0x0800f58c
 8008f4c:	0800f24c 	.word	0x0800f24c
 8008f50:	0800f5b0 	.word	0x0800f5b0
 8008f54:	0800f5d4 	.word	0x0800f5d4
 8008f58:	0800f5e4 	.word	0x0800f5e4
 8008f5c:	0800f5f4 	.word	0x0800f5f4

08008f60 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d106      	bne.n	8008f7c <tcp_send_fin+0x1c>
 8008f6e:	4b21      	ldr	r3, [pc, #132]	; (8008ff4 <tcp_send_fin+0x94>)
 8008f70:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8008f74:	4920      	ldr	r1, [pc, #128]	; (8008ff8 <tcp_send_fin+0x98>)
 8008f76:	4821      	ldr	r0, [pc, #132]	; (8008ffc <tcp_send_fin+0x9c>)
 8008f78:	f003 feb8 	bl	800ccec <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d02e      	beq.n	8008fe2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	e002      	b.n	8008f92 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f8      	bne.n	8008f8c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	899b      	ldrh	r3, [r3, #12]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fa fa08 	bl	80033b8 <lwip_htons>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	f003 0307 	and.w	r3, r3, #7
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d116      	bne.n	8008fe2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	899b      	ldrh	r3, [r3, #12]
 8008fba:	b29c      	uxth	r4, r3
 8008fbc:	2001      	movs	r0, #1
 8008fbe:	f7fa f9fb 	bl	80033b8 <lwip_htons>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	4322      	orrs	r2, r4
 8008fcc:	b292      	uxth	r2, r2
 8008fce:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	8b5b      	ldrh	r3, [r3, #26]
 8008fd4:	f043 0320 	orr.w	r3, r3, #32
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e004      	b.n	8008fec <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008fe2:	2101      	movs	r1, #1
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f80b 	bl	8009000 <tcp_enqueue_flags>
 8008fea:	4603      	mov	r3, r0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd90      	pop	{r4, r7, pc}
 8008ff4:	0800f1f8 	.word	0x0800f1f8
 8008ff8:	0800f600 	.word	0x0800f600
 8008ffc:	0800f24c 	.word	0x0800f24c

08009000 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b08a      	sub	sp, #40	; 0x28
 8009004:	af02      	add	r7, sp, #8
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d106      	bne.n	800902c <tcp_enqueue_flags+0x2c>
 800901e:	4b67      	ldr	r3, [pc, #412]	; (80091bc <tcp_enqueue_flags+0x1bc>)
 8009020:	f240 4212 	movw	r2, #1042	; 0x412
 8009024:	4966      	ldr	r1, [pc, #408]	; (80091c0 <tcp_enqueue_flags+0x1c0>)
 8009026:	4867      	ldr	r0, [pc, #412]	; (80091c4 <tcp_enqueue_flags+0x1c4>)
 8009028:	f003 fe60 	bl	800ccec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d106      	bne.n	8009040 <tcp_enqueue_flags+0x40>
 8009032:	4b62      	ldr	r3, [pc, #392]	; (80091bc <tcp_enqueue_flags+0x1bc>)
 8009034:	f240 4213 	movw	r2, #1043	; 0x413
 8009038:	4963      	ldr	r1, [pc, #396]	; (80091c8 <tcp_enqueue_flags+0x1c8>)
 800903a:	4862      	ldr	r0, [pc, #392]	; (80091c4 <tcp_enqueue_flags+0x1c4>)
 800903c:	f003 fe56 	bl	800ccec <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800904a:	2301      	movs	r3, #1
 800904c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800904e:	7ffb      	ldrb	r3, [r7, #31]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	b29b      	uxth	r3, r3
 800905e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009062:	4619      	mov	r1, r3
 8009064:	2036      	movs	r0, #54	; 0x36
 8009066:	f7fb f977 	bl	8004358 <pbuf_alloc>
 800906a:	6138      	str	r0, [r7, #16]
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	8b5b      	ldrh	r3, [r3, #26]
 8009076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907a:	b29a      	uxth	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009080:	f04f 33ff 	mov.w	r3, #4294967295
 8009084:	e095      	b.n	80091b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	895a      	ldrh	r2, [r3, #10]
 800908a:	7dfb      	ldrb	r3, [r7, #23]
 800908c:	b29b      	uxth	r3, r3
 800908e:	429a      	cmp	r2, r3
 8009090:	d206      	bcs.n	80090a0 <tcp_enqueue_flags+0xa0>
 8009092:	4b4a      	ldr	r3, [pc, #296]	; (80091bc <tcp_enqueue_flags+0x1bc>)
 8009094:	f240 423a 	movw	r2, #1082	; 0x43a
 8009098:	494c      	ldr	r1, [pc, #304]	; (80091cc <tcp_enqueue_flags+0x1cc>)
 800909a:	484a      	ldr	r0, [pc, #296]	; (80091c4 <tcp_enqueue_flags+0x1c4>)
 800909c:	f003 fe26 	bl	800ccec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80090a4:	78fa      	ldrb	r2, [r7, #3]
 80090a6:	7ffb      	ldrb	r3, [r7, #31]
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	460b      	mov	r3, r1
 80090ac:	6939      	ldr	r1, [r7, #16]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7ff fd70 	bl	8008b94 <tcp_create_segment>
 80090b4:	60f8      	str	r0, [r7, #12]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d109      	bne.n	80090d0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	8b5b      	ldrh	r3, [r3, #26]
 80090c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80090ca:	f04f 33ff 	mov.w	r3, #4294967295
 80090ce:	e070      	b.n	80091b2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f003 0303 	and.w	r3, r3, #3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d006      	beq.n	80090ea <tcp_enqueue_flags+0xea>
 80090dc:	4b37      	ldr	r3, [pc, #220]	; (80091bc <tcp_enqueue_flags+0x1bc>)
 80090de:	f240 4242 	movw	r2, #1090	; 0x442
 80090e2:	493b      	ldr	r1, [pc, #236]	; (80091d0 <tcp_enqueue_flags+0x1d0>)
 80090e4:	4837      	ldr	r0, [pc, #220]	; (80091c4 <tcp_enqueue_flags+0x1c4>)
 80090e6:	f003 fe01 	bl	800ccec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	891b      	ldrh	r3, [r3, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d006      	beq.n	8009100 <tcp_enqueue_flags+0x100>
 80090f2:	4b32      	ldr	r3, [pc, #200]	; (80091bc <tcp_enqueue_flags+0x1bc>)
 80090f4:	f240 4243 	movw	r2, #1091	; 0x443
 80090f8:	4936      	ldr	r1, [pc, #216]	; (80091d4 <tcp_enqueue_flags+0x1d4>)
 80090fa:	4832      	ldr	r0, [pc, #200]	; (80091c4 <tcp_enqueue_flags+0x1c4>)
 80090fc:	f003 fdf6 	bl	800ccec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009104:	2b00      	cmp	r3, #0
 8009106:	d103      	bne.n	8009110 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	66da      	str	r2, [r3, #108]	; 0x6c
 800910e:	e00d      	b.n	800912c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009114:	61bb      	str	r3, [r7, #24]
 8009116:	e002      	b.n	800911e <tcp_enqueue_flags+0x11e>
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	61bb      	str	r3, [r7, #24]
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1f8      	bne.n	8009118 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d104      	bne.n	8009148 <tcp_enqueue_flags+0x148>
 800913e:	78fb      	ldrb	r3, [r7, #3]
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	d004      	beq.n	8009152 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009152:	78fb      	ldrb	r3, [r7, #3]
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	d006      	beq.n	800916a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	8b5b      	ldrh	r3, [r3, #26]
 8009160:	f043 0320 	orr.w	r3, r3, #32
 8009164:	b29a      	uxth	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	4618      	mov	r0, r3
 8009170:	f7fb fc5a 	bl	8004a28 <pbuf_clen>
 8009174:	4603      	mov	r3, r0
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800917e:	4413      	add	r3, r2
 8009180:	b29a      	uxth	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00e      	beq.n	80091b0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10a      	bne.n	80091b0 <tcp_enqueue_flags+0x1b0>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d106      	bne.n	80091b0 <tcp_enqueue_flags+0x1b0>
 80091a2:	4b06      	ldr	r3, [pc, #24]	; (80091bc <tcp_enqueue_flags+0x1bc>)
 80091a4:	f240 4266 	movw	r2, #1126	; 0x466
 80091a8:	490b      	ldr	r1, [pc, #44]	; (80091d8 <tcp_enqueue_flags+0x1d8>)
 80091aa:	4806      	ldr	r0, [pc, #24]	; (80091c4 <tcp_enqueue_flags+0x1c4>)
 80091ac:	f003 fd9e 	bl	800ccec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	0800f1f8 	.word	0x0800f1f8
 80091c0:	0800f61c 	.word	0x0800f61c
 80091c4:	0800f24c 	.word	0x0800f24c
 80091c8:	0800f674 	.word	0x0800f674
 80091cc:	0800f694 	.word	0x0800f694
 80091d0:	0800f6d0 	.word	0x0800f6d0
 80091d4:	0800f6e8 	.word	0x0800f6e8
 80091d8:	0800f714 	.word	0x0800f714

080091dc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80091dc:	b5b0      	push	{r4, r5, r7, lr}
 80091de:	b08a      	sub	sp, #40	; 0x28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d106      	bne.n	80091f8 <tcp_output+0x1c>
 80091ea:	4ba0      	ldr	r3, [pc, #640]	; (800946c <tcp_output+0x290>)
 80091ec:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80091f0:	499f      	ldr	r1, [pc, #636]	; (8009470 <tcp_output+0x294>)
 80091f2:	48a0      	ldr	r0, [pc, #640]	; (8009474 <tcp_output+0x298>)
 80091f4:	f003 fd7a 	bl	800ccec <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	7d1b      	ldrb	r3, [r3, #20]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d106      	bne.n	800920e <tcp_output+0x32>
 8009200:	4b9a      	ldr	r3, [pc, #616]	; (800946c <tcp_output+0x290>)
 8009202:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8009206:	499c      	ldr	r1, [pc, #624]	; (8009478 <tcp_output+0x29c>)
 8009208:	489a      	ldr	r0, [pc, #616]	; (8009474 <tcp_output+0x298>)
 800920a:	f003 fd6f 	bl	800ccec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800920e:	4b9b      	ldr	r3, [pc, #620]	; (800947c <tcp_output+0x2a0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	429a      	cmp	r2, r3
 8009216:	d101      	bne.n	800921c <tcp_output+0x40>
    return ERR_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	e1d2      	b.n	80095c2 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009228:	429a      	cmp	r2, r3
 800922a:	d203      	bcs.n	8009234 <tcp_output+0x58>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009232:	e002      	b.n	800923a <tcp_output+0x5e>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800923a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009240:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10b      	bne.n	8009260 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	8b5b      	ldrh	r3, [r3, #26]
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 81a9 	beq.w	80095a8 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fdd6 	bl	8009e08 <tcp_send_empty_ack>
 800925c:	4603      	mov	r3, r0
 800925e:	e1b0      	b.n	80095c2 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009260:	6879      	ldr	r1, [r7, #4]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	3304      	adds	r3, #4
 8009266:	461a      	mov	r2, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff fc77 	bl	8008b5c <tcp_route>
 800926e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <tcp_output+0xa0>
    return ERR_RTE;
 8009276:	f06f 0303 	mvn.w	r3, #3
 800927a:	e1a2      	b.n	80095c2 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <tcp_output+0xae>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d111      	bne.n	80092ae <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <tcp_output+0xba>
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	3304      	adds	r3, #4
 8009294:	e000      	b.n	8009298 <tcp_output+0xbc>
 8009296:	2300      	movs	r3, #0
 8009298:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d102      	bne.n	80092a6 <tcp_output+0xca>
      return ERR_RTE;
 80092a0:	f06f 0303 	mvn.w	r3, #3
 80092a4:	e18d      	b.n	80095c2 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fa f894 	bl	80033e2 <lwip_htonl>
 80092ba:	4602      	mov	r2, r0
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092c4:	8912      	ldrh	r2, [r2, #8]
 80092c6:	4413      	add	r3, r2
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d227      	bcs.n	800931e <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092d4:	461a      	mov	r2, r3
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	4293      	cmp	r3, r2
 80092da:	d114      	bne.n	8009306 <tcp_output+0x12a>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d110      	bne.n	8009306 <tcp_output+0x12a>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10b      	bne.n	8009306 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	8b5b      	ldrh	r3, [r3, #26]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 814c 	beq.w	80095ac <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fd77 	bl	8009e08 <tcp_send_empty_ack>
 800931a:	4603      	mov	r3, r0
 800931c:	e151      	b.n	80095c2 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 811b 	beq.w	800956a <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8009334:	e002      	b.n	800933c <tcp_output+0x160>
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	623b      	str	r3, [r7, #32]
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1f8      	bne.n	8009336 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009344:	e111      	b.n	800956a <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	899b      	ldrh	r3, [r3, #12]
 800934c:	b29b      	uxth	r3, r3
 800934e:	4618      	mov	r0, r3
 8009350:	f7fa f832 	bl	80033b8 <lwip_htons>
 8009354:	4603      	mov	r3, r0
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 0304 	and.w	r3, r3, #4
 800935c:	2b00      	cmp	r3, #0
 800935e:	d006      	beq.n	800936e <tcp_output+0x192>
 8009360:	4b42      	ldr	r3, [pc, #264]	; (800946c <tcp_output+0x290>)
 8009362:	f240 5237 	movw	r2, #1335	; 0x537
 8009366:	4946      	ldr	r1, [pc, #280]	; (8009480 <tcp_output+0x2a4>)
 8009368:	4842      	ldr	r0, [pc, #264]	; (8009474 <tcp_output+0x298>)
 800936a:	f003 fcbf 	bl	800ccec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009372:	2b00      	cmp	r3, #0
 8009374:	d01f      	beq.n	80093b6 <tcp_output+0x1da>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	8b5b      	ldrh	r3, [r3, #26]
 800937a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800937e:	2b00      	cmp	r3, #0
 8009380:	d119      	bne.n	80093b6 <tcp_output+0x1da>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00b      	beq.n	80093a2 <tcp_output+0x1c6>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d110      	bne.n	80093b6 <tcp_output+0x1da>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009398:	891a      	ldrh	r2, [r3, #8]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800939e:	429a      	cmp	r2, r3
 80093a0:	d209      	bcs.n	80093b6 <tcp_output+0x1da>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d004      	beq.n	80093b6 <tcp_output+0x1da>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80093b2:	2b08      	cmp	r3, #8
 80093b4:	d901      	bls.n	80093ba <tcp_output+0x1de>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e000      	b.n	80093bc <tcp_output+0x1e0>
 80093ba:	2300      	movs	r3, #0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d106      	bne.n	80093ce <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	8b5b      	ldrh	r3, [r3, #26]
 80093c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 80e3 	beq.w	8009594 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	7d1b      	ldrb	r3, [r3, #20]
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d00d      	beq.n	80093f2 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	899b      	ldrh	r3, [r3, #12]
 80093dc:	b29c      	uxth	r4, r3
 80093de:	2010      	movs	r0, #16
 80093e0:	f7f9 ffea 	bl	80033b8 <lwip_htons>
 80093e4:	4603      	mov	r3, r0
 80093e6:	461a      	mov	r2, r3
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	4322      	orrs	r2, r4
 80093ee:	b292      	uxth	r2, r2
 80093f0:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093f8:	f000 f908 	bl	800960c <tcp_output_segment>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d009      	beq.n	800941c <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	8b5b      	ldrh	r3, [r3, #26]
 800940c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009410:	b29a      	uxth	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	835a      	strh	r2, [r3, #26]
      return err;
 8009416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800941a:	e0d2      	b.n	80095c2 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7d1b      	ldrb	r3, [r3, #20]
 8009428:	2b02      	cmp	r3, #2
 800942a:	d006      	beq.n	800943a <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	8b5b      	ldrh	r3, [r3, #26]
 8009430:	f023 0303 	bic.w	r3, r3, #3
 8009434:	b29a      	uxth	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	4618      	mov	r0, r3
 8009442:	f7f9 ffce 	bl	80033e2 <lwip_htonl>
 8009446:	4604      	mov	r4, r0
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	891b      	ldrh	r3, [r3, #8]
 800944c:	461d      	mov	r5, r3
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	899b      	ldrh	r3, [r3, #12]
 8009454:	b29b      	uxth	r3, r3
 8009456:	4618      	mov	r0, r3
 8009458:	f7f9 ffae 	bl	80033b8 <lwip_htons>
 800945c:	4603      	mov	r3, r0
 800945e:	b2db      	uxtb	r3, r3
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00d      	beq.n	8009484 <tcp_output+0x2a8>
 8009468:	2301      	movs	r3, #1
 800946a:	e00c      	b.n	8009486 <tcp_output+0x2aa>
 800946c:	0800f1f8 	.word	0x0800f1f8
 8009470:	0800f73c 	.word	0x0800f73c
 8009474:	0800f24c 	.word	0x0800f24c
 8009478:	0800f754 	.word	0x0800f754
 800947c:	200068a0 	.word	0x200068a0
 8009480:	0800f77c 	.word	0x0800f77c
 8009484:	2300      	movs	r3, #0
 8009486:	442b      	add	r3, r5
 8009488:	4423      	add	r3, r4
 800948a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	da02      	bge.n	800949e <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	891b      	ldrh	r3, [r3, #8]
 80094a2:	461c      	mov	r4, r3
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	899b      	ldrh	r3, [r3, #12]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7f9 ff83 	bl	80033b8 <lwip_htons>
 80094b2:	4603      	mov	r3, r0
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 0303 	and.w	r3, r3, #3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <tcp_output+0x2e6>
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <tcp_output+0x2e8>
 80094c2:	2300      	movs	r3, #0
 80094c4:	4423      	add	r3, r4
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d049      	beq.n	800955e <tcp_output+0x382>
      seg->next = NULL;
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d105      	bne.n	80094e4 <tcp_output+0x308>
        pcb->unacked = seg;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094dc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	623b      	str	r3, [r7, #32]
 80094e2:	e03f      	b.n	8009564 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7f9 ff79 	bl	80033e2 <lwip_htonl>
 80094f0:	4604      	mov	r4, r0
 80094f2:	6a3b      	ldr	r3, [r7, #32]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7f9 ff72 	bl	80033e2 <lwip_htonl>
 80094fe:	4603      	mov	r3, r0
 8009500:	1ae3      	subs	r3, r4, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	da24      	bge.n	8009550 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3370      	adds	r3, #112	; 0x70
 800950a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800950c:	e002      	b.n	8009514 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d011      	beq.n	8009540 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	4618      	mov	r0, r3
 8009526:	f7f9 ff5c 	bl	80033e2 <lwip_htonl>
 800952a:	4604      	mov	r4, r0
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	4618      	mov	r0, r3
 8009534:	f7f9 ff55 	bl	80033e2 <lwip_htonl>
 8009538:	4603      	mov	r3, r0
 800953a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800953c:	2b00      	cmp	r3, #0
 800953e:	dbe6      	blt.n	800950e <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009546:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	e009      	b.n	8009564 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009554:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	623b      	str	r3, [r7, #32]
 800955c:	e002      	b.n	8009564 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800955e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009560:	f7fc fc42 	bl	8005de8 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009568:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	2b00      	cmp	r3, #0
 800956e:	d012      	beq.n	8009596 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	4618      	mov	r0, r3
 8009578:	f7f9 ff33 	bl	80033e2 <lwip_htonl>
 800957c:	4602      	mov	r2, r0
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009586:	8912      	ldrh	r2, [r2, #8]
 8009588:	4413      	add	r3, r2
  while (seg != NULL &&
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	429a      	cmp	r2, r3
 800958e:	f4bf aeda 	bcs.w	8009346 <tcp_output+0x16a>
 8009592:	e000      	b.n	8009596 <tcp_output+0x3ba>
      break;
 8009594:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800959a:	2b00      	cmp	r3, #0
 800959c:	d108      	bne.n	80095b0 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80095a6:	e004      	b.n	80095b2 <tcp_output+0x3d6>
    goto output_done;
 80095a8:	bf00      	nop
 80095aa:	e002      	b.n	80095b2 <tcp_output+0x3d6>
    goto output_done;
 80095ac:	bf00      	nop
 80095ae:	e000      	b.n	80095b2 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80095b0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	8b5b      	ldrh	r3, [r3, #26]
 80095b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3728      	adds	r7, #40	; 0x28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bdb0      	pop	{r4, r5, r7, pc}
 80095ca:	bf00      	nop

080095cc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <tcp_output_segment_busy+0x1c>
 80095da:	4b09      	ldr	r3, [pc, #36]	; (8009600 <tcp_output_segment_busy+0x34>)
 80095dc:	f240 529a 	movw	r2, #1434	; 0x59a
 80095e0:	4908      	ldr	r1, [pc, #32]	; (8009604 <tcp_output_segment_busy+0x38>)
 80095e2:	4809      	ldr	r0, [pc, #36]	; (8009608 <tcp_output_segment_busy+0x3c>)
 80095e4:	f003 fb82 	bl	800ccec <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	7b9b      	ldrb	r3, [r3, #14]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d001      	beq.n	80095f6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e000      	b.n	80095f8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	0800f1f8 	.word	0x0800f1f8
 8009604:	0800f794 	.word	0x0800f794
 8009608:	0800f24c 	.word	0x0800f24c

0800960c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800960c:	b5b0      	push	{r4, r5, r7, lr}
 800960e:	b08c      	sub	sp, #48	; 0x30
 8009610:	af04      	add	r7, sp, #16
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d106      	bne.n	800962c <tcp_output_segment+0x20>
 800961e:	4b64      	ldr	r3, [pc, #400]	; (80097b0 <tcp_output_segment+0x1a4>)
 8009620:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009624:	4963      	ldr	r1, [pc, #396]	; (80097b4 <tcp_output_segment+0x1a8>)
 8009626:	4864      	ldr	r0, [pc, #400]	; (80097b8 <tcp_output_segment+0x1ac>)
 8009628:	f003 fb60 	bl	800ccec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d106      	bne.n	8009640 <tcp_output_segment+0x34>
 8009632:	4b5f      	ldr	r3, [pc, #380]	; (80097b0 <tcp_output_segment+0x1a4>)
 8009634:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009638:	4960      	ldr	r1, [pc, #384]	; (80097bc <tcp_output_segment+0x1b0>)
 800963a:	485f      	ldr	r0, [pc, #380]	; (80097b8 <tcp_output_segment+0x1ac>)
 800963c:	f003 fb56 	bl	800ccec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d106      	bne.n	8009654 <tcp_output_segment+0x48>
 8009646:	4b5a      	ldr	r3, [pc, #360]	; (80097b0 <tcp_output_segment+0x1a4>)
 8009648:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800964c:	495c      	ldr	r1, [pc, #368]	; (80097c0 <tcp_output_segment+0x1b4>)
 800964e:	485a      	ldr	r0, [pc, #360]	; (80097b8 <tcp_output_segment+0x1ac>)
 8009650:	f003 fb4c 	bl	800ccec <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff ffb9 	bl	80095cc <tcp_output_segment_busy>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	e0a0      	b.n	80097a6 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	68dc      	ldr	r4, [r3, #12]
 800966c:	4610      	mov	r0, r2
 800966e:	f7f9 feb8 	bl	80033e2 <lwip_htonl>
 8009672:	4603      	mov	r3, r0
 8009674:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	68dc      	ldr	r4, [r3, #12]
 800967e:	4610      	mov	r0, r2
 8009680:	f7f9 fe9a 	bl	80033b8 <lwip_htons>
 8009684:	4603      	mov	r3, r0
 8009686:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009690:	441a      	add	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	3314      	adds	r3, #20
 800969c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	7a9b      	ldrb	r3, [r3, #10]
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d015      	beq.n	80096d6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	3304      	adds	r3, #4
 80096ae:	461a      	mov	r2, r3
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80096b6:	f7fc fe8d 	bl	80063d4 <tcp_eff_send_mss_netif>
 80096ba:	4603      	mov	r3, r0
 80096bc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80096be:	8b7b      	ldrh	r3, [r7, #26]
 80096c0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7f9 fe8c 	bl	80033e2 <lwip_htonl>
 80096ca:	4602      	mov	r2, r0
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	601a      	str	r2, [r3, #0]
    opts += 1;
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	3304      	adds	r3, #4
 80096d4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80096dc:	2b00      	cmp	r3, #0
 80096de:	da02      	bge.n	80096e6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2200      	movs	r2, #0
 80096e4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10c      	bne.n	8009708 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80096ee:	4b35      	ldr	r3, [pc, #212]	; (80097c4 <tcp_output_segment+0x1b8>)
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7f9 fe70 	bl	80033e2 <lwip_htonl>
 8009702:	4602      	mov	r2, r0
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	461a      	mov	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	8959      	ldrh	r1, [r3, #10]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	8b3a      	ldrh	r2, [r7, #24]
 8009724:	1a8a      	subs	r2, r1, r2
 8009726:	b292      	uxth	r2, r2
 8009728:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	8919      	ldrh	r1, [r3, #8]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	8b3a      	ldrh	r2, [r7, #24]
 8009736:	1a8a      	subs	r2, r1, r2
 8009738:	b292      	uxth	r2, r2
 800973a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	68d2      	ldr	r2, [r2, #12]
 8009744:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	741a      	strb	r2, [r3, #16]
 800974e:	2200      	movs	r2, #0
 8009750:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	f103 0214 	add.w	r2, r3, #20
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	7a9b      	ldrb	r3, [r3, #10]
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	4413      	add	r3, r2
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	429a      	cmp	r2, r3
 800976a:	d006      	beq.n	800977a <tcp_output_segment+0x16e>
 800976c:	4b10      	ldr	r3, [pc, #64]	; (80097b0 <tcp_output_segment+0x1a4>)
 800976e:	f240 621c 	movw	r2, #1564	; 0x61c
 8009772:	4915      	ldr	r1, [pc, #84]	; (80097c8 <tcp_output_segment+0x1bc>)
 8009774:	4810      	ldr	r0, [pc, #64]	; (80097b8 <tcp_output_segment+0x1ac>)
 8009776:	f003 fab9 	bl	800ccec <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6858      	ldr	r0, [r3, #4]
 800977e:	68b9      	ldr	r1, [r7, #8]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	1d1c      	adds	r4, r3, #4
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	7add      	ldrb	r5, [r3, #11]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	7a9b      	ldrb	r3, [r3, #10]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	9202      	str	r2, [sp, #8]
 8009790:	2206      	movs	r2, #6
 8009792:	9201      	str	r2, [sp, #4]
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	462b      	mov	r3, r5
 8009798:	4622      	mov	r2, r4
 800979a:	f002 fa3d 	bl	800bc18 <ip4_output_if>
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80097a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3720      	adds	r7, #32
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bdb0      	pop	{r4, r5, r7, pc}
 80097ae:	bf00      	nop
 80097b0:	0800f1f8 	.word	0x0800f1f8
 80097b4:	0800f7bc 	.word	0x0800f7bc
 80097b8:	0800f24c 	.word	0x0800f24c
 80097bc:	0800f7dc 	.word	0x0800f7dc
 80097c0:	0800f7fc 	.word	0x0800f7fc
 80097c4:	20006890 	.word	0x20006890
 80097c8:	0800f820 	.word	0x0800f820

080097cc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80097cc:	b5b0      	push	{r4, r5, r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d106      	bne.n	80097e8 <tcp_rexmit_rto_prepare+0x1c>
 80097da:	4b31      	ldr	r3, [pc, #196]	; (80098a0 <tcp_rexmit_rto_prepare+0xd4>)
 80097dc:	f240 6263 	movw	r2, #1635	; 0x663
 80097e0:	4930      	ldr	r1, [pc, #192]	; (80098a4 <tcp_rexmit_rto_prepare+0xd8>)
 80097e2:	4831      	ldr	r0, [pc, #196]	; (80098a8 <tcp_rexmit_rto_prepare+0xdc>)
 80097e4:	f003 fa82 	bl	800ccec <iprintf>

  if (pcb->unacked == NULL) {
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d102      	bne.n	80097f6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80097f0:	f06f 0305 	mvn.w	r3, #5
 80097f4:	e050      	b.n	8009898 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	e00b      	b.n	8009816 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f7ff fee4 	bl	80095cc <tcp_output_segment_busy>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800980a:	f06f 0305 	mvn.w	r3, #5
 800980e:	e043      	b.n	8009898 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1ef      	bne.n	80097fe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff fed4 	bl	80095cc <tcp_output_segment_busy>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800982a:	f06f 0305 	mvn.w	r3, #5
 800982e:	e033      	b.n	8009898 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	8b5b      	ldrh	r3, [r3, #26]
 800984a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800984e:	b29a      	uxth	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	4618      	mov	r0, r3
 800985c:	f7f9 fdc1 	bl	80033e2 <lwip_htonl>
 8009860:	4604      	mov	r4, r0
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	891b      	ldrh	r3, [r3, #8]
 8009866:	461d      	mov	r5, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	899b      	ldrh	r3, [r3, #12]
 800986e:	b29b      	uxth	r3, r3
 8009870:	4618      	mov	r0, r3
 8009872:	f7f9 fda1 	bl	80033b8 <lwip_htons>
 8009876:	4603      	mov	r3, r0
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <tcp_rexmit_rto_prepare+0xba>
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <tcp_rexmit_rto_prepare+0xbc>
 8009886:	2300      	movs	r3, #0
 8009888:	442b      	add	r3, r5
 800988a:	18e2      	adds	r2, r4, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bdb0      	pop	{r4, r5, r7, pc}
 80098a0:	0800f1f8 	.word	0x0800f1f8
 80098a4:	0800f834 	.word	0x0800f834
 80098a8:	0800f24c 	.word	0x0800f24c

080098ac <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d106      	bne.n	80098c8 <tcp_rexmit_rto_commit+0x1c>
 80098ba:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <tcp_rexmit_rto_commit+0x44>)
 80098bc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80098c0:	490c      	ldr	r1, [pc, #48]	; (80098f4 <tcp_rexmit_rto_commit+0x48>)
 80098c2:	480d      	ldr	r0, [pc, #52]	; (80098f8 <tcp_rexmit_rto_commit+0x4c>)
 80098c4:	f003 fa12 	bl	800ccec <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098ce:	2bff      	cmp	r3, #255	; 0xff
 80098d0:	d007      	beq.n	80098e2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098d8:	3301      	adds	r3, #1
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff fc7a 	bl	80091dc <tcp_output>
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	0800f1f8 	.word	0x0800f1f8
 80098f4:	0800f858 	.word	0x0800f858
 80098f8:	0800f24c 	.word	0x0800f24c

080098fc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d106      	bne.n	8009918 <tcp_rexmit_rto+0x1c>
 800990a:	4b0a      	ldr	r3, [pc, #40]	; (8009934 <tcp_rexmit_rto+0x38>)
 800990c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8009910:	4909      	ldr	r1, [pc, #36]	; (8009938 <tcp_rexmit_rto+0x3c>)
 8009912:	480a      	ldr	r0, [pc, #40]	; (800993c <tcp_rexmit_rto+0x40>)
 8009914:	f003 f9ea 	bl	800ccec <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f7ff ff57 	bl	80097cc <tcp_rexmit_rto_prepare>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d102      	bne.n	800992a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7ff ffc1 	bl	80098ac <tcp_rexmit_rto_commit>
  }
}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	0800f1f8 	.word	0x0800f1f8
 8009938:	0800f87c 	.word	0x0800f87c
 800993c:	0800f24c 	.word	0x0800f24c

08009940 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009940:	b590      	push	{r4, r7, lr}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d106      	bne.n	800995c <tcp_rexmit+0x1c>
 800994e:	4b2f      	ldr	r3, [pc, #188]	; (8009a0c <tcp_rexmit+0xcc>)
 8009950:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009954:	492e      	ldr	r1, [pc, #184]	; (8009a10 <tcp_rexmit+0xd0>)
 8009956:	482f      	ldr	r0, [pc, #188]	; (8009a14 <tcp_rexmit+0xd4>)
 8009958:	f003 f9c8 	bl	800ccec <iprintf>

  if (pcb->unacked == NULL) {
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009960:	2b00      	cmp	r3, #0
 8009962:	d102      	bne.n	800996a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8009964:	f06f 0305 	mvn.w	r3, #5
 8009968:	e04c      	b.n	8009a04 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8009970:	68b8      	ldr	r0, [r7, #8]
 8009972:	f7ff fe2b 	bl	80095cc <tcp_output_segment_busy>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800997c:	f06f 0305 	mvn.w	r3, #5
 8009980:	e040      	b.n	8009a04 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	336c      	adds	r3, #108	; 0x6c
 800998e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009990:	e002      	b.n	8009998 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d011      	beq.n	80099c4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7f9 fd1a 	bl	80033e2 <lwip_htonl>
 80099ae:	4604      	mov	r4, r0
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7f9 fd13 	bl	80033e2 <lwip_htonl>
 80099bc:	4603      	mov	r3, r0
 80099be:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dbe6      	blt.n	8009992 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d103      	bne.n	80099e2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099e8:	2bff      	cmp	r3, #255	; 0xff
 80099ea:	d007      	beq.n	80099fc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099f2:	3301      	adds	r3, #1
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd90      	pop	{r4, r7, pc}
 8009a0c:	0800f1f8 	.word	0x0800f1f8
 8009a10:	0800f898 	.word	0x0800f898
 8009a14:	0800f24c 	.word	0x0800f24c

08009a18 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d106      	bne.n	8009a34 <tcp_rexmit_fast+0x1c>
 8009a26:	4b2e      	ldr	r3, [pc, #184]	; (8009ae0 <tcp_rexmit_fast+0xc8>)
 8009a28:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009a2c:	492d      	ldr	r1, [pc, #180]	; (8009ae4 <tcp_rexmit_fast+0xcc>)
 8009a2e:	482e      	ldr	r0, [pc, #184]	; (8009ae8 <tcp_rexmit_fast+0xd0>)
 8009a30:	f003 f95c 	bl	800ccec <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d04d      	beq.n	8009ad8 <tcp_rexmit_fast+0xc0>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	8b5b      	ldrh	r3, [r3, #26]
 8009a40:	f003 0304 	and.w	r3, r3, #4
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d147      	bne.n	8009ad8 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff ff79 	bl	8009940 <tcp_rexmit>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d141      	bne.n	8009ad8 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d207      	bcs.n	8009a74 <tcp_rexmit_fast+0x5c>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009a6a:	0fda      	lsrs	r2, r3, #31
 8009a6c:	4413      	add	r3, r2
 8009a6e:	105b      	asrs	r3, r3, #1
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	e006      	b.n	8009a82 <tcp_rexmit_fast+0x6a>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a7a:	0fda      	lsrs	r2, r3, #31
 8009a7c:	4413      	add	r3, r2
 8009a7e:	105b      	asrs	r3, r3, #1
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009a8e:	461a      	mov	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d206      	bcs.n	8009aa8 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a9e:	005b      	lsls	r3, r3, #1
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	0049      	lsls	r1, r1, #1
 8009ab6:	440b      	add	r3, r1
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	4413      	add	r3, r2
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	8b5b      	ldrh	r3, [r3, #26]
 8009ac8:	f043 0304 	orr.w	r3, r3, #4
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	0800f1f8 	.word	0x0800f1f8
 8009ae4:	0800f8b0 	.word	0x0800f8b0
 8009ae8:	0800f24c 	.word	0x0800f24c

08009aec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b086      	sub	sp, #24
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	607b      	str	r3, [r7, #4]
 8009af6:	460b      	mov	r3, r1
 8009af8:	817b      	strh	r3, [r7, #10]
 8009afa:	4613      	mov	r3, r2
 8009afc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009afe:	897a      	ldrh	r2, [r7, #10]
 8009b00:	893b      	ldrh	r3, [r7, #8]
 8009b02:	4413      	add	r3, r2
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	3314      	adds	r3, #20
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009b0e:	4619      	mov	r1, r3
 8009b10:	2022      	movs	r0, #34	; 0x22
 8009b12:	f7fa fc21 	bl	8004358 <pbuf_alloc>
 8009b16:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d04e      	beq.n	8009bbc <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	895b      	ldrh	r3, [r3, #10]
 8009b22:	461a      	mov	r2, r3
 8009b24:	897b      	ldrh	r3, [r7, #10]
 8009b26:	3314      	adds	r3, #20
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	da06      	bge.n	8009b3a <tcp_output_alloc_header_common+0x4e>
 8009b2c:	4b26      	ldr	r3, [pc, #152]	; (8009bc8 <tcp_output_alloc_header_common+0xdc>)
 8009b2e:	f240 7224 	movw	r2, #1828	; 0x724
 8009b32:	4926      	ldr	r1, [pc, #152]	; (8009bcc <tcp_output_alloc_header_common+0xe0>)
 8009b34:	4826      	ldr	r0, [pc, #152]	; (8009bd0 <tcp_output_alloc_header_common+0xe4>)
 8009b36:	f003 f8d9 	bl	800ccec <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8009b40:	8c3b      	ldrh	r3, [r7, #32]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7f9 fc38 	bl	80033b8 <lwip_htons>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8009b50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7f9 fc30 	bl	80033b8 <lwip_htons>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f7f9 fc3b 	bl	80033e2 <lwip_htonl>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8009b72:	897b      	ldrh	r3, [r7, #10]
 8009b74:	089b      	lsrs	r3, r3, #2
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	3305      	adds	r3, #5
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	031b      	lsls	r3, r3, #12
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	4313      	orrs	r3, r2
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f9 fc14 	bl	80033b8 <lwip_htons>
 8009b90:	4603      	mov	r3, r0
 8009b92:	461a      	mov	r2, r3
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8009b98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7f9 fc0c 	bl	80033b8 <lwip_htons>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	2200      	movs	r2, #0
 8009bac:	741a      	strb	r2, [r3, #16]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	749a      	strb	r2, [r3, #18]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8009bbc:	697b      	ldr	r3, [r7, #20]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3718      	adds	r7, #24
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	0800f1f8 	.word	0x0800f1f8
 8009bcc:	0800f8d0 	.word	0x0800f8d0
 8009bd0:	0800f24c 	.word	0x0800f24c

08009bd4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8009bd4:	b5b0      	push	{r4, r5, r7, lr}
 8009bd6:	b08a      	sub	sp, #40	; 0x28
 8009bd8:	af04      	add	r7, sp, #16
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	607b      	str	r3, [r7, #4]
 8009bde:	460b      	mov	r3, r1
 8009be0:	817b      	strh	r3, [r7, #10]
 8009be2:	4613      	mov	r3, r2
 8009be4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d106      	bne.n	8009bfa <tcp_output_alloc_header+0x26>
 8009bec:	4b15      	ldr	r3, [pc, #84]	; (8009c44 <tcp_output_alloc_header+0x70>)
 8009bee:	f240 7242 	movw	r2, #1858	; 0x742
 8009bf2:	4915      	ldr	r1, [pc, #84]	; (8009c48 <tcp_output_alloc_header+0x74>)
 8009bf4:	4815      	ldr	r0, [pc, #84]	; (8009c4c <tcp_output_alloc_header+0x78>)
 8009bf6:	f003 f879 	bl	800ccec <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	8adb      	ldrh	r3, [r3, #22]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	8b12      	ldrh	r2, [r2, #24]
 8009c06:	68f9      	ldr	r1, [r7, #12]
 8009c08:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8009c0a:	893d      	ldrh	r5, [r7, #8]
 8009c0c:	897c      	ldrh	r4, [r7, #10]
 8009c0e:	9103      	str	r1, [sp, #12]
 8009c10:	2110      	movs	r1, #16
 8009c12:	9102      	str	r1, [sp, #8]
 8009c14:	9201      	str	r2, [sp, #4]
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	462a      	mov	r2, r5
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	f7ff ff65 	bl	8009aec <tcp_output_alloc_header_common>
 8009c22:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d006      	beq.n	8009c38 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009c32:	441a      	add	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8009c38:	697b      	ldr	r3, [r7, #20]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bdb0      	pop	{r4, r5, r7, pc}
 8009c42:	bf00      	nop
 8009c44:	0800f1f8 	.word	0x0800f1f8
 8009c48:	0800f900 	.word	0x0800f900
 8009c4c:	0800f24c 	.word	0x0800f24c

08009c50 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	460b      	mov	r3, r1
 8009c60:	71fb      	strb	r3, [r7, #7]
 8009c62:	4613      	mov	r3, r2
 8009c64:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8009c66:	2300      	movs	r3, #0
 8009c68:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d106      	bne.n	8009c7e <tcp_output_fill_options+0x2e>
 8009c70:	4b13      	ldr	r3, [pc, #76]	; (8009cc0 <tcp_output_fill_options+0x70>)
 8009c72:	f240 7256 	movw	r2, #1878	; 0x756
 8009c76:	4913      	ldr	r1, [pc, #76]	; (8009cc4 <tcp_output_fill_options+0x74>)
 8009c78:	4813      	ldr	r0, [pc, #76]	; (8009cc8 <tcp_output_fill_options+0x78>)
 8009c7a:	f003 f837 	bl	800ccec <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	3314      	adds	r3, #20
 8009c88:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	f103 0214 	add.w	r2, r3, #20
 8009c90:	8bfb      	ldrh	r3, [r7, #30]
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4619      	mov	r1, r3
 8009c96:	79fb      	ldrb	r3, [r7, #7]
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	440b      	add	r3, r1
 8009ca0:	4413      	add	r3, r2
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d006      	beq.n	8009cb6 <tcp_output_fill_options+0x66>
 8009ca8:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <tcp_output_fill_options+0x70>)
 8009caa:	f240 7275 	movw	r2, #1909	; 0x775
 8009cae:	4907      	ldr	r1, [pc, #28]	; (8009ccc <tcp_output_fill_options+0x7c>)
 8009cb0:	4805      	ldr	r0, [pc, #20]	; (8009cc8 <tcp_output_fill_options+0x78>)
 8009cb2:	f003 f81b 	bl	800ccec <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8009cb6:	bf00      	nop
 8009cb8:	3720      	adds	r7, #32
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	0800f1f8 	.word	0x0800f1f8
 8009cc4:	0800f928 	.word	0x0800f928
 8009cc8:	0800f24c 	.word	0x0800f24c
 8009ccc:	0800f820 	.word	0x0800f820

08009cd0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08a      	sub	sp, #40	; 0x28
 8009cd4:	af04      	add	r7, sp, #16
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d106      	bne.n	8009cf2 <tcp_output_control_segment+0x22>
 8009ce4:	4b1c      	ldr	r3, [pc, #112]	; (8009d58 <tcp_output_control_segment+0x88>)
 8009ce6:	f240 7287 	movw	r2, #1927	; 0x787
 8009cea:	491c      	ldr	r1, [pc, #112]	; (8009d5c <tcp_output_control_segment+0x8c>)
 8009cec:	481c      	ldr	r0, [pc, #112]	; (8009d60 <tcp_output_control_segment+0x90>)
 8009cee:	f002 fffd 	bl	800ccec <iprintf>

  netif = tcp_route(pcb, src, dst);
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f7fe ff30 	bl	8008b5c <tcp_route>
 8009cfc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8009d04:	23fc      	movs	r3, #252	; 0xfc
 8009d06:	75fb      	strb	r3, [r7, #23]
 8009d08:	e01c      	b.n	8009d44 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d006      	beq.n	8009d1e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	7adb      	ldrb	r3, [r3, #11]
 8009d14:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	7a9b      	ldrb	r3, [r3, #10]
 8009d1a:	757b      	strb	r3, [r7, #21]
 8009d1c:	e003      	b.n	8009d26 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8009d1e:	23ff      	movs	r3, #255	; 0xff
 8009d20:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8009d26:	7dba      	ldrb	r2, [r7, #22]
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	9302      	str	r3, [sp, #8]
 8009d2c:	2306      	movs	r3, #6
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	7d7b      	ldrb	r3, [r7, #21]
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	4613      	mov	r3, r2
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	68b8      	ldr	r0, [r7, #8]
 8009d3c:	f001 ff6c 	bl	800bc18 <ip4_output_if>
 8009d40:	4603      	mov	r3, r0
 8009d42:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8009d44:	68b8      	ldr	r0, [r7, #8]
 8009d46:	f7fa fde7 	bl	8004918 <pbuf_free>
  return err;
 8009d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3718      	adds	r7, #24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	0800f1f8 	.word	0x0800f1f8
 8009d5c:	0800f950 	.word	0x0800f950
 8009d60:	0800f24c 	.word	0x0800f24c

08009d64 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8009d64:	b590      	push	{r4, r7, lr}
 8009d66:	b08b      	sub	sp, #44	; 0x2c
 8009d68:	af04      	add	r7, sp, #16
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d106      	bne.n	8009d86 <tcp_rst+0x22>
 8009d78:	4b1f      	ldr	r3, [pc, #124]	; (8009df8 <tcp_rst+0x94>)
 8009d7a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8009d7e:	491f      	ldr	r1, [pc, #124]	; (8009dfc <tcp_rst+0x98>)
 8009d80:	481f      	ldr	r0, [pc, #124]	; (8009e00 <tcp_rst+0x9c>)
 8009d82:	f002 ffb3 	bl	800ccec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d106      	bne.n	8009d9a <tcp_rst+0x36>
 8009d8c:	4b1a      	ldr	r3, [pc, #104]	; (8009df8 <tcp_rst+0x94>)
 8009d8e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8009d92:	491c      	ldr	r1, [pc, #112]	; (8009e04 <tcp_rst+0xa0>)
 8009d94:	481a      	ldr	r0, [pc, #104]	; (8009e00 <tcp_rst+0x9c>)
 8009d96:	f002 ffa9 	bl	800ccec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8009d9e:	f246 0308 	movw	r3, #24584	; 0x6008
 8009da2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
 8009da6:	b29c      	uxth	r4, r3
 8009da8:	68b8      	ldr	r0, [r7, #8]
 8009daa:	f7f9 fb1a 	bl	80033e2 <lwip_htonl>
 8009dae:	4602      	mov	r2, r0
 8009db0:	8abb      	ldrh	r3, [r7, #20]
 8009db2:	9303      	str	r3, [sp, #12]
 8009db4:	2314      	movs	r3, #20
 8009db6:	9302      	str	r3, [sp, #8]
 8009db8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009dba:	9301      	str	r3, [sp, #4]
 8009dbc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7ff fe90 	bl	8009aec <tcp_output_alloc_header_common>
 8009dcc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00c      	beq.n	8009dee <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	6939      	ldr	r1, [r7, #16]
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f7ff ff38 	bl	8009c50 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	6939      	ldr	r1, [r7, #16]
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f7ff ff72 	bl	8009cd0 <tcp_output_control_segment>
 8009dec:	e000      	b.n	8009df0 <tcp_rst+0x8c>
    return;
 8009dee:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd90      	pop	{r4, r7, pc}
 8009df6:	bf00      	nop
 8009df8:	0800f1f8 	.word	0x0800f1f8
 8009dfc:	0800f97c 	.word	0x0800f97c
 8009e00:	0800f24c 	.word	0x0800f24c
 8009e04:	0800f998 	.word	0x0800f998

08009e08 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009e08:	b590      	push	{r4, r7, lr}
 8009e0a:	b087      	sub	sp, #28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <tcp_send_empty_ack+0x24>
 8009e1e:	4b28      	ldr	r3, [pc, #160]	; (8009ec0 <tcp_send_empty_ack+0xb8>)
 8009e20:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8009e24:	4927      	ldr	r1, [pc, #156]	; (8009ec4 <tcp_send_empty_ack+0xbc>)
 8009e26:	4828      	ldr	r0, [pc, #160]	; (8009ec8 <tcp_send_empty_ack+0xc0>)
 8009e28:	f002 ff60 	bl	800ccec <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	f003 0304 	and.w	r3, r3, #4
 8009e36:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009e38:	7d7b      	ldrb	r3, [r7, #21]
 8009e3a:	b29c      	uxth	r4, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7f9 face 	bl	80033e2 <lwip_htonl>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2200      	movs	r2, #0
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7ff fec1 	bl	8009bd4 <tcp_output_alloc_header>
 8009e52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d109      	bne.n	8009e6e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	8b5b      	ldrh	r3, [r3, #26]
 8009e5e:	f043 0303 	orr.w	r3, r3, #3
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009e68:	f06f 0301 	mvn.w	r3, #1
 8009e6c:	e023      	b.n	8009eb6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8009e6e:	7dbb      	ldrb	r3, [r7, #22]
 8009e70:	7dfa      	ldrb	r2, [r7, #23]
 8009e72:	6939      	ldr	r1, [r7, #16]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7ff feeb 	bl	8009c50 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3304      	adds	r3, #4
 8009e80:	6939      	ldr	r1, [r7, #16]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff ff24 	bl	8009cd0 <tcp_output_control_segment>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d007      	beq.n	8009ea4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	8b5b      	ldrh	r3, [r3, #26]
 8009e98:	f043 0303 	orr.w	r3, r3, #3
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	835a      	strh	r2, [r3, #26]
 8009ea2:	e006      	b.n	8009eb2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	8b5b      	ldrh	r3, [r3, #26]
 8009ea8:	f023 0303 	bic.w	r3, r3, #3
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8009eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	371c      	adds	r7, #28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd90      	pop	{r4, r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	0800f1f8 	.word	0x0800f1f8
 8009ec4:	0800f9b4 	.word	0x0800f9b4
 8009ec8:	0800f24c 	.word	0x0800f24c

08009ecc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009ecc:	b590      	push	{r4, r7, lr}
 8009ece:	b087      	sub	sp, #28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d106      	bne.n	8009eec <tcp_keepalive+0x20>
 8009ede:	4b18      	ldr	r3, [pc, #96]	; (8009f40 <tcp_keepalive+0x74>)
 8009ee0:	f640 0224 	movw	r2, #2084	; 0x824
 8009ee4:	4917      	ldr	r1, [pc, #92]	; (8009f44 <tcp_keepalive+0x78>)
 8009ee6:	4818      	ldr	r0, [pc, #96]	; (8009f48 <tcp_keepalive+0x7c>)
 8009ee8:	f002 ff00 	bl	800ccec <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
 8009eee:	b29c      	uxth	r4, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7f9 fa73 	bl	80033e2 <lwip_htonl>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2200      	movs	r2, #0
 8009f00:	4621      	mov	r1, r4
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff fe66 	bl	8009bd4 <tcp_output_alloc_header>
 8009f08:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d102      	bne.n	8009f16 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8009f10:	f04f 33ff 	mov.w	r3, #4294967295
 8009f14:	e010      	b.n	8009f38 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	6939      	ldr	r1, [r7, #16]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff fe97 	bl	8009c50 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3304      	adds	r3, #4
 8009f28:	6939      	ldr	r1, [r7, #16]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7ff fed0 	bl	8009cd0 <tcp_output_control_segment>
 8009f30:	4603      	mov	r3, r0
 8009f32:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	371c      	adds	r7, #28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd90      	pop	{r4, r7, pc}
 8009f40:	0800f1f8 	.word	0x0800f1f8
 8009f44:	0800f9d4 	.word	0x0800f9d4
 8009f48:	0800f24c 	.word	0x0800f24c

08009f4c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009f4c:	b590      	push	{r4, r7, lr}
 8009f4e:	b08b      	sub	sp, #44	; 0x2c
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009f54:	2300      	movs	r3, #0
 8009f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d106      	bne.n	8009f6e <tcp_zero_window_probe+0x22>
 8009f60:	4b4c      	ldr	r3, [pc, #304]	; (800a094 <tcp_zero_window_probe+0x148>)
 8009f62:	f640 024f 	movw	r2, #2127	; 0x84f
 8009f66:	494c      	ldr	r1, [pc, #304]	; (800a098 <tcp_zero_window_probe+0x14c>)
 8009f68:	484c      	ldr	r0, [pc, #304]	; (800a09c <tcp_zero_window_probe+0x150>)
 8009f6a:	f002 febf 	bl	800ccec <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f72:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d101      	bne.n	8009f7e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	e086      	b.n	800a08c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009f84:	2bff      	cmp	r3, #255	; 0xff
 8009f86:	d007      	beq.n	8009f98 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009f8e:	3301      	adds	r3, #1
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	899b      	ldrh	r3, [r3, #12]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7f9 fa09 	bl	80033b8 <lwip_htons>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d005      	beq.n	8009fbe <tcp_zero_window_probe+0x72>
 8009fb2:	6a3b      	ldr	r3, [r7, #32]
 8009fb4:	891b      	ldrh	r3, [r3, #8]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <tcp_zero_window_probe+0x72>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e000      	b.n	8009fc0 <tcp_zero_window_probe+0x74>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8009fc2:	7ffb      	ldrb	r3, [r7, #31]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	bf0c      	ite	eq
 8009fc8:	2301      	moveq	r3, #1
 8009fca:	2300      	movne	r3, #0
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8009fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd4:	b299      	uxth	r1, r3
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	8bba      	ldrh	r2, [r7, #28]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff fdf8 	bl	8009bd4 <tcp_output_alloc_header>
 8009fe4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d102      	bne.n	8009ff2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8009fec:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff0:	e04c      	b.n	800a08c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8009ff8:	7ffb      	ldrb	r3, [r7, #31]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d011      	beq.n	800a022 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	899b      	ldrh	r3, [r3, #12]
 800a002:	b29b      	uxth	r3, r3
 800a004:	b21b      	sxth	r3, r3
 800a006:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a00a:	b21c      	sxth	r4, r3
 800a00c:	2011      	movs	r0, #17
 800a00e:	f7f9 f9d3 	bl	80033b8 <lwip_htons>
 800a012:	4603      	mov	r3, r0
 800a014:	b21b      	sxth	r3, r3
 800a016:	4323      	orrs	r3, r4
 800a018:	b21b      	sxth	r3, r3
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	819a      	strh	r2, [r3, #12]
 800a020:	e010      	b.n	800a044 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	3314      	adds	r3, #20
 800a028:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	6858      	ldr	r0, [r3, #4]
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	891a      	ldrh	r2, [r3, #8]
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	891b      	ldrh	r3, [r3, #8]
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	2201      	movs	r2, #1
 800a03e:	6939      	ldr	r1, [r7, #16]
 800a040:	f7fa fe54 	bl	8004cec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7f9 f9c9 	bl	80033e2 <lwip_htonl>
 800a050:	4603      	mov	r3, r0
 800a052:	3301      	adds	r3, #1
 800a054:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	da02      	bge.n	800a068 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a06c:	2200      	movs	r2, #0
 800a06e:	69b9      	ldr	r1, [r7, #24]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f7ff fded 	bl	8009c50 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	3304      	adds	r3, #4
 800a07c:	69b9      	ldr	r1, [r7, #24]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7ff fe26 	bl	8009cd0 <tcp_output_control_segment>
 800a084:	4603      	mov	r3, r0
 800a086:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a088:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	372c      	adds	r7, #44	; 0x2c
 800a090:	46bd      	mov	sp, r7
 800a092:	bd90      	pop	{r4, r7, pc}
 800a094:	0800f1f8 	.word	0x0800f1f8
 800a098:	0800f9f0 	.word	0x0800f9f0
 800a09c:	0800f24c 	.word	0x0800f24c

0800a0a0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a0a8:	f7fa ff0e 	bl	8004ec8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a0ac:	4b0a      	ldr	r3, [pc, #40]	; (800a0d8 <tcpip_tcp_timer+0x38>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d103      	bne.n	800a0bc <tcpip_tcp_timer+0x1c>
 800a0b4:	4b09      	ldr	r3, [pc, #36]	; (800a0dc <tcpip_tcp_timer+0x3c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d005      	beq.n	800a0c8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4908      	ldr	r1, [pc, #32]	; (800a0e0 <tcpip_tcp_timer+0x40>)
 800a0c0:	20fa      	movs	r0, #250	; 0xfa
 800a0c2:	f000 f8f1 	bl	800a2a8 <sys_timeout>
 800a0c6:	e002      	b.n	800a0ce <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a0c8:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <tcpip_tcp_timer+0x44>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	601a      	str	r2, [r3, #0]
  }
}
 800a0ce:	bf00      	nop
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	2000688c 	.word	0x2000688c
 800a0dc:	2000689c 	.word	0x2000689c
 800a0e0:	0800a0a1 	.word	0x0800a0a1
 800a0e4:	20000108 	.word	0x20000108

0800a0e8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a0ec:	4b0a      	ldr	r3, [pc, #40]	; (800a118 <tcp_timer_needed+0x30>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10f      	bne.n	800a114 <tcp_timer_needed+0x2c>
 800a0f4:	4b09      	ldr	r3, [pc, #36]	; (800a11c <tcp_timer_needed+0x34>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d103      	bne.n	800a104 <tcp_timer_needed+0x1c>
 800a0fc:	4b08      	ldr	r3, [pc, #32]	; (800a120 <tcp_timer_needed+0x38>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a104:	4b04      	ldr	r3, [pc, #16]	; (800a118 <tcp_timer_needed+0x30>)
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a10a:	2200      	movs	r2, #0
 800a10c:	4905      	ldr	r1, [pc, #20]	; (800a124 <tcp_timer_needed+0x3c>)
 800a10e:	20fa      	movs	r0, #250	; 0xfa
 800a110:	f000 f8ca 	bl	800a2a8 <sys_timeout>
  }
}
 800a114:	bf00      	nop
 800a116:	bd80      	pop	{r7, pc}
 800a118:	20000108 	.word	0x20000108
 800a11c:	2000688c 	.word	0x2000688c
 800a120:	2000689c 	.word	0x2000689c
 800a124:	0800a0a1 	.word	0x0800a0a1

0800a128 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a134:	2006      	movs	r0, #6
 800a136:	f7f9 fd95 	bl	8003c64 <memp_malloc>
 800a13a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d109      	bne.n	800a156 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d151      	bne.n	800a1ec <sys_timeout_abs+0xc4>
 800a148:	4b2a      	ldr	r3, [pc, #168]	; (800a1f4 <sys_timeout_abs+0xcc>)
 800a14a:	22be      	movs	r2, #190	; 0xbe
 800a14c:	492a      	ldr	r1, [pc, #168]	; (800a1f8 <sys_timeout_abs+0xd0>)
 800a14e:	482b      	ldr	r0, [pc, #172]	; (800a1fc <sys_timeout_abs+0xd4>)
 800a150:	f002 fdcc 	bl	800ccec <iprintf>
    return;
 800a154:	e04a      	b.n	800a1ec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a16e:	4b24      	ldr	r3, [pc, #144]	; (800a200 <sys_timeout_abs+0xd8>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d103      	bne.n	800a17e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800a176:	4a22      	ldr	r2, [pc, #136]	; (800a200 <sys_timeout_abs+0xd8>)
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	6013      	str	r3, [r2, #0]
    return;
 800a17c:	e037      	b.n	800a1ee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	685a      	ldr	r2, [r3, #4]
 800a182:	4b1f      	ldr	r3, [pc, #124]	; (800a200 <sys_timeout_abs+0xd8>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	0fdb      	lsrs	r3, r3, #31
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d007      	beq.n	800a1a6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800a196:	4b1a      	ldr	r3, [pc, #104]	; (800a200 <sys_timeout_abs+0xd8>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a19e:	4a18      	ldr	r2, [pc, #96]	; (800a200 <sys_timeout_abs+0xd8>)
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	e023      	b.n	800a1ee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a1a6:	4b16      	ldr	r3, [pc, #88]	; (800a200 <sys_timeout_abs+0xd8>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	e01a      	b.n	800a1e4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00b      	beq.n	800a1ce <sys_timeout_abs+0xa6>
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	0fdb      	lsrs	r3, r3, #31
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d007      	beq.n	800a1de <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	601a      	str	r2, [r3, #0]
        break;
 800a1dc:	e007      	b.n	800a1ee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	617b      	str	r3, [r7, #20]
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1e1      	bne.n	800a1ae <sys_timeout_abs+0x86>
 800a1ea:	e000      	b.n	800a1ee <sys_timeout_abs+0xc6>
    return;
 800a1ec:	bf00      	nop
      }
    }
  }
}
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	0800fa14 	.word	0x0800fa14
 800a1f8:	0800fa48 	.word	0x0800fa48
 800a1fc:	0800fa88 	.word	0x0800fa88
 800a200:	20000100 	.word	0x20000100

0800a204 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	4798      	blx	r3

  now = sys_now();
 800a216:	f7f9 f841 	bl	800329c <sys_now>
 800a21a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	4b0f      	ldr	r3, [pc, #60]	; (800a260 <lwip_cyclic_timer+0x5c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4413      	add	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	0fdb      	lsrs	r3, r3, #31
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	d009      	beq.n	800a24e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	4413      	add	r3, r2
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	4907      	ldr	r1, [pc, #28]	; (800a264 <lwip_cyclic_timer+0x60>)
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff ff6e 	bl	800a128 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800a24c:	e004      	b.n	800a258 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	4904      	ldr	r1, [pc, #16]	; (800a264 <lwip_cyclic_timer+0x60>)
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f7ff ff68 	bl	800a128 <sys_timeout_abs>
}
 800a258:	bf00      	nop
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	20000104 	.word	0x20000104
 800a264:	0800a205 	.word	0x0800a205

0800a268 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a26e:	2301      	movs	r3, #1
 800a270:	607b      	str	r3, [r7, #4]
 800a272:	e00e      	b.n	800a292 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800a274:	4a0a      	ldr	r2, [pc, #40]	; (800a2a0 <sys_timeouts_init+0x38>)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	4a07      	ldr	r2, [pc, #28]	; (800a2a0 <sys_timeouts_init+0x38>)
 800a282:	4413      	add	r3, r2
 800a284:	461a      	mov	r2, r3
 800a286:	4907      	ldr	r1, [pc, #28]	; (800a2a4 <sys_timeouts_init+0x3c>)
 800a288:	f000 f80e 	bl	800a2a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3301      	adds	r3, #1
 800a290:	607b      	str	r3, [r7, #4]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b02      	cmp	r3, #2
 800a296:	d9ed      	bls.n	800a274 <sys_timeouts_init+0xc>
  }
}
 800a298:	bf00      	nop
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	080105ec 	.word	0x080105ec
 800a2a4:	0800a205 	.word	0x0800a205

0800a2a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ba:	d306      	bcc.n	800a2ca <sys_timeout+0x22>
 800a2bc:	4b0a      	ldr	r3, [pc, #40]	; (800a2e8 <sys_timeout+0x40>)
 800a2be:	f240 1229 	movw	r2, #297	; 0x129
 800a2c2:	490a      	ldr	r1, [pc, #40]	; (800a2ec <sys_timeout+0x44>)
 800a2c4:	480a      	ldr	r0, [pc, #40]	; (800a2f0 <sys_timeout+0x48>)
 800a2c6:	f002 fd11 	bl	800ccec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800a2ca:	f7f8 ffe7 	bl	800329c <sys_now>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	68b9      	ldr	r1, [r7, #8]
 800a2da:	6978      	ldr	r0, [r7, #20]
 800a2dc:	f7ff ff24 	bl	800a128 <sys_timeout_abs>
#endif
}
 800a2e0:	bf00      	nop
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	0800fa14 	.word	0x0800fa14
 800a2ec:	0800fab0 	.word	0x0800fab0
 800a2f0:	0800fa88 	.word	0x0800fa88

0800a2f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800a2fa:	f7f8 ffcf 	bl	800329c <sys_now>
 800a2fe:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800a300:	4b1a      	ldr	r3, [pc, #104]	; (800a36c <sys_check_timeouts+0x78>)
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <sys_check_timeouts+0x1a>
 800a30a:	f7f9 ffcf 	bl	80042ac <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800a30e:	4b18      	ldr	r3, [pc, #96]	; (800a370 <sys_check_timeouts+0x7c>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d022      	beq.n	800a360 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	0fdb      	lsrs	r3, r3, #31
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d11a      	bne.n	800a364 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a0f      	ldr	r2, [pc, #60]	; (800a370 <sys_check_timeouts+0x7c>)
 800a334:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	4a0b      	ldr	r2, [pc, #44]	; (800a374 <sys_check_timeouts+0x80>)
 800a348:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a34a:	68b9      	ldr	r1, [r7, #8]
 800a34c:	2006      	movs	r0, #6
 800a34e:	f7f9 fcd5 	bl	8003cfc <memp_free>
    if (handler != NULL) {
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d0d3      	beq.n	800a300 <sys_check_timeouts+0xc>
      handler(arg);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6838      	ldr	r0, [r7, #0]
 800a35c:	4798      	blx	r3
  do {
 800a35e:	e7cf      	b.n	800a300 <sys_check_timeouts+0xc>
      return;
 800a360:	bf00      	nop
 800a362:	e000      	b.n	800a366 <sys_check_timeouts+0x72>
      return;
 800a364:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	20006884 	.word	0x20006884
 800a370:	20000100 	.word	0x20000100
 800a374:	20000104 	.word	0x20000104

0800a378 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a37c:	f002 fcce 	bl	800cd1c <rand>
 800a380:	4603      	mov	r3, r0
 800a382:	b29b      	uxth	r3, r3
 800a384:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a388:	b29b      	uxth	r3, r3
 800a38a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a38e:	b29a      	uxth	r2, r3
 800a390:	4b01      	ldr	r3, [pc, #4]	; (800a398 <udp_init+0x20>)
 800a392:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a394:	bf00      	nop
 800a396:	bd80      	pop	{r7, pc}
 800a398:	20000010 	.word	0x20000010

0800a39c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d105      	bne.n	800a3bc <udp_input_local_match+0x20>
 800a3b0:	4b27      	ldr	r3, [pc, #156]	; (800a450 <udp_input_local_match+0xb4>)
 800a3b2:	2287      	movs	r2, #135	; 0x87
 800a3b4:	4927      	ldr	r1, [pc, #156]	; (800a454 <udp_input_local_match+0xb8>)
 800a3b6:	4828      	ldr	r0, [pc, #160]	; (800a458 <udp_input_local_match+0xbc>)
 800a3b8:	f002 fc98 	bl	800ccec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d105      	bne.n	800a3ce <udp_input_local_match+0x32>
 800a3c2:	4b23      	ldr	r3, [pc, #140]	; (800a450 <udp_input_local_match+0xb4>)
 800a3c4:	2288      	movs	r2, #136	; 0x88
 800a3c6:	4925      	ldr	r1, [pc, #148]	; (800a45c <udp_input_local_match+0xc0>)
 800a3c8:	4823      	ldr	r0, [pc, #140]	; (800a458 <udp_input_local_match+0xbc>)
 800a3ca:	f002 fc8f 	bl	800ccec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	7a1b      	ldrb	r3, [r3, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00b      	beq.n	800a3ee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	7a1a      	ldrb	r2, [r3, #8]
 800a3da:	4b21      	ldr	r3, [pc, #132]	; (800a460 <udp_input_local_match+0xc4>)
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d001      	beq.n	800a3ee <udp_input_local_match+0x52>
    return 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e02b      	b.n	800a446 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d018      	beq.n	800a426 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d013      	beq.n	800a422 <udp_input_local_match+0x86>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00f      	beq.n	800a422 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a402:	4b17      	ldr	r3, [pc, #92]	; (800a460 <udp_input_local_match+0xc4>)
 800a404:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40a:	d00a      	beq.n	800a422 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	4b13      	ldr	r3, [pc, #76]	; (800a460 <udp_input_local_match+0xc4>)
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	405a      	eors	r2, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	3308      	adds	r3, #8
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d110      	bne.n	800a444 <udp_input_local_match+0xa8>
          return 1;
 800a422:	2301      	movs	r3, #1
 800a424:	e00f      	b.n	800a446 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d009      	beq.n	800a440 <udp_input_local_match+0xa4>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d005      	beq.n	800a440 <udp_input_local_match+0xa4>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	4b09      	ldr	r3, [pc, #36]	; (800a460 <udp_input_local_match+0xc4>)
 800a43a:	695b      	ldr	r3, [r3, #20]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d101      	bne.n	800a444 <udp_input_local_match+0xa8>
        return 1;
 800a440:	2301      	movs	r3, #1
 800a442:	e000      	b.n	800a446 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	0800fafc 	.word	0x0800fafc
 800a454:	0800fb2c 	.word	0x0800fb2c
 800a458:	0800fb50 	.word	0x0800fb50
 800a45c:	0800fb78 	.word	0x0800fb78
 800a460:	20003348 	.word	0x20003348

0800a464 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a464:	b590      	push	{r4, r7, lr}
 800a466:	b08d      	sub	sp, #52	; 0x34
 800a468:	af02      	add	r7, sp, #8
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d105      	bne.n	800a484 <udp_input+0x20>
 800a478:	4b7c      	ldr	r3, [pc, #496]	; (800a66c <udp_input+0x208>)
 800a47a:	22cf      	movs	r2, #207	; 0xcf
 800a47c:	497c      	ldr	r1, [pc, #496]	; (800a670 <udp_input+0x20c>)
 800a47e:	487d      	ldr	r0, [pc, #500]	; (800a674 <udp_input+0x210>)
 800a480:	f002 fc34 	bl	800ccec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d105      	bne.n	800a496 <udp_input+0x32>
 800a48a:	4b78      	ldr	r3, [pc, #480]	; (800a66c <udp_input+0x208>)
 800a48c:	22d0      	movs	r2, #208	; 0xd0
 800a48e:	497a      	ldr	r1, [pc, #488]	; (800a678 <udp_input+0x214>)
 800a490:	4878      	ldr	r0, [pc, #480]	; (800a674 <udp_input+0x210>)
 800a492:	f002 fc2b 	bl	800ccec <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	895b      	ldrh	r3, [r3, #10]
 800a49a:	2b07      	cmp	r3, #7
 800a49c:	d803      	bhi.n	800a4a6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7fa fa3a 	bl	8004918 <pbuf_free>
    goto end;
 800a4a4:	e0de      	b.n	800a664 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a4ac:	4b73      	ldr	r3, [pc, #460]	; (800a67c <udp_input+0x218>)
 800a4ae:	695a      	ldr	r2, [r3, #20]
 800a4b0:	4b72      	ldr	r3, [pc, #456]	; (800a67c <udp_input+0x218>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	f001 fc86 	bl	800bdc8 <ip4_addr_isbroadcast_u32>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7f8 ff76 	bl	80033b8 <lwip_htons>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	885b      	ldrh	r3, [r3, #2]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7f8 ff6e 	bl	80033b8 <lwip_htons>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4ec:	4b64      	ldr	r3, [pc, #400]	; (800a680 <udp_input+0x21c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f2:	e054      	b.n	800a59e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	8a5b      	ldrh	r3, [r3, #18]
 800a4f8:	89fa      	ldrh	r2, [r7, #14]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d14a      	bne.n	800a594 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a4fe:	7cfb      	ldrb	r3, [r7, #19]
 800a500:	461a      	mov	r2, r3
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a506:	f7ff ff49 	bl	800a39c <udp_input_local_match>
 800a50a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d041      	beq.n	800a594 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	7c1b      	ldrb	r3, [r3, #16]
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d11d      	bne.n	800a558 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d102      	bne.n	800a528 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	61fb      	str	r3, [r7, #28]
 800a526:	e017      	b.n	800a558 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800a528:	7cfb      	ldrb	r3, [r7, #19]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d014      	beq.n	800a558 <udp_input+0xf4>
 800a52e:	4b53      	ldr	r3, [pc, #332]	; (800a67c <udp_input+0x218>)
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a536:	d10f      	bne.n	800a558 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	3304      	adds	r3, #4
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	429a      	cmp	r2, r3
 800a544:	d008      	beq.n	800a558 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800a546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	3304      	adds	r3, #4
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	429a      	cmp	r2, r3
 800a552:	d101      	bne.n	800a558 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	8a9b      	ldrh	r3, [r3, #20]
 800a55c:	8a3a      	ldrh	r2, [r7, #16]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d118      	bne.n	800a594 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a564:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a566:	2b00      	cmp	r3, #0
 800a568:	d005      	beq.n	800a576 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	4b43      	ldr	r3, [pc, #268]	; (800a67c <udp_input+0x218>)
 800a570:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a572:	429a      	cmp	r2, r3
 800a574:	d10e      	bne.n	800a594 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d014      	beq.n	800a5a6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	68da      	ldr	r2, [r3, #12]
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800a584:	4b3e      	ldr	r3, [pc, #248]	; (800a680 <udp_input+0x21c>)
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800a58c:	4a3c      	ldr	r2, [pc, #240]	; (800a680 <udp_input+0x21c>)
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800a592:	e008      	b.n	800a5a6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	627b      	str	r3, [r7, #36]	; 0x24
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1a7      	bne.n	800a4f4 <udp_input+0x90>
 800a5a4:	e000      	b.n	800a5a8 <udp_input+0x144>
        break;
 800a5a6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d101      	bne.n	800a5b2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <udp_input+0x15a>
    for_us = 1;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	76fb      	strb	r3, [r7, #27]
 800a5bc:	e00a      	b.n	800a5d4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	4b2d      	ldr	r3, [pc, #180]	; (800a67c <udp_input+0x218>)
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	bf0c      	ite	eq
 800a5cc:	2301      	moveq	r3, #1
 800a5ce:	2300      	movne	r3, #0
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800a5d4:	7efb      	ldrb	r3, [r7, #27]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d041      	beq.n	800a65e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800a5da:	2108      	movs	r1, #8
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7fa f915 	bl	800480c <pbuf_remove_header>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00a      	beq.n	800a5fe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800a5e8:	4b20      	ldr	r3, [pc, #128]	; (800a66c <udp_input+0x208>)
 800a5ea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800a5ee:	4925      	ldr	r1, [pc, #148]	; (800a684 <udp_input+0x220>)
 800a5f0:	4820      	ldr	r0, [pc, #128]	; (800a674 <udp_input+0x210>)
 800a5f2:	f002 fb7b 	bl	800ccec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7fa f98e 	bl	8004918 <pbuf_free>
      goto end;
 800a5fc:	e032      	b.n	800a664 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	d012      	beq.n	800a62a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00a      	beq.n	800a622 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	699c      	ldr	r4, [r3, #24]
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	69d8      	ldr	r0, [r3, #28]
 800a614:	8a3b      	ldrh	r3, [r7, #16]
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	4b1b      	ldr	r3, [pc, #108]	; (800a688 <udp_input+0x224>)
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a61e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800a620:	e021      	b.n	800a666 <udp_input+0x202>
        pbuf_free(p);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7fa f978 	bl	8004918 <pbuf_free>
        goto end;
 800a628:	e01c      	b.n	800a664 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a62a:	7cfb      	ldrb	r3, [r7, #19]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d112      	bne.n	800a656 <udp_input+0x1f2>
 800a630:	4b12      	ldr	r3, [pc, #72]	; (800a67c <udp_input+0x218>)
 800a632:	695b      	ldr	r3, [r3, #20]
 800a634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a638:	2be0      	cmp	r3, #224	; 0xe0
 800a63a:	d00c      	beq.n	800a656 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a63c:	4b0f      	ldr	r3, [pc, #60]	; (800a67c <udp_input+0x218>)
 800a63e:	899b      	ldrh	r3, [r3, #12]
 800a640:	3308      	adds	r3, #8
 800a642:	b29b      	uxth	r3, r3
 800a644:	b21b      	sxth	r3, r3
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7fa f952 	bl	80048f2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a64e:	2103      	movs	r1, #3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f001 f89b 	bl	800b78c <icmp_dest_unreach>
      pbuf_free(p);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f7fa f95e 	bl	8004918 <pbuf_free>
  return;
 800a65c:	e003      	b.n	800a666 <udp_input+0x202>
    pbuf_free(p);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7fa f95a 	bl	8004918 <pbuf_free>
  return;
 800a664:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a666:	372c      	adds	r7, #44	; 0x2c
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd90      	pop	{r4, r7, pc}
 800a66c:	0800fafc 	.word	0x0800fafc
 800a670:	0800fba0 	.word	0x0800fba0
 800a674:	0800fb50 	.word	0x0800fb50
 800a678:	0800fbb8 	.word	0x0800fbb8
 800a67c:	20003348 	.word	0x20003348
 800a680:	200068a4 	.word	0x200068a4
 800a684:	0800fbd4 	.word	0x0800fbd4
 800a688:	20003358 	.word	0x20003358

0800a68c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d01e      	beq.n	800a6da <udp_netif_ip_addr_changed+0x4e>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d01a      	beq.n	800a6da <udp_netif_ip_addr_changed+0x4e>
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d017      	beq.n	800a6da <udp_netif_ip_addr_changed+0x4e>
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d013      	beq.n	800a6da <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a6b2:	4b0d      	ldr	r3, [pc, #52]	; (800a6e8 <udp_netif_ip_addr_changed+0x5c>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	e00c      	b.n	800a6d4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d103      	bne.n	800a6ce <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1ef      	bne.n	800a6ba <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800a6da:	bf00      	nop
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	200068a4 	.word	0x200068a4

0800a6ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a6f4:	4915      	ldr	r1, [pc, #84]	; (800a74c <etharp_free_entry+0x60>)
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	4413      	add	r3, r2
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	440b      	add	r3, r1
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d013      	beq.n	800a730 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a708:	4910      	ldr	r1, [pc, #64]	; (800a74c <etharp_free_entry+0x60>)
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	4613      	mov	r3, r2
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	4413      	add	r3, r2
 800a712:	00db      	lsls	r3, r3, #3
 800a714:	440b      	add	r3, r1
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fa f8fd 	bl	8004918 <pbuf_free>
    arp_table[i].q = NULL;
 800a71e:	490b      	ldr	r1, [pc, #44]	; (800a74c <etharp_free_entry+0x60>)
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	4613      	mov	r3, r2
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	4413      	add	r3, r2
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	440b      	add	r3, r1
 800a72c:	2200      	movs	r2, #0
 800a72e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a730:	4906      	ldr	r1, [pc, #24]	; (800a74c <etharp_free_entry+0x60>)
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	4613      	mov	r3, r2
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	4413      	add	r3, r2
 800a73a:	00db      	lsls	r3, r3, #3
 800a73c:	440b      	add	r3, r1
 800a73e:	3314      	adds	r3, #20
 800a740:	2200      	movs	r2, #0
 800a742:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a744:	bf00      	nop
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	2000010c 	.word	0x2000010c

0800a750 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a756:	2300      	movs	r3, #0
 800a758:	607b      	str	r3, [r7, #4]
 800a75a:	e096      	b.n	800a88a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a75c:	494f      	ldr	r1, [pc, #316]	; (800a89c <etharp_tmr+0x14c>)
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	4613      	mov	r3, r2
 800a762:	005b      	lsls	r3, r3, #1
 800a764:	4413      	add	r3, r2
 800a766:	00db      	lsls	r3, r3, #3
 800a768:	440b      	add	r3, r1
 800a76a:	3314      	adds	r3, #20
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800a770:	78fb      	ldrb	r3, [r7, #3]
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 8086 	beq.w	800a884 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800a778:	4948      	ldr	r1, [pc, #288]	; (800a89c <etharp_tmr+0x14c>)
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	4613      	mov	r3, r2
 800a77e:	005b      	lsls	r3, r3, #1
 800a780:	4413      	add	r3, r2
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	440b      	add	r3, r1
 800a786:	3312      	adds	r3, #18
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	3301      	adds	r3, #1
 800a78c:	b298      	uxth	r0, r3
 800a78e:	4943      	ldr	r1, [pc, #268]	; (800a89c <etharp_tmr+0x14c>)
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	4613      	mov	r3, r2
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	4413      	add	r3, r2
 800a798:	00db      	lsls	r3, r3, #3
 800a79a:	440b      	add	r3, r1
 800a79c:	3312      	adds	r3, #18
 800a79e:	4602      	mov	r2, r0
 800a7a0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a7a2:	493e      	ldr	r1, [pc, #248]	; (800a89c <etharp_tmr+0x14c>)
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	4413      	add	r3, r2
 800a7ac:	00db      	lsls	r3, r3, #3
 800a7ae:	440b      	add	r3, r1
 800a7b0:	3312      	adds	r3, #18
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a7b8:	d215      	bcs.n	800a7e6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a7ba:	4938      	ldr	r1, [pc, #224]	; (800a89c <etharp_tmr+0x14c>)
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	4413      	add	r3, r2
 800a7c4:	00db      	lsls	r3, r3, #3
 800a7c6:	440b      	add	r3, r1
 800a7c8:	3314      	adds	r3, #20
 800a7ca:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d10e      	bne.n	800a7ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800a7d0:	4932      	ldr	r1, [pc, #200]	; (800a89c <etharp_tmr+0x14c>)
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	4413      	add	r3, r2
 800a7da:	00db      	lsls	r3, r3, #3
 800a7dc:	440b      	add	r3, r1
 800a7de:	3312      	adds	r3, #18
 800a7e0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	d903      	bls.n	800a7ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f7ff ff80 	bl	800a6ec <etharp_free_entry>
 800a7ec:	e04a      	b.n	800a884 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a7ee:	492b      	ldr	r1, [pc, #172]	; (800a89c <etharp_tmr+0x14c>)
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	4413      	add	r3, r2
 800a7f8:	00db      	lsls	r3, r3, #3
 800a7fa:	440b      	add	r3, r1
 800a7fc:	3314      	adds	r3, #20
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	2b03      	cmp	r3, #3
 800a802:	d10a      	bne.n	800a81a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a804:	4925      	ldr	r1, [pc, #148]	; (800a89c <etharp_tmr+0x14c>)
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	4613      	mov	r3, r2
 800a80a:	005b      	lsls	r3, r3, #1
 800a80c:	4413      	add	r3, r2
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	440b      	add	r3, r1
 800a812:	3314      	adds	r3, #20
 800a814:	2204      	movs	r2, #4
 800a816:	701a      	strb	r2, [r3, #0]
 800a818:	e034      	b.n	800a884 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a81a:	4920      	ldr	r1, [pc, #128]	; (800a89c <etharp_tmr+0x14c>)
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	4613      	mov	r3, r2
 800a820:	005b      	lsls	r3, r3, #1
 800a822:	4413      	add	r3, r2
 800a824:	00db      	lsls	r3, r3, #3
 800a826:	440b      	add	r3, r1
 800a828:	3314      	adds	r3, #20
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2b04      	cmp	r3, #4
 800a82e:	d10a      	bne.n	800a846 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a830:	491a      	ldr	r1, [pc, #104]	; (800a89c <etharp_tmr+0x14c>)
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	4613      	mov	r3, r2
 800a836:	005b      	lsls	r3, r3, #1
 800a838:	4413      	add	r3, r2
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	440b      	add	r3, r1
 800a83e:	3314      	adds	r3, #20
 800a840:	2202      	movs	r2, #2
 800a842:	701a      	strb	r2, [r3, #0]
 800a844:	e01e      	b.n	800a884 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a846:	4915      	ldr	r1, [pc, #84]	; (800a89c <etharp_tmr+0x14c>)
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	4613      	mov	r3, r2
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	4413      	add	r3, r2
 800a850:	00db      	lsls	r3, r3, #3
 800a852:	440b      	add	r3, r1
 800a854:	3314      	adds	r3, #20
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d113      	bne.n	800a884 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a85c:	490f      	ldr	r1, [pc, #60]	; (800a89c <etharp_tmr+0x14c>)
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	4613      	mov	r3, r2
 800a862:	005b      	lsls	r3, r3, #1
 800a864:	4413      	add	r3, r2
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	440b      	add	r3, r1
 800a86a:	3308      	adds	r3, #8
 800a86c:	6818      	ldr	r0, [r3, #0]
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	4613      	mov	r3, r2
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	4413      	add	r3, r2
 800a876:	00db      	lsls	r3, r3, #3
 800a878:	4a08      	ldr	r2, [pc, #32]	; (800a89c <etharp_tmr+0x14c>)
 800a87a:	4413      	add	r3, r2
 800a87c:	3304      	adds	r3, #4
 800a87e:	4619      	mov	r1, r3
 800a880:	f000 fe6e 	bl	800b560 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3301      	adds	r3, #1
 800a888:	607b      	str	r3, [r7, #4]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b09      	cmp	r3, #9
 800a88e:	f77f af65 	ble.w	800a75c <etharp_tmr+0xc>
      }
    }
  }
}
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	2000010c 	.word	0x2000010c

0800a8a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b08a      	sub	sp, #40	; 0x28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a8ae:	230a      	movs	r3, #10
 800a8b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a8b2:	230a      	movs	r3, #10
 800a8b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800a8b6:	230a      	movs	r3, #10
 800a8b8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800a8be:	230a      	movs	r3, #10
 800a8c0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	83bb      	strh	r3, [r7, #28]
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	837b      	strh	r3, [r7, #26]
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	843b      	strh	r3, [r7, #32]
 800a8d2:	e0ae      	b.n	800aa32 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800a8d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a8d8:	49a6      	ldr	r1, [pc, #664]	; (800ab74 <etharp_find_entry+0x2d4>)
 800a8da:	4613      	mov	r3, r2
 800a8dc:	005b      	lsls	r3, r3, #1
 800a8de:	4413      	add	r3, r2
 800a8e0:	00db      	lsls	r3, r3, #3
 800a8e2:	440b      	add	r3, r1
 800a8e4:	3314      	adds	r3, #20
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a8ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a8ee:	2b0a      	cmp	r3, #10
 800a8f0:	d105      	bne.n	800a8fe <etharp_find_entry+0x5e>
 800a8f2:	7dfb      	ldrb	r3, [r7, #23]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800a8f8:	8c3b      	ldrh	r3, [r7, #32]
 800a8fa:	847b      	strh	r3, [r7, #34]	; 0x22
 800a8fc:	e095      	b.n	800aa2a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a8fe:	7dfb      	ldrb	r3, [r7, #23]
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 8092 	beq.w	800aa2a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800a906:	7dfb      	ldrb	r3, [r7, #23]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d009      	beq.n	800a920 <etharp_find_entry+0x80>
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d806      	bhi.n	800a920 <etharp_find_entry+0x80>
 800a912:	4b99      	ldr	r3, [pc, #612]	; (800ab78 <etharp_find_entry+0x2d8>)
 800a914:	f44f 7292 	mov.w	r2, #292	; 0x124
 800a918:	4998      	ldr	r1, [pc, #608]	; (800ab7c <etharp_find_entry+0x2dc>)
 800a91a:	4899      	ldr	r0, [pc, #612]	; (800ab80 <etharp_find_entry+0x2e0>)
 800a91c:	f002 f9e6 	bl	800ccec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d020      	beq.n	800a968 <etharp_find_entry+0xc8>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6819      	ldr	r1, [r3, #0]
 800a92a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a92e:	4891      	ldr	r0, [pc, #580]	; (800ab74 <etharp_find_entry+0x2d4>)
 800a930:	4613      	mov	r3, r2
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	4413      	add	r3, r2
 800a936:	00db      	lsls	r3, r3, #3
 800a938:	4403      	add	r3, r0
 800a93a:	3304      	adds	r3, #4
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4299      	cmp	r1, r3
 800a940:	d112      	bne.n	800a968 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00c      	beq.n	800a962 <etharp_find_entry+0xc2>
 800a948:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a94c:	4989      	ldr	r1, [pc, #548]	; (800ab74 <etharp_find_entry+0x2d4>)
 800a94e:	4613      	mov	r3, r2
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	4413      	add	r3, r2
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	440b      	add	r3, r1
 800a958:	3308      	adds	r3, #8
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d102      	bne.n	800a968 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800a962:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a966:	e100      	b.n	800ab6a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a968:	7dfb      	ldrb	r3, [r7, #23]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d140      	bne.n	800a9f0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800a96e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a972:	4980      	ldr	r1, [pc, #512]	; (800ab74 <etharp_find_entry+0x2d4>)
 800a974:	4613      	mov	r3, r2
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	4413      	add	r3, r2
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	440b      	add	r3, r1
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d01a      	beq.n	800a9ba <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800a984:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a988:	497a      	ldr	r1, [pc, #488]	; (800ab74 <etharp_find_entry+0x2d4>)
 800a98a:	4613      	mov	r3, r2
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	4413      	add	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	440b      	add	r3, r1
 800a994:	3312      	adds	r3, #18
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	8bba      	ldrh	r2, [r7, #28]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d845      	bhi.n	800aa2a <etharp_find_entry+0x18a>
            old_queue = i;
 800a99e:	8c3b      	ldrh	r3, [r7, #32]
 800a9a0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800a9a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a9a6:	4973      	ldr	r1, [pc, #460]	; (800ab74 <etharp_find_entry+0x2d4>)
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	4413      	add	r3, r2
 800a9ae:	00db      	lsls	r3, r3, #3
 800a9b0:	440b      	add	r3, r1
 800a9b2:	3312      	adds	r3, #18
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	83bb      	strh	r3, [r7, #28]
 800a9b8:	e037      	b.n	800aa2a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800a9ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a9be:	496d      	ldr	r1, [pc, #436]	; (800ab74 <etharp_find_entry+0x2d4>)
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	005b      	lsls	r3, r3, #1
 800a9c4:	4413      	add	r3, r2
 800a9c6:	00db      	lsls	r3, r3, #3
 800a9c8:	440b      	add	r3, r1
 800a9ca:	3312      	adds	r3, #18
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	8b7a      	ldrh	r2, [r7, #26]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d82a      	bhi.n	800aa2a <etharp_find_entry+0x18a>
            old_pending = i;
 800a9d4:	8c3b      	ldrh	r3, [r7, #32]
 800a9d6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800a9d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a9dc:	4965      	ldr	r1, [pc, #404]	; (800ab74 <etharp_find_entry+0x2d4>)
 800a9de:	4613      	mov	r3, r2
 800a9e0:	005b      	lsls	r3, r3, #1
 800a9e2:	4413      	add	r3, r2
 800a9e4:	00db      	lsls	r3, r3, #3
 800a9e6:	440b      	add	r3, r1
 800a9e8:	3312      	adds	r3, #18
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	837b      	strh	r3, [r7, #26]
 800a9ee:	e01c      	b.n	800aa2a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d919      	bls.n	800aa2a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a9f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a9fa:	495e      	ldr	r1, [pc, #376]	; (800ab74 <etharp_find_entry+0x2d4>)
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	005b      	lsls	r3, r3, #1
 800aa00:	4413      	add	r3, r2
 800aa02:	00db      	lsls	r3, r3, #3
 800aa04:	440b      	add	r3, r1
 800aa06:	3312      	adds	r3, #18
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	8b3a      	ldrh	r2, [r7, #24]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d80c      	bhi.n	800aa2a <etharp_find_entry+0x18a>
            old_stable = i;
 800aa10:	8c3b      	ldrh	r3, [r7, #32]
 800aa12:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800aa14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aa18:	4956      	ldr	r1, [pc, #344]	; (800ab74 <etharp_find_entry+0x2d4>)
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	4413      	add	r3, r2
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	440b      	add	r3, r1
 800aa24:	3312      	adds	r3, #18
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800aa2a:	8c3b      	ldrh	r3, [r7, #32]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	843b      	strh	r3, [r7, #32]
 800aa32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800aa36:	2b09      	cmp	r3, #9
 800aa38:	f77f af4c 	ble.w	800a8d4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800aa3c:	7afb      	ldrb	r3, [r7, #11]
 800aa3e:	f003 0302 	and.w	r3, r3, #2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d108      	bne.n	800aa58 <etharp_find_entry+0x1b8>
 800aa46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800aa4a:	2b0a      	cmp	r3, #10
 800aa4c:	d107      	bne.n	800aa5e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800aa4e:	7afb      	ldrb	r3, [r7, #11]
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d102      	bne.n	800aa5e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800aa58:	f04f 33ff 	mov.w	r3, #4294967295
 800aa5c:	e085      	b.n	800ab6a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800aa5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800aa62:	2b09      	cmp	r3, #9
 800aa64:	dc02      	bgt.n	800aa6c <etharp_find_entry+0x1cc>
    i = empty;
 800aa66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa68:	843b      	strh	r3, [r7, #32]
 800aa6a:	e039      	b.n	800aae0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800aa6c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800aa70:	2b09      	cmp	r3, #9
 800aa72:	dc14      	bgt.n	800aa9e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800aa74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa76:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800aa78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aa7c:	493d      	ldr	r1, [pc, #244]	; (800ab74 <etharp_find_entry+0x2d4>)
 800aa7e:	4613      	mov	r3, r2
 800aa80:	005b      	lsls	r3, r3, #1
 800aa82:	4413      	add	r3, r2
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	440b      	add	r3, r1
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d018      	beq.n	800aac0 <etharp_find_entry+0x220>
 800aa8e:	4b3a      	ldr	r3, [pc, #232]	; (800ab78 <etharp_find_entry+0x2d8>)
 800aa90:	f240 126d 	movw	r2, #365	; 0x16d
 800aa94:	493b      	ldr	r1, [pc, #236]	; (800ab84 <etharp_find_entry+0x2e4>)
 800aa96:	483a      	ldr	r0, [pc, #232]	; (800ab80 <etharp_find_entry+0x2e0>)
 800aa98:	f002 f928 	bl	800ccec <iprintf>
 800aa9c:	e010      	b.n	800aac0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800aa9e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800aaa2:	2b09      	cmp	r3, #9
 800aaa4:	dc02      	bgt.n	800aaac <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800aaa6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aaa8:	843b      	strh	r3, [r7, #32]
 800aaaa:	e009      	b.n	800aac0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800aaac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800aab0:	2b09      	cmp	r3, #9
 800aab2:	dc02      	bgt.n	800aaba <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800aab4:	8bfb      	ldrh	r3, [r7, #30]
 800aab6:	843b      	strh	r3, [r7, #32]
 800aab8:	e002      	b.n	800aac0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800aaba:	f04f 33ff 	mov.w	r3, #4294967295
 800aabe:	e054      	b.n	800ab6a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800aac0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800aac4:	2b09      	cmp	r3, #9
 800aac6:	dd06      	ble.n	800aad6 <etharp_find_entry+0x236>
 800aac8:	4b2b      	ldr	r3, [pc, #172]	; (800ab78 <etharp_find_entry+0x2d8>)
 800aaca:	f240 127f 	movw	r2, #383	; 0x17f
 800aace:	492e      	ldr	r1, [pc, #184]	; (800ab88 <etharp_find_entry+0x2e8>)
 800aad0:	482b      	ldr	r0, [pc, #172]	; (800ab80 <etharp_find_entry+0x2e0>)
 800aad2:	f002 f90b 	bl	800ccec <iprintf>
    etharp_free_entry(i);
 800aad6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff fe06 	bl	800a6ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800aae0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800aae4:	2b09      	cmp	r3, #9
 800aae6:	dd06      	ble.n	800aaf6 <etharp_find_entry+0x256>
 800aae8:	4b23      	ldr	r3, [pc, #140]	; (800ab78 <etharp_find_entry+0x2d8>)
 800aaea:	f240 1283 	movw	r2, #387	; 0x183
 800aaee:	4926      	ldr	r1, [pc, #152]	; (800ab88 <etharp_find_entry+0x2e8>)
 800aaf0:	4823      	ldr	r0, [pc, #140]	; (800ab80 <etharp_find_entry+0x2e0>)
 800aaf2:	f002 f8fb 	bl	800ccec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800aaf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800aafa:	491e      	ldr	r1, [pc, #120]	; (800ab74 <etharp_find_entry+0x2d4>)
 800aafc:	4613      	mov	r3, r2
 800aafe:	005b      	lsls	r3, r3, #1
 800ab00:	4413      	add	r3, r2
 800ab02:	00db      	lsls	r3, r3, #3
 800ab04:	440b      	add	r3, r1
 800ab06:	3314      	adds	r3, #20
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d006      	beq.n	800ab1c <etharp_find_entry+0x27c>
 800ab0e:	4b1a      	ldr	r3, [pc, #104]	; (800ab78 <etharp_find_entry+0x2d8>)
 800ab10:	f240 1285 	movw	r2, #389	; 0x185
 800ab14:	491d      	ldr	r1, [pc, #116]	; (800ab8c <etharp_find_entry+0x2ec>)
 800ab16:	481a      	ldr	r0, [pc, #104]	; (800ab80 <etharp_find_entry+0x2e0>)
 800ab18:	f002 f8e8 	bl	800ccec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00b      	beq.n	800ab3a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ab22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6819      	ldr	r1, [r3, #0]
 800ab2a:	4812      	ldr	r0, [pc, #72]	; (800ab74 <etharp_find_entry+0x2d4>)
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	4413      	add	r3, r2
 800ab32:	00db      	lsls	r3, r3, #3
 800ab34:	4403      	add	r3, r0
 800ab36:	3304      	adds	r3, #4
 800ab38:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ab3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab3e:	490d      	ldr	r1, [pc, #52]	; (800ab74 <etharp_find_entry+0x2d4>)
 800ab40:	4613      	mov	r3, r2
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	4413      	add	r3, r2
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	440b      	add	r3, r1
 800ab4a:	3312      	adds	r3, #18
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ab50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ab54:	4907      	ldr	r1, [pc, #28]	; (800ab74 <etharp_find_entry+0x2d4>)
 800ab56:	4613      	mov	r3, r2
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	4413      	add	r3, r2
 800ab5c:	00db      	lsls	r3, r3, #3
 800ab5e:	440b      	add	r3, r1
 800ab60:	3308      	adds	r3, #8
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ab66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3728      	adds	r7, #40	; 0x28
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	2000010c 	.word	0x2000010c
 800ab78:	0800fe60 	.word	0x0800fe60
 800ab7c:	0800fe98 	.word	0x0800fe98
 800ab80:	0800fed8 	.word	0x0800fed8
 800ab84:	0800ff00 	.word	0x0800ff00
 800ab88:	0800ff18 	.word	0x0800ff18
 800ab8c:	0800ff2c 	.word	0x0800ff2c

0800ab90 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af02      	add	r7, sp, #8
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aba4:	2b06      	cmp	r3, #6
 800aba6:	d006      	beq.n	800abb6 <etharp_update_arp_entry+0x26>
 800aba8:	4b48      	ldr	r3, [pc, #288]	; (800accc <etharp_update_arp_entry+0x13c>)
 800abaa:	f240 12a9 	movw	r2, #425	; 0x1a9
 800abae:	4948      	ldr	r1, [pc, #288]	; (800acd0 <etharp_update_arp_entry+0x140>)
 800abb0:	4848      	ldr	r0, [pc, #288]	; (800acd4 <etharp_update_arp_entry+0x144>)
 800abb2:	f002 f89b 	bl	800ccec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d012      	beq.n	800abe2 <etharp_update_arp_entry+0x52>
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00e      	beq.n	800abe2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68f9      	ldr	r1, [r7, #12]
 800abca:	4618      	mov	r0, r3
 800abcc:	f001 f8fc 	bl	800bdc8 <ip4_addr_isbroadcast_u32>
 800abd0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d105      	bne.n	800abe2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800abde:	2be0      	cmp	r3, #224	; 0xe0
 800abe0:	d102      	bne.n	800abe8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800abe2:	f06f 030f 	mvn.w	r3, #15
 800abe6:	e06c      	b.n	800acc2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800abe8:	78fb      	ldrb	r3, [r7, #3]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4619      	mov	r1, r3
 800abee:	68b8      	ldr	r0, [r7, #8]
 800abf0:	f7ff fe56 	bl	800a8a0 <etharp_find_entry>
 800abf4:	4603      	mov	r3, r0
 800abf6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800abf8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	da02      	bge.n	800ac06 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ac00:	8afb      	ldrh	r3, [r7, #22]
 800ac02:	b25b      	sxtb	r3, r3
 800ac04:	e05d      	b.n	800acc2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ac06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ac0a:	4933      	ldr	r1, [pc, #204]	; (800acd8 <etharp_update_arp_entry+0x148>)
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	4413      	add	r3, r2
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	440b      	add	r3, r1
 800ac16:	3314      	adds	r3, #20
 800ac18:	2202      	movs	r2, #2
 800ac1a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ac1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ac20:	492d      	ldr	r1, [pc, #180]	; (800acd8 <etharp_update_arp_entry+0x148>)
 800ac22:	4613      	mov	r3, r2
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	4413      	add	r3, r2
 800ac28:	00db      	lsls	r3, r3, #3
 800ac2a:	440b      	add	r3, r1
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ac32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ac36:	4613      	mov	r3, r2
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	4413      	add	r3, r2
 800ac3c:	00db      	lsls	r3, r3, #3
 800ac3e:	3308      	adds	r3, #8
 800ac40:	4a25      	ldr	r2, [pc, #148]	; (800acd8 <etharp_update_arp_entry+0x148>)
 800ac42:	4413      	add	r3, r2
 800ac44:	3304      	adds	r3, #4
 800ac46:	2206      	movs	r2, #6
 800ac48:	6879      	ldr	r1, [r7, #4]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f002 f83b 	bl	800ccc6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ac50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ac54:	4920      	ldr	r1, [pc, #128]	; (800acd8 <etharp_update_arp_entry+0x148>)
 800ac56:	4613      	mov	r3, r2
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	4413      	add	r3, r2
 800ac5c:	00db      	lsls	r3, r3, #3
 800ac5e:	440b      	add	r3, r1
 800ac60:	3312      	adds	r3, #18
 800ac62:	2200      	movs	r2, #0
 800ac64:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ac66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ac6a:	491b      	ldr	r1, [pc, #108]	; (800acd8 <etharp_update_arp_entry+0x148>)
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	4413      	add	r3, r2
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	440b      	add	r3, r1
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d021      	beq.n	800acc0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ac7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ac80:	4915      	ldr	r1, [pc, #84]	; (800acd8 <etharp_update_arp_entry+0x148>)
 800ac82:	4613      	mov	r3, r2
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	4413      	add	r3, r2
 800ac88:	00db      	lsls	r3, r3, #3
 800ac8a:	440b      	add	r3, r1
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ac90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ac94:	4910      	ldr	r1, [pc, #64]	; (800acd8 <etharp_update_arp_entry+0x148>)
 800ac96:	4613      	mov	r3, r2
 800ac98:	005b      	lsls	r3, r3, #1
 800ac9a:	4413      	add	r3, r2
 800ac9c:	00db      	lsls	r3, r3, #3
 800ac9e:	440b      	add	r3, r1
 800aca0:	2200      	movs	r2, #0
 800aca2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800acaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6939      	ldr	r1, [r7, #16]
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f001 ff8b 	bl	800cbd0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800acba:	6938      	ldr	r0, [r7, #16]
 800acbc:	f7f9 fe2c 	bl	8004918 <pbuf_free>
  }
  return ERR_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3718      	adds	r7, #24
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	0800fe60 	.word	0x0800fe60
 800acd0:	0800ff58 	.word	0x0800ff58
 800acd4:	0800fed8 	.word	0x0800fed8
 800acd8:	2000010c 	.word	0x2000010c

0800acdc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ace4:	2300      	movs	r3, #0
 800ace6:	60fb      	str	r3, [r7, #12]
 800ace8:	e01e      	b.n	800ad28 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800acea:	4913      	ldr	r1, [pc, #76]	; (800ad38 <etharp_cleanup_netif+0x5c>)
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	4613      	mov	r3, r2
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	4413      	add	r3, r2
 800acf4:	00db      	lsls	r3, r3, #3
 800acf6:	440b      	add	r3, r1
 800acf8:	3314      	adds	r3, #20
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800acfe:	7afb      	ldrb	r3, [r7, #11]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00e      	beq.n	800ad22 <etharp_cleanup_netif+0x46>
 800ad04:	490c      	ldr	r1, [pc, #48]	; (800ad38 <etharp_cleanup_netif+0x5c>)
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	4613      	mov	r3, r2
 800ad0a:	005b      	lsls	r3, r3, #1
 800ad0c:	4413      	add	r3, r2
 800ad0e:	00db      	lsls	r3, r3, #3
 800ad10:	440b      	add	r3, r1
 800ad12:	3308      	adds	r3, #8
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d102      	bne.n	800ad22 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f7ff fce5 	bl	800a6ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3301      	adds	r3, #1
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b09      	cmp	r3, #9
 800ad2c:	dddd      	ble.n	800acea <etharp_cleanup_netif+0xe>
    }
  }
}
 800ad2e:	bf00      	nop
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	2000010c 	.word	0x2000010c

0800ad3c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ad3c:	b5b0      	push	{r4, r5, r7, lr}
 800ad3e:	b08a      	sub	sp, #40	; 0x28
 800ad40:	af04      	add	r7, sp, #16
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d107      	bne.n	800ad5c <etharp_input+0x20>
 800ad4c:	4b3d      	ldr	r3, [pc, #244]	; (800ae44 <etharp_input+0x108>)
 800ad4e:	f240 228a 	movw	r2, #650	; 0x28a
 800ad52:	493d      	ldr	r1, [pc, #244]	; (800ae48 <etharp_input+0x10c>)
 800ad54:	483d      	ldr	r0, [pc, #244]	; (800ae4c <etharp_input+0x110>)
 800ad56:	f001 ffc9 	bl	800ccec <iprintf>
 800ad5a:	e06f      	b.n	800ae3c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	881b      	ldrh	r3, [r3, #0]
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad6c:	d10c      	bne.n	800ad88 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ad72:	2b06      	cmp	r3, #6
 800ad74:	d108      	bne.n	800ad88 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ad7a:	2b04      	cmp	r3, #4
 800ad7c:	d104      	bne.n	800ad88 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	885b      	ldrh	r3, [r3, #2]
 800ad82:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ad84:	2b08      	cmp	r3, #8
 800ad86:	d003      	beq.n	800ad90 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7f9 fdc5 	bl	8004918 <pbuf_free>
    return;
 800ad8e:	e055      	b.n	800ae3c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	330e      	adds	r3, #14
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	3318      	adds	r3, #24
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	3304      	adds	r3, #4
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d102      	bne.n	800adb0 <etharp_input+0x74>
    for_us = 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	75fb      	strb	r3, [r7, #23]
 800adae:	e009      	b.n	800adc4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	3304      	adds	r3, #4
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	429a      	cmp	r2, r3
 800adba:	bf0c      	ite	eq
 800adbc:	2301      	moveq	r3, #1
 800adbe:	2300      	movne	r3, #0
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	f103 0208 	add.w	r2, r3, #8
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <etharp_input+0x98>
 800add0:	2301      	movs	r3, #1
 800add2:	e000      	b.n	800add6 <etharp_input+0x9a>
 800add4:	2302      	movs	r3, #2
 800add6:	f107 010c 	add.w	r1, r7, #12
 800adda:	6838      	ldr	r0, [r7, #0]
 800addc:	f7ff fed8 	bl	800ab90 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	88db      	ldrh	r3, [r3, #6]
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adea:	d003      	beq.n	800adf4 <etharp_input+0xb8>
 800adec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adf0:	d01e      	beq.n	800ae30 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800adf2:	e020      	b.n	800ae36 <etharp_input+0xfa>
      if (for_us) {
 800adf4:	7dfb      	ldrb	r3, [r7, #23]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01c      	beq.n	800ae34 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ae10:	693a      	ldr	r2, [r7, #16]
 800ae12:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ae14:	2102      	movs	r1, #2
 800ae16:	9103      	str	r1, [sp, #12]
 800ae18:	f107 010c 	add.w	r1, r7, #12
 800ae1c:	9102      	str	r1, [sp, #8]
 800ae1e:	9201      	str	r2, [sp, #4]
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	462b      	mov	r3, r5
 800ae24:	4622      	mov	r2, r4
 800ae26:	4601      	mov	r1, r0
 800ae28:	6838      	ldr	r0, [r7, #0]
 800ae2a:	f000 faeb 	bl	800b404 <etharp_raw>
      break;
 800ae2e:	e001      	b.n	800ae34 <etharp_input+0xf8>
      break;
 800ae30:	bf00      	nop
 800ae32:	e000      	b.n	800ae36 <etharp_input+0xfa>
      break;
 800ae34:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7f9 fd6e 	bl	8004918 <pbuf_free>
}
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bdb0      	pop	{r4, r5, r7, pc}
 800ae42:	bf00      	nop
 800ae44:	0800fe60 	.word	0x0800fe60
 800ae48:	0800ffb0 	.word	0x0800ffb0
 800ae4c:	0800fed8 	.word	0x0800fed8

0800ae50 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af02      	add	r7, sp, #8
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ae5e:	79fa      	ldrb	r2, [r7, #7]
 800ae60:	4944      	ldr	r1, [pc, #272]	; (800af74 <etharp_output_to_arp_index+0x124>)
 800ae62:	4613      	mov	r3, r2
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	4413      	add	r3, r2
 800ae68:	00db      	lsls	r3, r3, #3
 800ae6a:	440b      	add	r3, r1
 800ae6c:	3314      	adds	r3, #20
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d806      	bhi.n	800ae82 <etharp_output_to_arp_index+0x32>
 800ae74:	4b40      	ldr	r3, [pc, #256]	; (800af78 <etharp_output_to_arp_index+0x128>)
 800ae76:	f240 22ef 	movw	r2, #751	; 0x2ef
 800ae7a:	4940      	ldr	r1, [pc, #256]	; (800af7c <etharp_output_to_arp_index+0x12c>)
 800ae7c:	4840      	ldr	r0, [pc, #256]	; (800af80 <etharp_output_to_arp_index+0x130>)
 800ae7e:	f001 ff35 	bl	800ccec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ae82:	79fa      	ldrb	r2, [r7, #7]
 800ae84:	493b      	ldr	r1, [pc, #236]	; (800af74 <etharp_output_to_arp_index+0x124>)
 800ae86:	4613      	mov	r3, r2
 800ae88:	005b      	lsls	r3, r3, #1
 800ae8a:	4413      	add	r3, r2
 800ae8c:	00db      	lsls	r3, r3, #3
 800ae8e:	440b      	add	r3, r1
 800ae90:	3314      	adds	r3, #20
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d153      	bne.n	800af40 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ae98:	79fa      	ldrb	r2, [r7, #7]
 800ae9a:	4936      	ldr	r1, [pc, #216]	; (800af74 <etharp_output_to_arp_index+0x124>)
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	005b      	lsls	r3, r3, #1
 800aea0:	4413      	add	r3, r2
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	440b      	add	r3, r1
 800aea6:	3312      	adds	r3, #18
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800aeae:	d919      	bls.n	800aee4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800aeb0:	79fa      	ldrb	r2, [r7, #7]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	4413      	add	r3, r2
 800aeb8:	00db      	lsls	r3, r3, #3
 800aeba:	4a2e      	ldr	r2, [pc, #184]	; (800af74 <etharp_output_to_arp_index+0x124>)
 800aebc:	4413      	add	r3, r2
 800aebe:	3304      	adds	r3, #4
 800aec0:	4619      	mov	r1, r3
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f000 fb4c 	bl	800b560 <etharp_request>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d138      	bne.n	800af40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800aece:	79fa      	ldrb	r2, [r7, #7]
 800aed0:	4928      	ldr	r1, [pc, #160]	; (800af74 <etharp_output_to_arp_index+0x124>)
 800aed2:	4613      	mov	r3, r2
 800aed4:	005b      	lsls	r3, r3, #1
 800aed6:	4413      	add	r3, r2
 800aed8:	00db      	lsls	r3, r3, #3
 800aeda:	440b      	add	r3, r1
 800aedc:	3314      	adds	r3, #20
 800aede:	2203      	movs	r2, #3
 800aee0:	701a      	strb	r2, [r3, #0]
 800aee2:	e02d      	b.n	800af40 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800aee4:	79fa      	ldrb	r2, [r7, #7]
 800aee6:	4923      	ldr	r1, [pc, #140]	; (800af74 <etharp_output_to_arp_index+0x124>)
 800aee8:	4613      	mov	r3, r2
 800aeea:	005b      	lsls	r3, r3, #1
 800aeec:	4413      	add	r3, r2
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	440b      	add	r3, r1
 800aef2:	3312      	adds	r3, #18
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800aefa:	d321      	bcc.n	800af40 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800aefc:	79fa      	ldrb	r2, [r7, #7]
 800aefe:	4613      	mov	r3, r2
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	4413      	add	r3, r2
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	4a1b      	ldr	r2, [pc, #108]	; (800af74 <etharp_output_to_arp_index+0x124>)
 800af08:	4413      	add	r3, r2
 800af0a:	1d19      	adds	r1, r3, #4
 800af0c:	79fa      	ldrb	r2, [r7, #7]
 800af0e:	4613      	mov	r3, r2
 800af10:	005b      	lsls	r3, r3, #1
 800af12:	4413      	add	r3, r2
 800af14:	00db      	lsls	r3, r3, #3
 800af16:	3308      	adds	r3, #8
 800af18:	4a16      	ldr	r2, [pc, #88]	; (800af74 <etharp_output_to_arp_index+0x124>)
 800af1a:	4413      	add	r3, r2
 800af1c:	3304      	adds	r3, #4
 800af1e:	461a      	mov	r2, r3
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f000 fafb 	bl	800b51c <etharp_request_dst>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d109      	bne.n	800af40 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800af2c:	79fa      	ldrb	r2, [r7, #7]
 800af2e:	4911      	ldr	r1, [pc, #68]	; (800af74 <etharp_output_to_arp_index+0x124>)
 800af30:	4613      	mov	r3, r2
 800af32:	005b      	lsls	r3, r3, #1
 800af34:	4413      	add	r3, r2
 800af36:	00db      	lsls	r3, r3, #3
 800af38:	440b      	add	r3, r1
 800af3a:	3314      	adds	r3, #20
 800af3c:	2203      	movs	r2, #3
 800af3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800af46:	79fa      	ldrb	r2, [r7, #7]
 800af48:	4613      	mov	r3, r2
 800af4a:	005b      	lsls	r3, r3, #1
 800af4c:	4413      	add	r3, r2
 800af4e:	00db      	lsls	r3, r3, #3
 800af50:	3308      	adds	r3, #8
 800af52:	4a08      	ldr	r2, [pc, #32]	; (800af74 <etharp_output_to_arp_index+0x124>)
 800af54:	4413      	add	r3, r2
 800af56:	1d1a      	adds	r2, r3, #4
 800af58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	4613      	mov	r3, r2
 800af60:	460a      	mov	r2, r1
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f001 fe33 	bl	800cbd0 <ethernet_output>
 800af6a:	4603      	mov	r3, r0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	2000010c 	.word	0x2000010c
 800af78:	0800fe60 	.word	0x0800fe60
 800af7c:	0800ffd0 	.word	0x0800ffd0
 800af80:	0800fed8 	.word	0x0800fed8

0800af84 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b08a      	sub	sp, #40	; 0x28
 800af88:	af02      	add	r7, sp, #8
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d106      	bne.n	800afa8 <etharp_output+0x24>
 800af9a:	4b73      	ldr	r3, [pc, #460]	; (800b168 <etharp_output+0x1e4>)
 800af9c:	f240 321e 	movw	r2, #798	; 0x31e
 800afa0:	4972      	ldr	r1, [pc, #456]	; (800b16c <etharp_output+0x1e8>)
 800afa2:	4873      	ldr	r0, [pc, #460]	; (800b170 <etharp_output+0x1ec>)
 800afa4:	f001 fea2 	bl	800ccec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d106      	bne.n	800afbc <etharp_output+0x38>
 800afae:	4b6e      	ldr	r3, [pc, #440]	; (800b168 <etharp_output+0x1e4>)
 800afb0:	f240 321f 	movw	r2, #799	; 0x31f
 800afb4:	496f      	ldr	r1, [pc, #444]	; (800b174 <etharp_output+0x1f0>)
 800afb6:	486e      	ldr	r0, [pc, #440]	; (800b170 <etharp_output+0x1ec>)
 800afb8:	f001 fe98 	bl	800ccec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d106      	bne.n	800afd0 <etharp_output+0x4c>
 800afc2:	4b69      	ldr	r3, [pc, #420]	; (800b168 <etharp_output+0x1e4>)
 800afc4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800afc8:	496b      	ldr	r1, [pc, #428]	; (800b178 <etharp_output+0x1f4>)
 800afca:	4869      	ldr	r0, [pc, #420]	; (800b170 <etharp_output+0x1ec>)
 800afcc:	f001 fe8e 	bl	800ccec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68f9      	ldr	r1, [r7, #12]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 fef6 	bl	800bdc8 <ip4_addr_isbroadcast_u32>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d002      	beq.n	800afe8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800afe2:	4b66      	ldr	r3, [pc, #408]	; (800b17c <etharp_output+0x1f8>)
 800afe4:	61fb      	str	r3, [r7, #28]
 800afe6:	e0af      	b.n	800b148 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aff0:	2be0      	cmp	r3, #224	; 0xe0
 800aff2:	d118      	bne.n	800b026 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800aff4:	2301      	movs	r3, #1
 800aff6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800aff8:	2300      	movs	r3, #0
 800affa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800affc:	235e      	movs	r3, #94	; 0x5e
 800affe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3301      	adds	r3, #1
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	3302      	adds	r3, #2
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	3303      	adds	r3, #3
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b01e:	f107 0310 	add.w	r3, r7, #16
 800b022:	61fb      	str	r3, [r7, #28]
 800b024:	e090      	b.n	800b148 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3304      	adds	r3, #4
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	405a      	eors	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3308      	adds	r3, #8
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4013      	ands	r3, r2
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d012      	beq.n	800b064 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b044:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b048:	4293      	cmp	r3, r2
 800b04a:	d00b      	beq.n	800b064 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	330c      	adds	r3, #12
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	330c      	adds	r3, #12
 800b05a:	61bb      	str	r3, [r7, #24]
 800b05c:	e002      	b.n	800b064 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b05e:	f06f 0303 	mvn.w	r3, #3
 800b062:	e07d      	b.n	800b160 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b064:	4b46      	ldr	r3, [pc, #280]	; (800b180 <etharp_output+0x1fc>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	4619      	mov	r1, r3
 800b06a:	4a46      	ldr	r2, [pc, #280]	; (800b184 <etharp_output+0x200>)
 800b06c:	460b      	mov	r3, r1
 800b06e:	005b      	lsls	r3, r3, #1
 800b070:	440b      	add	r3, r1
 800b072:	00db      	lsls	r3, r3, #3
 800b074:	4413      	add	r3, r2
 800b076:	3314      	adds	r3, #20
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d925      	bls.n	800b0ca <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b07e:	4b40      	ldr	r3, [pc, #256]	; (800b180 <etharp_output+0x1fc>)
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	4619      	mov	r1, r3
 800b084:	4a3f      	ldr	r2, [pc, #252]	; (800b184 <etharp_output+0x200>)
 800b086:	460b      	mov	r3, r1
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	440b      	add	r3, r1
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	4413      	add	r3, r2
 800b090:	3308      	adds	r3, #8
 800b092:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	429a      	cmp	r2, r3
 800b098:	d117      	bne.n	800b0ca <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	4b38      	ldr	r3, [pc, #224]	; (800b180 <etharp_output+0x1fc>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	4937      	ldr	r1, [pc, #220]	; (800b184 <etharp_output+0x200>)
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	005b      	lsls	r3, r3, #1
 800b0aa:	4403      	add	r3, r0
 800b0ac:	00db      	lsls	r3, r3, #3
 800b0ae:	440b      	add	r3, r1
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d108      	bne.n	800b0ca <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b0b8:	4b31      	ldr	r3, [pc, #196]	; (800b180 <etharp_output+0x1fc>)
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	68b9      	ldr	r1, [r7, #8]
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f7ff fec5 	bl	800ae50 <etharp_output_to_arp_index>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	e04a      	b.n	800b160 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	75fb      	strb	r3, [r7, #23]
 800b0ce:	e031      	b.n	800b134 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b0d0:	7dfa      	ldrb	r2, [r7, #23]
 800b0d2:	492c      	ldr	r1, [pc, #176]	; (800b184 <etharp_output+0x200>)
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	4413      	add	r3, r2
 800b0da:	00db      	lsls	r3, r3, #3
 800b0dc:	440b      	add	r3, r1
 800b0de:	3314      	adds	r3, #20
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d923      	bls.n	800b12e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800b0e6:	7dfa      	ldrb	r2, [r7, #23]
 800b0e8:	4926      	ldr	r1, [pc, #152]	; (800b184 <etharp_output+0x200>)
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	005b      	lsls	r3, r3, #1
 800b0ee:	4413      	add	r3, r2
 800b0f0:	00db      	lsls	r3, r3, #3
 800b0f2:	440b      	add	r3, r1
 800b0f4:	3308      	adds	r3, #8
 800b0f6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d117      	bne.n	800b12e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	6819      	ldr	r1, [r3, #0]
 800b102:	7dfa      	ldrb	r2, [r7, #23]
 800b104:	481f      	ldr	r0, [pc, #124]	; (800b184 <etharp_output+0x200>)
 800b106:	4613      	mov	r3, r2
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	4413      	add	r3, r2
 800b10c:	00db      	lsls	r3, r3, #3
 800b10e:	4403      	add	r3, r0
 800b110:	3304      	adds	r3, #4
 800b112:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800b114:	4299      	cmp	r1, r3
 800b116:	d10a      	bne.n	800b12e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800b118:	4a19      	ldr	r2, [pc, #100]	; (800b180 <etharp_output+0x1fc>)
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
 800b120:	461a      	mov	r2, r3
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f7ff fe93 	bl	800ae50 <etharp_output_to_arp_index>
 800b12a:	4603      	mov	r3, r0
 800b12c:	e018      	b.n	800b160 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b12e:	7dfb      	ldrb	r3, [r7, #23]
 800b130:	3301      	adds	r3, #1
 800b132:	75fb      	strb	r3, [r7, #23]
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	2b09      	cmp	r3, #9
 800b138:	d9ca      	bls.n	800b0d0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	69b9      	ldr	r1, [r7, #24]
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f000 f822 	bl	800b188 <etharp_query>
 800b144:	4603      	mov	r3, r0
 800b146:	e00b      	b.n	800b160 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b14e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	68b9      	ldr	r1, [r7, #8]
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f001 fd39 	bl	800cbd0 <ethernet_output>
 800b15e:	4603      	mov	r3, r0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3720      	adds	r7, #32
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	0800fe60 	.word	0x0800fe60
 800b16c:	0800ffb0 	.word	0x0800ffb0
 800b170:	0800fed8 	.word	0x0800fed8
 800b174:	08010000 	.word	0x08010000
 800b178:	0800ffa0 	.word	0x0800ffa0
 800b17c:	08010608 	.word	0x08010608
 800b180:	200001fc 	.word	0x200001fc
 800b184:	2000010c 	.word	0x2000010c

0800b188 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08c      	sub	sp, #48	; 0x30
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3326      	adds	r3, #38	; 0x26
 800b198:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b19a:	23ff      	movs	r3, #255	; 0xff
 800b19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68f9      	ldr	r1, [r7, #12]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fe0c 	bl	800bdc8 <ip4_addr_isbroadcast_u32>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10c      	bne.n	800b1d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b1be:	2be0      	cmp	r3, #224	; 0xe0
 800b1c0:	d006      	beq.n	800b1d0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d003      	beq.n	800b1d0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d102      	bne.n	800b1d6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b1d0:	f06f 030f 	mvn.w	r3, #15
 800b1d4:	e102      	b.n	800b3dc <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	2101      	movs	r1, #1
 800b1da:	68b8      	ldr	r0, [r7, #8]
 800b1dc:	f7ff fb60 	bl	800a8a0 <etharp_find_entry>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800b1e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	da02      	bge.n	800b1f2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800b1ec:	8a7b      	ldrh	r3, [r7, #18]
 800b1ee:	b25b      	sxtb	r3, r3
 800b1f0:	e0f4      	b.n	800b3dc <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800b1f2:	8a7b      	ldrh	r3, [r7, #18]
 800b1f4:	2b7e      	cmp	r3, #126	; 0x7e
 800b1f6:	d906      	bls.n	800b206 <etharp_query+0x7e>
 800b1f8:	4b7a      	ldr	r3, [pc, #488]	; (800b3e4 <etharp_query+0x25c>)
 800b1fa:	f240 32c1 	movw	r2, #961	; 0x3c1
 800b1fe:	497a      	ldr	r1, [pc, #488]	; (800b3e8 <etharp_query+0x260>)
 800b200:	487a      	ldr	r0, [pc, #488]	; (800b3ec <etharp_query+0x264>)
 800b202:	f001 fd73 	bl	800ccec <iprintf>
  i = (netif_addr_idx_t)i_err;
 800b206:	8a7b      	ldrh	r3, [r7, #18]
 800b208:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b20a:	7c7a      	ldrb	r2, [r7, #17]
 800b20c:	4978      	ldr	r1, [pc, #480]	; (800b3f0 <etharp_query+0x268>)
 800b20e:	4613      	mov	r3, r2
 800b210:	005b      	lsls	r3, r3, #1
 800b212:	4413      	add	r3, r2
 800b214:	00db      	lsls	r3, r3, #3
 800b216:	440b      	add	r3, r1
 800b218:	3314      	adds	r3, #20
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d115      	bne.n	800b24c <etharp_query+0xc4>
    is_new_entry = 1;
 800b220:	2301      	movs	r3, #1
 800b222:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b224:	7c7a      	ldrb	r2, [r7, #17]
 800b226:	4972      	ldr	r1, [pc, #456]	; (800b3f0 <etharp_query+0x268>)
 800b228:	4613      	mov	r3, r2
 800b22a:	005b      	lsls	r3, r3, #1
 800b22c:	4413      	add	r3, r2
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	440b      	add	r3, r1
 800b232:	3314      	adds	r3, #20
 800b234:	2201      	movs	r2, #1
 800b236:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b238:	7c7a      	ldrb	r2, [r7, #17]
 800b23a:	496d      	ldr	r1, [pc, #436]	; (800b3f0 <etharp_query+0x268>)
 800b23c:	4613      	mov	r3, r2
 800b23e:	005b      	lsls	r3, r3, #1
 800b240:	4413      	add	r3, r2
 800b242:	00db      	lsls	r3, r3, #3
 800b244:	440b      	add	r3, r1
 800b246:	3308      	adds	r3, #8
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b24c:	7c7a      	ldrb	r2, [r7, #17]
 800b24e:	4968      	ldr	r1, [pc, #416]	; (800b3f0 <etharp_query+0x268>)
 800b250:	4613      	mov	r3, r2
 800b252:	005b      	lsls	r3, r3, #1
 800b254:	4413      	add	r3, r2
 800b256:	00db      	lsls	r3, r3, #3
 800b258:	440b      	add	r3, r1
 800b25a:	3314      	adds	r3, #20
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d011      	beq.n	800b286 <etharp_query+0xfe>
 800b262:	7c7a      	ldrb	r2, [r7, #17]
 800b264:	4962      	ldr	r1, [pc, #392]	; (800b3f0 <etharp_query+0x268>)
 800b266:	4613      	mov	r3, r2
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	4413      	add	r3, r2
 800b26c:	00db      	lsls	r3, r3, #3
 800b26e:	440b      	add	r3, r1
 800b270:	3314      	adds	r3, #20
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d806      	bhi.n	800b286 <etharp_query+0xfe>
 800b278:	4b5a      	ldr	r3, [pc, #360]	; (800b3e4 <etharp_query+0x25c>)
 800b27a:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b27e:	495d      	ldr	r1, [pc, #372]	; (800b3f4 <etharp_query+0x26c>)
 800b280:	485a      	ldr	r0, [pc, #360]	; (800b3ec <etharp_query+0x264>)
 800b282:	f001 fd33 	bl	800ccec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d102      	bne.n	800b292 <etharp_query+0x10a>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10c      	bne.n	800b2ac <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b292:	68b9      	ldr	r1, [r7, #8]
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 f963 	bl	800b560 <etharp_request>
 800b29a:	4603      	mov	r3, r0
 800b29c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d102      	bne.n	800b2ac <etharp_query+0x124>
      return result;
 800b2a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2aa:	e097      	b.n	800b3dc <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d106      	bne.n	800b2c0 <etharp_query+0x138>
 800b2b2:	4b4c      	ldr	r3, [pc, #304]	; (800b3e4 <etharp_query+0x25c>)
 800b2b4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800b2b8:	494f      	ldr	r1, [pc, #316]	; (800b3f8 <etharp_query+0x270>)
 800b2ba:	484c      	ldr	r0, [pc, #304]	; (800b3ec <etharp_query+0x264>)
 800b2bc:	f001 fd16 	bl	800ccec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b2c0:	7c7a      	ldrb	r2, [r7, #17]
 800b2c2:	494b      	ldr	r1, [pc, #300]	; (800b3f0 <etharp_query+0x268>)
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	4413      	add	r3, r2
 800b2ca:	00db      	lsls	r3, r3, #3
 800b2cc:	440b      	add	r3, r1
 800b2ce:	3314      	adds	r3, #20
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d918      	bls.n	800b308 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800b2d6:	4a49      	ldr	r2, [pc, #292]	; (800b3fc <etharp_query+0x274>)
 800b2d8:	7c7b      	ldrb	r3, [r7, #17]
 800b2da:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b2dc:	7c7a      	ldrb	r2, [r7, #17]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	4413      	add	r3, r2
 800b2e4:	00db      	lsls	r3, r3, #3
 800b2e6:	3308      	adds	r3, #8
 800b2e8:	4a41      	ldr	r2, [pc, #260]	; (800b3f0 <etharp_query+0x268>)
 800b2ea:	4413      	add	r3, r2
 800b2ec:	1d1a      	adds	r2, r3, #4
 800b2ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	6879      	ldr	r1, [r7, #4]
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f001 fc68 	bl	800cbd0 <ethernet_output>
 800b300:	4603      	mov	r3, r0
 800b302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b306:	e067      	b.n	800b3d8 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b308:	7c7a      	ldrb	r2, [r7, #17]
 800b30a:	4939      	ldr	r1, [pc, #228]	; (800b3f0 <etharp_query+0x268>)
 800b30c:	4613      	mov	r3, r2
 800b30e:	005b      	lsls	r3, r3, #1
 800b310:	4413      	add	r3, r2
 800b312:	00db      	lsls	r3, r3, #3
 800b314:	440b      	add	r3, r1
 800b316:	3314      	adds	r3, #20
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d15c      	bne.n	800b3d8 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b31e:	2300      	movs	r3, #0
 800b320:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b326:	e01c      	b.n	800b362 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	895a      	ldrh	r2, [r3, #10]
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	891b      	ldrh	r3, [r3, #8]
 800b330:	429a      	cmp	r2, r3
 800b332:	d10a      	bne.n	800b34a <etharp_query+0x1c2>
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d006      	beq.n	800b34a <etharp_query+0x1c2>
 800b33c:	4b29      	ldr	r3, [pc, #164]	; (800b3e4 <etharp_query+0x25c>)
 800b33e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b342:	492f      	ldr	r1, [pc, #188]	; (800b400 <etharp_query+0x278>)
 800b344:	4829      	ldr	r0, [pc, #164]	; (800b3ec <etharp_query+0x264>)
 800b346:	f001 fcd1 	bl	800ccec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	7b1b      	ldrb	r3, [r3, #12]
 800b34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b352:	2b00      	cmp	r3, #0
 800b354:	d002      	beq.n	800b35c <etharp_query+0x1d4>
        copy_needed = 1;
 800b356:	2301      	movs	r3, #1
 800b358:	61bb      	str	r3, [r7, #24]
        break;
 800b35a:	e005      	b.n	800b368 <etharp_query+0x1e0>
      }
      p = p->next;
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1df      	bne.n	800b328 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d007      	beq.n	800b37e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	f44f 7120 	mov.w	r1, #640	; 0x280
 800b374:	200e      	movs	r0, #14
 800b376:	f7f9 fd2b 	bl	8004dd0 <pbuf_clone>
 800b37a:	61f8      	str	r0, [r7, #28]
 800b37c:	e004      	b.n	800b388 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b382:	69f8      	ldr	r0, [r7, #28]
 800b384:	f7f9 fb68 	bl	8004a58 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d021      	beq.n	800b3d2 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b38e:	7c7a      	ldrb	r2, [r7, #17]
 800b390:	4917      	ldr	r1, [pc, #92]	; (800b3f0 <etharp_query+0x268>)
 800b392:	4613      	mov	r3, r2
 800b394:	005b      	lsls	r3, r3, #1
 800b396:	4413      	add	r3, r2
 800b398:	00db      	lsls	r3, r3, #3
 800b39a:	440b      	add	r3, r1
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00a      	beq.n	800b3b8 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800b3a2:	7c7a      	ldrb	r2, [r7, #17]
 800b3a4:	4912      	ldr	r1, [pc, #72]	; (800b3f0 <etharp_query+0x268>)
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	4413      	add	r3, r2
 800b3ac:	00db      	lsls	r3, r3, #3
 800b3ae:	440b      	add	r3, r1
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7f9 fab0 	bl	8004918 <pbuf_free>
      }
      arp_table[i].q = p;
 800b3b8:	7c7a      	ldrb	r2, [r7, #17]
 800b3ba:	490d      	ldr	r1, [pc, #52]	; (800b3f0 <etharp_query+0x268>)
 800b3bc:	4613      	mov	r3, r2
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	4413      	add	r3, r2
 800b3c2:	00db      	lsls	r3, r3, #3
 800b3c4:	440b      	add	r3, r1
 800b3c6:	69fa      	ldr	r2, [r7, #28]
 800b3c8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3d0:	e002      	b.n	800b3d8 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b3d2:	23ff      	movs	r3, #255	; 0xff
 800b3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b3d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3728      	adds	r7, #40	; 0x28
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	0800fe60 	.word	0x0800fe60
 800b3e8:	0801000c 	.word	0x0801000c
 800b3ec:	0800fed8 	.word	0x0800fed8
 800b3f0:	2000010c 	.word	0x2000010c
 800b3f4:	0801001c 	.word	0x0801001c
 800b3f8:	08010000 	.word	0x08010000
 800b3fc:	200001fc 	.word	0x200001fc
 800b400:	08010044 	.word	0x08010044

0800b404 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b08a      	sub	sp, #40	; 0x28
 800b408:	af02      	add	r7, sp, #8
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
 800b410:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b412:	2300      	movs	r3, #0
 800b414:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d106      	bne.n	800b42a <etharp_raw+0x26>
 800b41c:	4b3a      	ldr	r3, [pc, #232]	; (800b508 <etharp_raw+0x104>)
 800b41e:	f240 4257 	movw	r2, #1111	; 0x457
 800b422:	493a      	ldr	r1, [pc, #232]	; (800b50c <etharp_raw+0x108>)
 800b424:	483a      	ldr	r0, [pc, #232]	; (800b510 <etharp_raw+0x10c>)
 800b426:	f001 fc61 	bl	800ccec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b42a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b42e:	211c      	movs	r1, #28
 800b430:	200e      	movs	r0, #14
 800b432:	f7f8 ff91 	bl	8004358 <pbuf_alloc>
 800b436:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d102      	bne.n	800b444 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b43e:	f04f 33ff 	mov.w	r3, #4294967295
 800b442:	e05d      	b.n	800b500 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	895b      	ldrh	r3, [r3, #10]
 800b448:	2b1b      	cmp	r3, #27
 800b44a:	d806      	bhi.n	800b45a <etharp_raw+0x56>
 800b44c:	4b2e      	ldr	r3, [pc, #184]	; (800b508 <etharp_raw+0x104>)
 800b44e:	f240 4263 	movw	r2, #1123	; 0x463
 800b452:	4930      	ldr	r1, [pc, #192]	; (800b514 <etharp_raw+0x110>)
 800b454:	482e      	ldr	r0, [pc, #184]	; (800b510 <etharp_raw+0x10c>)
 800b456:	f001 fc49 	bl	800ccec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b460:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b462:	4618      	mov	r0, r3
 800b464:	f7f7 ffa8 	bl	80033b8 <lwip_htons>
 800b468:	4603      	mov	r3, r0
 800b46a:	461a      	mov	r2, r3
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b476:	2b06      	cmp	r3, #6
 800b478:	d006      	beq.n	800b488 <etharp_raw+0x84>
 800b47a:	4b23      	ldr	r3, [pc, #140]	; (800b508 <etharp_raw+0x104>)
 800b47c:	f240 426a 	movw	r2, #1130	; 0x46a
 800b480:	4925      	ldr	r1, [pc, #148]	; (800b518 <etharp_raw+0x114>)
 800b482:	4823      	ldr	r0, [pc, #140]	; (800b510 <etharp_raw+0x10c>)
 800b484:	f001 fc32 	bl	800ccec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	3308      	adds	r3, #8
 800b48c:	2206      	movs	r2, #6
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	4618      	mov	r0, r3
 800b492:	f001 fc18 	bl	800ccc6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	3312      	adds	r3, #18
 800b49a:	2206      	movs	r2, #6
 800b49c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f001 fc11 	bl	800ccc6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	330e      	adds	r3, #14
 800b4a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4aa:	6812      	ldr	r2, [r2, #0]
 800b4ac:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	3318      	adds	r3, #24
 800b4b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b4:	6812      	ldr	r2, [r2, #0]
 800b4b6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	701a      	strb	r2, [r3, #0]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f042 0201 	orr.w	r2, r2, #1
 800b4c4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f042 0208 	orr.w	r2, r2, #8
 800b4ce:	709a      	strb	r2, [r3, #2]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	2206      	movs	r2, #6
 800b4d8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2204      	movs	r2, #4
 800b4de:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b4e0:	f640 0306 	movw	r3, #2054	; 0x806
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	69b9      	ldr	r1, [r7, #24]
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f001 fb6f 	bl	800cbd0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b4f2:	69b8      	ldr	r0, [r7, #24]
 800b4f4:	f7f9 fa10 	bl	8004918 <pbuf_free>
  p = NULL;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b4fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3720      	adds	r7, #32
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	0800fe60 	.word	0x0800fe60
 800b50c:	0800ffb0 	.word	0x0800ffb0
 800b510:	0800fed8 	.word	0x0800fed8
 800b514:	08010060 	.word	0x08010060
 800b518:	08010094 	.word	0x08010094

0800b51c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b088      	sub	sp, #32
 800b520:	af04      	add	r7, sp, #16
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b538:	2201      	movs	r2, #1
 800b53a:	9203      	str	r2, [sp, #12]
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	9202      	str	r2, [sp, #8]
 800b540:	4a06      	ldr	r2, [pc, #24]	; (800b55c <etharp_request_dst+0x40>)
 800b542:	9201      	str	r2, [sp, #4]
 800b544:	9300      	str	r3, [sp, #0]
 800b546:	4603      	mov	r3, r0
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f7ff ff5a 	bl	800b404 <etharp_raw>
 800b550:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b552:	4618      	mov	r0, r3
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	08010610 	.word	0x08010610

0800b560 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b56a:	4a05      	ldr	r2, [pc, #20]	; (800b580 <etharp_request+0x20>)
 800b56c:	6839      	ldr	r1, [r7, #0]
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f7ff ffd4 	bl	800b51c <etharp_request_dst>
 800b574:	4603      	mov	r3, r0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	08010608 	.word	0x08010608

0800b584 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b08e      	sub	sp, #56	; 0x38
 800b588:	af04      	add	r7, sp, #16
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b58e:	4b79      	ldr	r3, [pc, #484]	; (800b774 <icmp_input+0x1f0>)
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	f003 030f 	and.w	r3, r3, #15
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800b5a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5a6:	2b13      	cmp	r3, #19
 800b5a8:	f240 80cd 	bls.w	800b746 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	895b      	ldrh	r3, [r3, #10]
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	f240 80ca 	bls.w	800b74a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b5c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 80b7 	beq.w	800b738 <icmp_input+0x1b4>
 800b5ca:	2b08      	cmp	r3, #8
 800b5cc:	f040 80b7 	bne.w	800b73e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800b5d0:	4b69      	ldr	r3, [pc, #420]	; (800b778 <icmp_input+0x1f4>)
 800b5d2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b5d4:	4b67      	ldr	r3, [pc, #412]	; (800b774 <icmp_input+0x1f0>)
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5dc:	2be0      	cmp	r3, #224	; 0xe0
 800b5de:	f000 80bb 	beq.w	800b758 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b5e2:	4b64      	ldr	r3, [pc, #400]	; (800b774 <icmp_input+0x1f0>)
 800b5e4:	695a      	ldr	r2, [r3, #20]
 800b5e6:	4b63      	ldr	r3, [pc, #396]	; (800b774 <icmp_input+0x1f0>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	f000 fbeb 	bl	800bdc8 <ip4_addr_isbroadcast_u32>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f040 80b1 	bne.w	800b75c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	891b      	ldrh	r3, [r3, #8]
 800b5fe:	2b07      	cmp	r3, #7
 800b600:	f240 80a5 	bls.w	800b74e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b604:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b606:	330e      	adds	r3, #14
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7f9 f8ee 	bl	80047ec <pbuf_add_header>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d04b      	beq.n	800b6ae <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	891a      	ldrh	r2, [r3, #8]
 800b61a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b61c:	4413      	add	r3, r2
 800b61e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	891b      	ldrh	r3, [r3, #8]
 800b624:	8b7a      	ldrh	r2, [r7, #26]
 800b626:	429a      	cmp	r2, r3
 800b628:	f0c0 809a 	bcc.w	800b760 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800b62c:	8b7b      	ldrh	r3, [r7, #26]
 800b62e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b632:	4619      	mov	r1, r3
 800b634:	200e      	movs	r0, #14
 800b636:	f7f8 fe8f 	bl	8004358 <pbuf_alloc>
 800b63a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 8090 	beq.w	800b764 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	895b      	ldrh	r3, [r3, #10]
 800b648:	461a      	mov	r2, r3
 800b64a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b64c:	3308      	adds	r3, #8
 800b64e:	429a      	cmp	r2, r3
 800b650:	d203      	bcs.n	800b65a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800b652:	6978      	ldr	r0, [r7, #20]
 800b654:	f7f9 f960 	bl	8004918 <pbuf_free>
          goto icmperr;
 800b658:	e085      	b.n	800b766 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b662:	4618      	mov	r0, r3
 800b664:	f001 fb2f 	bl	800ccc6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800b668:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b66a:	4619      	mov	r1, r3
 800b66c:	6978      	ldr	r0, [r7, #20]
 800b66e:	f7f9 f8cd 	bl	800480c <pbuf_remove_header>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d009      	beq.n	800b68c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b678:	4b40      	ldr	r3, [pc, #256]	; (800b77c <icmp_input+0x1f8>)
 800b67a:	22b6      	movs	r2, #182	; 0xb6
 800b67c:	4940      	ldr	r1, [pc, #256]	; (800b780 <icmp_input+0x1fc>)
 800b67e:	4841      	ldr	r0, [pc, #260]	; (800b784 <icmp_input+0x200>)
 800b680:	f001 fb34 	bl	800ccec <iprintf>
          pbuf_free(r);
 800b684:	6978      	ldr	r0, [r7, #20]
 800b686:	f7f9 f947 	bl	8004918 <pbuf_free>
          goto icmperr;
 800b68a:	e06c      	b.n	800b766 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800b68c:	6879      	ldr	r1, [r7, #4]
 800b68e:	6978      	ldr	r0, [r7, #20]
 800b690:	f7f9 fa5a 	bl	8004b48 <pbuf_copy>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d003      	beq.n	800b6a2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800b69a:	6978      	ldr	r0, [r7, #20]
 800b69c:	f7f9 f93c 	bl	8004918 <pbuf_free>
          goto icmperr;
 800b6a0:	e061      	b.n	800b766 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7f9 f938 	bl	8004918 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	607b      	str	r3, [r7, #4]
 800b6ac:	e00f      	b.n	800b6ce <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b6ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6b0:	330e      	adds	r3, #14
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7f9 f8a9 	bl	800480c <pbuf_remove_header>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d006      	beq.n	800b6ce <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b6c0:	4b2e      	ldr	r3, [pc, #184]	; (800b77c <icmp_input+0x1f8>)
 800b6c2:	22c7      	movs	r2, #199	; 0xc7
 800b6c4:	4930      	ldr	r1, [pc, #192]	; (800b788 <icmp_input+0x204>)
 800b6c6:	482f      	ldr	r0, [pc, #188]	; (800b784 <icmp_input+0x200>)
 800b6c8:	f001 fb10 	bl	800ccec <iprintf>
          goto icmperr;
 800b6cc:	e04b      	b.n	800b766 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800b6d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7f9 f887 	bl	80047ec <pbuf_add_header>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d12b      	bne.n	800b73c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b6f2:	4b20      	ldr	r3, [pc, #128]	; (800b774 <icmp_input+0x1f0>)
 800b6f4:	691a      	ldr	r2, [r3, #16]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	2200      	movs	r2, #0
 800b704:	709a      	strb	r2, [r3, #2]
 800b706:	2200      	movs	r2, #0
 800b708:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	22ff      	movs	r2, #255	; 0xff
 800b70e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	729a      	strb	r2, [r3, #10]
 800b716:	2200      	movs	r2, #0
 800b718:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	9302      	str	r3, [sp, #8]
 800b71e:	2301      	movs	r3, #1
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	2300      	movs	r3, #0
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	23ff      	movs	r3, #255	; 0xff
 800b728:	2200      	movs	r2, #0
 800b72a:	69f9      	ldr	r1, [r7, #28]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fa73 	bl	800bc18 <ip4_output_if>
 800b732:	4603      	mov	r3, r0
 800b734:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800b736:	e001      	b.n	800b73c <icmp_input+0x1b8>
      break;
 800b738:	bf00      	nop
 800b73a:	e000      	b.n	800b73e <icmp_input+0x1ba>
      break;
 800b73c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7f9 f8ea 	bl	8004918 <pbuf_free>
  return;
 800b744:	e013      	b.n	800b76e <icmp_input+0x1ea>
    goto lenerr;
 800b746:	bf00      	nop
 800b748:	e002      	b.n	800b750 <icmp_input+0x1cc>
    goto lenerr;
 800b74a:	bf00      	nop
 800b74c:	e000      	b.n	800b750 <icmp_input+0x1cc>
        goto lenerr;
 800b74e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7f9 f8e1 	bl	8004918 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b756:	e00a      	b.n	800b76e <icmp_input+0x1ea>
        goto icmperr;
 800b758:	bf00      	nop
 800b75a:	e004      	b.n	800b766 <icmp_input+0x1e2>
        goto icmperr;
 800b75c:	bf00      	nop
 800b75e:	e002      	b.n	800b766 <icmp_input+0x1e2>
          goto icmperr;
 800b760:	bf00      	nop
 800b762:	e000      	b.n	800b766 <icmp_input+0x1e2>
          goto icmperr;
 800b764:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7f9 f8d6 	bl	8004918 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b76c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b76e:	3728      	adds	r7, #40	; 0x28
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20003348 	.word	0x20003348
 800b778:	2000335c 	.word	0x2000335c
 800b77c:	080100d8 	.word	0x080100d8
 800b780:	08010110 	.word	0x08010110
 800b784:	08010148 	.word	0x08010148
 800b788:	08010170 	.word	0x08010170

0800b78c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	460b      	mov	r3, r1
 800b796:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b798:	78fb      	ldrb	r3, [r7, #3]
 800b79a:	461a      	mov	r2, r3
 800b79c:	2103      	movs	r1, #3
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 f814 	bl	800b7cc <icmp_send_response>
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b7b8:	78fb      	ldrb	r3, [r7, #3]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	210b      	movs	r1, #11
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f804 	bl	800b7cc <icmp_send_response>
}
 800b7c4:	bf00      	nop
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b08c      	sub	sp, #48	; 0x30
 800b7d0:	af04      	add	r7, sp, #16
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70fb      	strb	r3, [r7, #3]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b7dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b7e0:	2124      	movs	r1, #36	; 0x24
 800b7e2:	2022      	movs	r0, #34	; 0x22
 800b7e4:	f7f8 fdb8 	bl	8004358 <pbuf_alloc>
 800b7e8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d04c      	beq.n	800b88a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	895b      	ldrh	r3, [r3, #10]
 800b7f4:	2b23      	cmp	r3, #35	; 0x23
 800b7f6:	d806      	bhi.n	800b806 <icmp_send_response+0x3a>
 800b7f8:	4b26      	ldr	r3, [pc, #152]	; (800b894 <icmp_send_response+0xc8>)
 800b7fa:	f240 1269 	movw	r2, #361	; 0x169
 800b7fe:	4926      	ldr	r1, [pc, #152]	; (800b898 <icmp_send_response+0xcc>)
 800b800:	4826      	ldr	r0, [pc, #152]	; (800b89c <icmp_send_response+0xd0>)
 800b802:	f001 fa73 	bl	800ccec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	78fa      	ldrb	r2, [r7, #3]
 800b816:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	78ba      	ldrb	r2, [r7, #2]
 800b81c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	2200      	movs	r2, #0
 800b822:	711a      	strb	r2, [r3, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	2200      	movs	r2, #0
 800b82c:	719a      	strb	r2, [r3, #6]
 800b82e:	2200      	movs	r2, #0
 800b830:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	f103 0008 	add.w	r0, r3, #8
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	221c      	movs	r2, #28
 800b840:	4619      	mov	r1, r3
 800b842:	f001 fa40 	bl	800ccc6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b84c:	f107 030c 	add.w	r3, r7, #12
 800b850:	4618      	mov	r0, r3
 800b852:	f000 f825 	bl	800b8a0 <ip4_route>
 800b856:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d011      	beq.n	800b882 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2200      	movs	r2, #0
 800b862:	709a      	strb	r2, [r3, #2]
 800b864:	2200      	movs	r2, #0
 800b866:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b868:	f107 020c 	add.w	r2, r7, #12
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	9302      	str	r3, [sp, #8]
 800b870:	2301      	movs	r3, #1
 800b872:	9301      	str	r3, [sp, #4]
 800b874:	2300      	movs	r3, #0
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	23ff      	movs	r3, #255	; 0xff
 800b87a:	2100      	movs	r1, #0
 800b87c:	69f8      	ldr	r0, [r7, #28]
 800b87e:	f000 f9cb 	bl	800bc18 <ip4_output_if>
  }
  pbuf_free(q);
 800b882:	69f8      	ldr	r0, [r7, #28]
 800b884:	f7f9 f848 	bl	8004918 <pbuf_free>
 800b888:	e000      	b.n	800b88c <icmp_send_response+0xc0>
    return;
 800b88a:	bf00      	nop
}
 800b88c:	3720      	adds	r7, #32
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	080100d8 	.word	0x080100d8
 800b898:	080101a4 	.word	0x080101a4
 800b89c:	08010148 	.word	0x08010148

0800b8a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800b8a8:	4b33      	ldr	r3, [pc, #204]	; (800b978 <ip4_route+0xd8>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	60fb      	str	r3, [r7, #12]
 800b8ae:	e036      	b.n	800b91e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8b6:	f003 0301 	and.w	r3, r3, #1
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d02b      	beq.n	800b918 <ip4_route+0x78>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8c6:	089b      	lsrs	r3, r3, #2
 800b8c8:	f003 0301 	and.w	r3, r3, #1
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d022      	beq.n	800b918 <ip4_route+0x78>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d01d      	beq.n	800b918 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	405a      	eors	r2, r3
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	3308      	adds	r3, #8
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4013      	ands	r3, r2
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d101      	bne.n	800b8f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	e038      	b.n	800b96a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8fe:	f003 0302 	and.w	r3, r3, #2
 800b902:	2b00      	cmp	r3, #0
 800b904:	d108      	bne.n	800b918 <ip4_route+0x78>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	330c      	adds	r3, #12
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	429a      	cmp	r2, r3
 800b912:	d101      	bne.n	800b918 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	e028      	b.n	800b96a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	60fb      	str	r3, [r7, #12]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1c5      	bne.n	800b8b0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b924:	4b15      	ldr	r3, [pc, #84]	; (800b97c <ip4_route+0xdc>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d01a      	beq.n	800b962 <ip4_route+0xc2>
 800b92c:	4b13      	ldr	r3, [pc, #76]	; (800b97c <ip4_route+0xdc>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d012      	beq.n	800b962 <ip4_route+0xc2>
 800b93c:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <ip4_route+0xdc>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b944:	f003 0304 	and.w	r3, r3, #4
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00a      	beq.n	800b962 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b94c:	4b0b      	ldr	r3, [pc, #44]	; (800b97c <ip4_route+0xdc>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	3304      	adds	r3, #4
 800b952:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b954:	2b00      	cmp	r3, #0
 800b956:	d004      	beq.n	800b962 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b7f      	cmp	r3, #127	; 0x7f
 800b960:	d101      	bne.n	800b966 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800b962:	2300      	movs	r3, #0
 800b964:	e001      	b.n	800b96a <ip4_route+0xca>
  }

  return netif_default;
 800b966:	4b05      	ldr	r3, [pc, #20]	; (800b97c <ip4_route+0xdc>)
 800b968:	681b      	ldr	r3, [r3, #0]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	2000687c 	.word	0x2000687c
 800b97c:	20006880 	.word	0x20006880

0800b980 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b98e:	f003 0301 	and.w	r3, r3, #1
 800b992:	b2db      	uxtb	r3, r3
 800b994:	2b00      	cmp	r3, #0
 800b996:	d016      	beq.n	800b9c6 <ip4_input_accept+0x46>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	3304      	adds	r3, #4
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d011      	beq.n	800b9c6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b9a2:	4b0b      	ldr	r3, [pc, #44]	; (800b9d0 <ip4_input_accept+0x50>)
 800b9a4:	695a      	ldr	r2, [r3, #20]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d008      	beq.n	800b9c2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b9b0:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <ip4_input_accept+0x50>)
 800b9b2:	695b      	ldr	r3, [r3, #20]
 800b9b4:	6879      	ldr	r1, [r7, #4]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 fa06 	bl	800bdc8 <ip4_addr_isbroadcast_u32>
 800b9bc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e000      	b.n	800b9c8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20003348 	.word	0x20003348

0800b9d4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	091b      	lsrs	r3, r3, #4
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	2b04      	cmp	r3, #4
 800b9ee:	d004      	beq.n	800b9fa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7f8 ff91 	bl	8004918 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e105      	b.n	800bc06 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	f003 030f 	and.w	r3, r3, #15
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	885b      	ldrh	r3, [r3, #2]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7f7 fcd1 	bl	80033b8 <lwip_htons>
 800ba16:	4603      	mov	r3, r0
 800ba18:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	891b      	ldrh	r3, [r3, #8]
 800ba1e:	89ba      	ldrh	r2, [r7, #12]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d204      	bcs.n	800ba2e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ba24:	89bb      	ldrh	r3, [r7, #12]
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7f8 fdef 	bl	800460c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	895b      	ldrh	r3, [r3, #10]
 800ba32:	89fa      	ldrh	r2, [r7, #14]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d807      	bhi.n	800ba48 <ip4_input+0x74>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	891b      	ldrh	r3, [r3, #8]
 800ba3c:	89ba      	ldrh	r2, [r7, #12]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d802      	bhi.n	800ba48 <ip4_input+0x74>
 800ba42:	89fb      	ldrh	r3, [r7, #14]
 800ba44:	2b13      	cmp	r3, #19
 800ba46:	d804      	bhi.n	800ba52 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7f8 ff65 	bl	8004918 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e0d9      	b.n	800bc06 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	4a6e      	ldr	r2, [pc, #440]	; (800bc10 <ip4_input+0x23c>)
 800ba58:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	4a6c      	ldr	r2, [pc, #432]	; (800bc10 <ip4_input+0x23c>)
 800ba60:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ba62:	4b6b      	ldr	r3, [pc, #428]	; (800bc10 <ip4_input+0x23c>)
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba6a:	2be0      	cmp	r3, #224	; 0xe0
 800ba6c:	d112      	bne.n	800ba94 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d007      	beq.n	800ba8e <ip4_input+0xba>
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	3304      	adds	r3, #4
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <ip4_input+0xba>
      netif = inp;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	613b      	str	r3, [r7, #16]
 800ba8c:	e02a      	b.n	800bae4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	613b      	str	r3, [r7, #16]
 800ba92:	e027      	b.n	800bae4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ba94:	6838      	ldr	r0, [r7, #0]
 800ba96:	f7ff ff73 	bl	800b980 <ip4_input_accept>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <ip4_input+0xd2>
      netif = inp;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	613b      	str	r3, [r7, #16]
 800baa4:	e01e      	b.n	800bae4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800baa6:	2300      	movs	r3, #0
 800baa8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800baaa:	4b59      	ldr	r3, [pc, #356]	; (800bc10 <ip4_input+0x23c>)
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b7f      	cmp	r3, #127	; 0x7f
 800bab2:	d017      	beq.n	800bae4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800bab4:	4b57      	ldr	r3, [pc, #348]	; (800bc14 <ip4_input+0x240>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	613b      	str	r3, [r7, #16]
 800baba:	e00e      	b.n	800bada <ip4_input+0x106>
          if (netif == inp) {
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d006      	beq.n	800bad2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800bac4:	6938      	ldr	r0, [r7, #16]
 800bac6:	f7ff ff5b 	bl	800b980 <ip4_input_accept>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d108      	bne.n	800bae2 <ip4_input+0x10e>
 800bad0:	e000      	b.n	800bad4 <ip4_input+0x100>
            continue;
 800bad2:	bf00      	nop
        NETIF_FOREACH(netif) {
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	613b      	str	r3, [r7, #16]
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1ed      	bne.n	800babc <ip4_input+0xe8>
 800bae0:	e000      	b.n	800bae4 <ip4_input+0x110>
            break;
 800bae2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bae4:	4b4a      	ldr	r3, [pc, #296]	; (800bc10 <ip4_input+0x23c>)
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	4618      	mov	r0, r3
 800baec:	f000 f96c 	bl	800bdc8 <ip4_addr_isbroadcast_u32>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d105      	bne.n	800bb02 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800baf6:	4b46      	ldr	r3, [pc, #280]	; (800bc10 <ip4_input+0x23c>)
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800bafe:	2be0      	cmp	r3, #224	; 0xe0
 800bb00:	d104      	bne.n	800bb0c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f7f8 ff08 	bl	8004918 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e07c      	b.n	800bc06 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d104      	bne.n	800bb1c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7f8 ff00 	bl	8004918 <pbuf_free>
    return ERR_OK;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	e074      	b.n	800bc06 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	88db      	ldrh	r3, [r3, #6]
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	461a      	mov	r2, r3
 800bb24:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800bb28:	4013      	ands	r3, r2
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00b      	beq.n	800bb46 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fc90 	bl	800c454 <ip4_reass>
 800bb34:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d101      	bne.n	800bb40 <ip4_input+0x16c>
      return ERR_OK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	e062      	b.n	800bc06 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800bb46:	4a32      	ldr	r2, [pc, #200]	; (800bc10 <ip4_input+0x23c>)
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800bb4c:	4a30      	ldr	r2, [pc, #192]	; (800bc10 <ip4_input+0x23c>)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800bb52:	4a2f      	ldr	r2, [pc, #188]	; (800bc10 <ip4_input+0x23c>)
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	f003 030f 	and.w	r3, r3, #15
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	4b29      	ldr	r3, [pc, #164]	; (800bc10 <ip4_input+0x23c>)
 800bb6a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800bb6c:	89fb      	ldrh	r3, [r7, #14]
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f7f8 fe4b 	bl	800480c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	7a5b      	ldrb	r3, [r3, #9]
 800bb7a:	2b06      	cmp	r3, #6
 800bb7c:	d009      	beq.n	800bb92 <ip4_input+0x1be>
 800bb7e:	2b11      	cmp	r3, #17
 800bb80:	d002      	beq.n	800bb88 <ip4_input+0x1b4>
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d00a      	beq.n	800bb9c <ip4_input+0x1c8>
 800bb86:	e00e      	b.n	800bba6 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7fe fc6a 	bl	800a464 <udp_input>
        break;
 800bb90:	e026      	b.n	800bbe0 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800bb92:	6839      	ldr	r1, [r7, #0]
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7fa fcdb 	bl	8006550 <tcp_input>
        break;
 800bb9a:	e021      	b.n	800bbe0 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7ff fcf0 	bl	800b584 <icmp_input>
        break;
 800bba4:	e01c      	b.n	800bbe0 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bba6:	4b1a      	ldr	r3, [pc, #104]	; (800bc10 <ip4_input+0x23c>)
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	6939      	ldr	r1, [r7, #16]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f000 f90b 	bl	800bdc8 <ip4_addr_isbroadcast_u32>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10f      	bne.n	800bbd8 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bbb8:	4b15      	ldr	r3, [pc, #84]	; (800bc10 <ip4_input+0x23c>)
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800bbc0:	2be0      	cmp	r3, #224	; 0xe0
 800bbc2:	d009      	beq.n	800bbd8 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800bbc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bbc8:	4619      	mov	r1, r3
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7f8 fe91 	bl	80048f2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800bbd0:	2102      	movs	r1, #2
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff fdda 	bl	800b78c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f7f8 fe9d 	bl	8004918 <pbuf_free>
        break;
 800bbde:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800bbe0:	4b0b      	ldr	r3, [pc, #44]	; (800bc10 <ip4_input+0x23c>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800bbe6:	4b0a      	ldr	r3, [pc, #40]	; (800bc10 <ip4_input+0x23c>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800bbec:	4b08      	ldr	r3, [pc, #32]	; (800bc10 <ip4_input+0x23c>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800bbf2:	4b07      	ldr	r3, [pc, #28]	; (800bc10 <ip4_input+0x23c>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800bbf8:	4b05      	ldr	r3, [pc, #20]	; (800bc10 <ip4_input+0x23c>)
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800bbfe:	4b04      	ldr	r3, [pc, #16]	; (800bc10 <ip4_input+0x23c>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3718      	adds	r7, #24
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	20003348 	.word	0x20003348
 800bc14:	2000687c 	.word	0x2000687c

0800bc18 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08a      	sub	sp, #40	; 0x28
 800bc1c:	af04      	add	r7, sp, #16
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d009      	beq.n	800bc44 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <ip4_output_if+0x26>
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d102      	bne.n	800bc44 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800bc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc40:	3304      	adds	r3, #4
 800bc42:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800bc44:	78fa      	ldrb	r2, [r7, #3]
 800bc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc48:	9302      	str	r3, [sp, #8]
 800bc4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bc4e:	9301      	str	r3, [sp, #4]
 800bc50:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	4613      	mov	r3, r2
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	6979      	ldr	r1, [r7, #20]
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f000 f805 	bl	800bc6c <ip4_output_if_src>
 800bc62:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
 800bc78:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	7b9b      	ldrb	r3, [r3, #14]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d006      	beq.n	800bc90 <ip4_output_if_src+0x24>
 800bc82:	4b4b      	ldr	r3, [pc, #300]	; (800bdb0 <ip4_output_if_src+0x144>)
 800bc84:	f44f 7255 	mov.w	r2, #852	; 0x354
 800bc88:	494a      	ldr	r1, [pc, #296]	; (800bdb4 <ip4_output_if_src+0x148>)
 800bc8a:	484b      	ldr	r0, [pc, #300]	; (800bdb8 <ip4_output_if_src+0x14c>)
 800bc8c:	f001 f82e 	bl	800ccec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d060      	beq.n	800bd58 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800bc96:	2314      	movs	r3, #20
 800bc98:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800bc9a:	2114      	movs	r1, #20
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f7f8 fda5 	bl	80047ec <pbuf_add_header>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bca8:	f06f 0301 	mvn.w	r3, #1
 800bcac:	e07c      	b.n	800bda8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	895b      	ldrh	r3, [r3, #10]
 800bcb8:	2b13      	cmp	r3, #19
 800bcba:	d806      	bhi.n	800bcca <ip4_output_if_src+0x5e>
 800bcbc:	4b3c      	ldr	r3, [pc, #240]	; (800bdb0 <ip4_output_if_src+0x144>)
 800bcbe:	f240 3289 	movw	r2, #905	; 0x389
 800bcc2:	493e      	ldr	r1, [pc, #248]	; (800bdbc <ip4_output_if_src+0x150>)
 800bcc4:	483c      	ldr	r0, [pc, #240]	; (800bdb8 <ip4_output_if_src+0x14c>)
 800bcc6:	f001 f811 	bl	800ccec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	78fa      	ldrb	r2, [r7, #3]
 800bcce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800bcd6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bce0:	8b7b      	ldrh	r3, [r7, #26]
 800bce2:	089b      	lsrs	r3, r3, #2
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bcf8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	891b      	ldrh	r3, [r3, #8]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7f7 fb5a 	bl	80033b8 <lwip_htons>
 800bd04:	4603      	mov	r3, r0
 800bd06:	461a      	mov	r2, r3
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	719a      	strb	r2, [r3, #6]
 800bd12:	2200      	movs	r2, #0
 800bd14:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800bd16:	4b2a      	ldr	r3, [pc, #168]	; (800bdc0 <ip4_output_if_src+0x154>)
 800bd18:	881b      	ldrh	r3, [r3, #0]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7f7 fb4c 	bl	80033b8 <lwip_htons>
 800bd20:	4603      	mov	r3, r0
 800bd22:	461a      	mov	r2, r3
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800bd28:	4b25      	ldr	r3, [pc, #148]	; (800bdc0 <ip4_output_if_src+0x154>)
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	4b23      	ldr	r3, [pc, #140]	; (800bdc0 <ip4_output_if_src+0x154>)
 800bd32:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d104      	bne.n	800bd44 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800bd3a:	4b22      	ldr	r3, [pc, #136]	; (800bdc4 <ip4_output_if_src+0x158>)
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	60da      	str	r2, [r3, #12]
 800bd42:	e003      	b.n	800bd4c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	729a      	strb	r2, [r3, #10]
 800bd52:	2200      	movs	r2, #0
 800bd54:	72da      	strb	r2, [r3, #11]
 800bd56:	e00f      	b.n	800bd78 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	895b      	ldrh	r3, [r3, #10]
 800bd5c:	2b13      	cmp	r3, #19
 800bd5e:	d802      	bhi.n	800bd66 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bd60:	f06f 0301 	mvn.w	r3, #1
 800bd64:	e020      	b.n	800bda8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800bd72:	f107 0314 	add.w	r3, r7, #20
 800bd76:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00c      	beq.n	800bd9a <ip4_output_if_src+0x12e>
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	891a      	ldrh	r2, [r3, #8]
 800bd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d906      	bls.n	800bd9a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f000 fd4b 	bl	800c82c <ip4_frag>
 800bd96:	4603      	mov	r3, r0
 800bd98:	e006      	b.n	800bda8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800bd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	68f9      	ldr	r1, [r7, #12]
 800bda2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bda4:	4798      	blx	r3
 800bda6:	4603      	mov	r3, r0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3720      	adds	r7, #32
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	080101d0 	.word	0x080101d0
 800bdb4:	08010204 	.word	0x08010204
 800bdb8:	08010210 	.word	0x08010210
 800bdbc:	08010238 	.word	0x08010238
 800bdc0:	200001fe 	.word	0x200001fe
 800bdc4:	08010604 	.word	0x08010604

0800bdc8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bddc:	d002      	beq.n	800bde4 <ip4_addr_isbroadcast_u32+0x1c>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d101      	bne.n	800bde8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e02a      	b.n	800be3e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bdee:	f003 0302 	and.w	r3, r3, #2
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d101      	bne.n	800bdfa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	e021      	b.n	800be3e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	429a      	cmp	r2, r3
 800be04:	d101      	bne.n	800be0a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800be06:	2300      	movs	r3, #0
 800be08:	e019      	b.n	800be3e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	3304      	adds	r3, #4
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	405a      	eors	r2, r3
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	3308      	adds	r3, #8
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4013      	ands	r3, r2
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10d      	bne.n	800be3c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	3308      	adds	r3, #8
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	43da      	mvns	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	3308      	adds	r3, #8
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800be34:	429a      	cmp	r2, r3
 800be36:	d101      	bne.n	800be3c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800be38:	2301      	movs	r3, #1
 800be3a:	e000      	b.n	800be3e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800be3c:	2300      	movs	r3, #0
  }
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3714      	adds	r7, #20
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
	...

0800be4c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800be52:	2300      	movs	r3, #0
 800be54:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800be56:	4b12      	ldr	r3, [pc, #72]	; (800bea0 <ip_reass_tmr+0x54>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800be5c:	e018      	b.n	800be90 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	7fdb      	ldrb	r3, [r3, #31]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00b      	beq.n	800be7e <ip_reass_tmr+0x32>
      r->timer--;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	7fdb      	ldrb	r3, [r3, #31]
 800be6a:	3b01      	subs	r3, #1
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	e008      	b.n	800be90 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800be88:	68b9      	ldr	r1, [r7, #8]
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f80a 	bl	800bea4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1e3      	bne.n	800be5e <ip_reass_tmr+0x12>
    }
  }
}
 800be96:	bf00      	nop
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	20000200 	.word	0x20000200

0800bea4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d105      	bne.n	800bec6 <ip_reass_free_complete_datagram+0x22>
 800beba:	4b45      	ldr	r3, [pc, #276]	; (800bfd0 <ip_reass_free_complete_datagram+0x12c>)
 800bebc:	22ab      	movs	r2, #171	; 0xab
 800bebe:	4945      	ldr	r1, [pc, #276]	; (800bfd4 <ip_reass_free_complete_datagram+0x130>)
 800bec0:	4845      	ldr	r0, [pc, #276]	; (800bfd8 <ip_reass_free_complete_datagram+0x134>)
 800bec2:	f000 ff13 	bl	800ccec <iprintf>
  if (prev != NULL) {
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00a      	beq.n	800bee2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d005      	beq.n	800bee2 <ip_reass_free_complete_datagram+0x3e>
 800bed6:	4b3e      	ldr	r3, [pc, #248]	; (800bfd0 <ip_reass_free_complete_datagram+0x12c>)
 800bed8:	22ad      	movs	r2, #173	; 0xad
 800beda:	4940      	ldr	r1, [pc, #256]	; (800bfdc <ip_reass_free_complete_datagram+0x138>)
 800bedc:	483e      	ldr	r0, [pc, #248]	; (800bfd8 <ip_reass_free_complete_datagram+0x134>)
 800bede:	f000 ff05 	bl	800ccec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	685b      	ldr	r3, [r3, #4]
 800bee8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	889b      	ldrh	r3, [r3, #4]
 800beee:	b29b      	uxth	r3, r3
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d12a      	bne.n	800bf4a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	6858      	ldr	r0, [r3, #4]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	3308      	adds	r3, #8
 800bf0a:	2214      	movs	r2, #20
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	f000 feda 	bl	800ccc6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800bf12:	2101      	movs	r1, #1
 800bf14:	69b8      	ldr	r0, [r7, #24]
 800bf16:	f7ff fc49 	bl	800b7ac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800bf1a:	69b8      	ldr	r0, [r7, #24]
 800bf1c:	f7f8 fd84 	bl	8004a28 <pbuf_clen>
 800bf20:	4603      	mov	r3, r0
 800bf22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800bf24:	8bfa      	ldrh	r2, [r7, #30]
 800bf26:	8a7b      	ldrh	r3, [r7, #18]
 800bf28:	4413      	add	r3, r2
 800bf2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf2e:	db05      	blt.n	800bf3c <ip_reass_free_complete_datagram+0x98>
 800bf30:	4b27      	ldr	r3, [pc, #156]	; (800bfd0 <ip_reass_free_complete_datagram+0x12c>)
 800bf32:	22bc      	movs	r2, #188	; 0xbc
 800bf34:	492a      	ldr	r1, [pc, #168]	; (800bfe0 <ip_reass_free_complete_datagram+0x13c>)
 800bf36:	4828      	ldr	r0, [pc, #160]	; (800bfd8 <ip_reass_free_complete_datagram+0x134>)
 800bf38:	f000 fed8 	bl	800ccec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800bf3c:	8bfa      	ldrh	r2, [r7, #30]
 800bf3e:	8a7b      	ldrh	r3, [r7, #18]
 800bf40:	4413      	add	r3, r2
 800bf42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800bf44:	69b8      	ldr	r0, [r7, #24]
 800bf46:	f7f8 fce7 	bl	8004918 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800bf50:	e01f      	b.n	800bf92 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	617b      	str	r3, [r7, #20]
    pcur = p;
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f7f8 fd60 	bl	8004a28 <pbuf_clen>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800bf6c:	8bfa      	ldrh	r2, [r7, #30]
 800bf6e:	8a7b      	ldrh	r3, [r7, #18]
 800bf70:	4413      	add	r3, r2
 800bf72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf76:	db05      	blt.n	800bf84 <ip_reass_free_complete_datagram+0xe0>
 800bf78:	4b15      	ldr	r3, [pc, #84]	; (800bfd0 <ip_reass_free_complete_datagram+0x12c>)
 800bf7a:	22cc      	movs	r2, #204	; 0xcc
 800bf7c:	4918      	ldr	r1, [pc, #96]	; (800bfe0 <ip_reass_free_complete_datagram+0x13c>)
 800bf7e:	4816      	ldr	r0, [pc, #88]	; (800bfd8 <ip_reass_free_complete_datagram+0x134>)
 800bf80:	f000 feb4 	bl	800ccec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800bf84:	8bfa      	ldrh	r2, [r7, #30]
 800bf86:	8a7b      	ldrh	r3, [r7, #18]
 800bf88:	4413      	add	r3, r2
 800bf8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f7f8 fcc3 	bl	8004918 <pbuf_free>
  while (p != NULL) {
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d1dc      	bne.n	800bf52 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f8c2 	bl	800c124 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800bfa0:	4b10      	ldr	r3, [pc, #64]	; (800bfe4 <ip_reass_free_complete_datagram+0x140>)
 800bfa2:	881b      	ldrh	r3, [r3, #0]
 800bfa4:	8bfa      	ldrh	r2, [r7, #30]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d905      	bls.n	800bfb6 <ip_reass_free_complete_datagram+0x112>
 800bfaa:	4b09      	ldr	r3, [pc, #36]	; (800bfd0 <ip_reass_free_complete_datagram+0x12c>)
 800bfac:	22d2      	movs	r2, #210	; 0xd2
 800bfae:	490e      	ldr	r1, [pc, #56]	; (800bfe8 <ip_reass_free_complete_datagram+0x144>)
 800bfb0:	4809      	ldr	r0, [pc, #36]	; (800bfd8 <ip_reass_free_complete_datagram+0x134>)
 800bfb2:	f000 fe9b 	bl	800ccec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800bfb6:	4b0b      	ldr	r3, [pc, #44]	; (800bfe4 <ip_reass_free_complete_datagram+0x140>)
 800bfb8:	881a      	ldrh	r2, [r3, #0]
 800bfba:	8bfb      	ldrh	r3, [r7, #30]
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	4b08      	ldr	r3, [pc, #32]	; (800bfe4 <ip_reass_free_complete_datagram+0x140>)
 800bfc2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800bfc4:	8bfb      	ldrh	r3, [r7, #30]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3720      	adds	r7, #32
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	08010268 	.word	0x08010268
 800bfd4:	080102a4 	.word	0x080102a4
 800bfd8:	080102b0 	.word	0x080102b0
 800bfdc:	080102d8 	.word	0x080102d8
 800bfe0:	080102ec 	.word	0x080102ec
 800bfe4:	20000204 	.word	0x20000204
 800bfe8:	0801030c 	.word	0x0801030c

0800bfec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08a      	sub	sp, #40	; 0x28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800bff6:	2300      	movs	r3, #0
 800bff8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800bffa:	2300      	movs	r3, #0
 800bffc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800bffe:	2300      	movs	r3, #0
 800c000:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c002:	2300      	movs	r3, #0
 800c004:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c00a:	4b28      	ldr	r3, [pc, #160]	; (800c0ac <ip_reass_remove_oldest_datagram+0xc0>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c010:	e030      	b.n	800c074 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c014:	695a      	ldr	r2, [r3, #20]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d10c      	bne.n	800c038 <ip_reass_remove_oldest_datagram+0x4c>
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	699a      	ldr	r2, [r3, #24]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	429a      	cmp	r2, r3
 800c028:	d106      	bne.n	800c038 <ip_reass_remove_oldest_datagram+0x4c>
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	899a      	ldrh	r2, [r3, #12]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	889b      	ldrh	r3, [r3, #4]
 800c032:	b29b      	uxth	r3, r3
 800c034:	429a      	cmp	r2, r3
 800c036:	d014      	beq.n	800c062 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	3301      	adds	r3, #1
 800c03c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c03e:	6a3b      	ldr	r3, [r7, #32]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d104      	bne.n	800c04e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	61bb      	str	r3, [r7, #24]
 800c04c:	e009      	b.n	800c062 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	7fda      	ldrb	r2, [r3, #31]
 800c052:	6a3b      	ldr	r3, [r7, #32]
 800c054:	7fdb      	ldrb	r3, [r3, #31]
 800c056:	429a      	cmp	r2, r3
 800c058:	d803      	bhi.n	800c062 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c076:	2b00      	cmp	r3, #0
 800c078:	d1cb      	bne.n	800c012 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d008      	beq.n	800c092 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c080:	69b9      	ldr	r1, [r7, #24]
 800c082:	6a38      	ldr	r0, [r7, #32]
 800c084:	f7ff ff0e 	bl	800bea4 <ip_reass_free_complete_datagram>
 800c088:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	4413      	add	r3, r2
 800c090:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	da02      	bge.n	800c0a0 <ip_reass_remove_oldest_datagram+0xb4>
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	dcac      	bgt.n	800bffa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c0a0:	697b      	ldr	r3, [r7, #20]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3728      	adds	r7, #40	; 0x28
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20000200 	.word	0x20000200

0800c0b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c0ba:	2004      	movs	r0, #4
 800c0bc:	f7f7 fdd2 	bl	8003c64 <memp_malloc>
 800c0c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d110      	bne.n	800c0ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff ff8e 	bl	800bfec <ip_reass_remove_oldest_datagram>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	dc03      	bgt.n	800c0e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c0d8:	2004      	movs	r0, #4
 800c0da:	f7f7 fdc3 	bl	8003c64 <memp_malloc>
 800c0de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e016      	b.n	800c118 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c0ea:	2220      	movs	r2, #32
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f000 fdf4 	bl	800ccdc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	220f      	movs	r2, #15
 800c0f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c0fa:	4b09      	ldr	r3, [pc, #36]	; (800c120 <ip_reass_enqueue_new_datagram+0x70>)
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c102:	4a07      	ldr	r2, [pc, #28]	; (800c120 <ip_reass_enqueue_new_datagram+0x70>)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	3308      	adds	r3, #8
 800c10c:	2214      	movs	r2, #20
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	4618      	mov	r0, r3
 800c112:	f000 fdd8 	bl	800ccc6 <memcpy>
  return ipr;
 800c116:	68fb      	ldr	r3, [r7, #12]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	20000200 	.word	0x20000200

0800c124 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c12e:	4b10      	ldr	r3, [pc, #64]	; (800c170 <ip_reass_dequeue_datagram+0x4c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	429a      	cmp	r2, r3
 800c136:	d104      	bne.n	800c142 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a0c      	ldr	r2, [pc, #48]	; (800c170 <ip_reass_dequeue_datagram+0x4c>)
 800c13e:	6013      	str	r3, [r2, #0]
 800c140:	e00d      	b.n	800c15e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d106      	bne.n	800c156 <ip_reass_dequeue_datagram+0x32>
 800c148:	4b0a      	ldr	r3, [pc, #40]	; (800c174 <ip_reass_dequeue_datagram+0x50>)
 800c14a:	f240 1245 	movw	r2, #325	; 0x145
 800c14e:	490a      	ldr	r1, [pc, #40]	; (800c178 <ip_reass_dequeue_datagram+0x54>)
 800c150:	480a      	ldr	r0, [pc, #40]	; (800c17c <ip_reass_dequeue_datagram+0x58>)
 800c152:	f000 fdcb 	bl	800ccec <iprintf>
    prev->next = ipr->next;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c15e:	6879      	ldr	r1, [r7, #4]
 800c160:	2004      	movs	r0, #4
 800c162:	f7f7 fdcb 	bl	8003cfc <memp_free>
}
 800c166:	bf00      	nop
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	20000200 	.word	0x20000200
 800c174:	08010268 	.word	0x08010268
 800c178:	08010330 	.word	0x08010330
 800c17c:	080102b0 	.word	0x080102b0

0800c180 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b08c      	sub	sp, #48	; 0x30
 800c184:	af00      	add	r7, sp, #0
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800c18c:	2300      	movs	r3, #0
 800c18e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c190:	2301      	movs	r3, #1
 800c192:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	885b      	ldrh	r3, [r3, #2]
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7f7 f909 	bl	80033b8 <lwip_htons>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	f003 030f 	and.w	r3, r3, #15
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800c1b8:	7e7b      	ldrb	r3, [r7, #25]
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	8b7a      	ldrh	r2, [r7, #26]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d202      	bcs.n	800c1c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c6:	e135      	b.n	800c434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800c1c8:	7e7b      	ldrb	r3, [r7, #25]
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	8b7a      	ldrh	r2, [r7, #26]
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	88db      	ldrh	r3, [r3, #6]
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7f7 f8ed 	bl	80033b8 <lwip_htons>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	701a      	strb	r2, [r3, #0]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	705a      	strb	r2, [r3, #1]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	709a      	strb	r2, [r3, #2]
 800c1fe:	2200      	movs	r2, #0
 800c200:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	8afa      	ldrh	r2, [r7, #22]
 800c206:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800c208:	8afa      	ldrh	r2, [r7, #22]
 800c20a:	8b7b      	ldrh	r3, [r7, #26]
 800c20c:	4413      	add	r3, r2
 800c20e:	b29a      	uxth	r2, r3
 800c210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c212:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	88db      	ldrh	r3, [r3, #6]
 800c218:	b29b      	uxth	r3, r3
 800c21a:	8afa      	ldrh	r2, [r7, #22]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d902      	bls.n	800c226 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c220:	f04f 33ff 	mov.w	r3, #4294967295
 800c224:	e106      	b.n	800c434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	627b      	str	r3, [r7, #36]	; 0x24
 800c22c:	e068      	b.n	800c300 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800c22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800c234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c236:	889b      	ldrh	r3, [r3, #4]
 800c238:	b29a      	uxth	r2, r3
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	889b      	ldrh	r3, [r3, #4]
 800c23e:	b29b      	uxth	r3, r3
 800c240:	429a      	cmp	r2, r3
 800c242:	d235      	bcs.n	800c2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c248:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d020      	beq.n	800c292 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c252:	889b      	ldrh	r3, [r3, #4]
 800c254:	b29a      	uxth	r2, r3
 800c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c258:	88db      	ldrh	r3, [r3, #6]
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d307      	bcc.n	800c270 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800c260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c262:	88db      	ldrh	r3, [r3, #6]
 800c264:	b29a      	uxth	r2, r3
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	889b      	ldrh	r3, [r3, #4]
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d902      	bls.n	800c276 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c270:	f04f 33ff 	mov.w	r3, #4294967295
 800c274:	e0de      	b.n	800c434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	88db      	ldrh	r3, [r3, #6]
 800c280:	b29a      	uxth	r2, r3
 800c282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c284:	889b      	ldrh	r3, [r3, #4]
 800c286:	b29b      	uxth	r3, r3
 800c288:	429a      	cmp	r2, r3
 800c28a:	d03d      	beq.n	800c308 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c290:	e03a      	b.n	800c308 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c294:	88db      	ldrh	r3, [r3, #6]
 800c296:	b29a      	uxth	r2, r3
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	889b      	ldrh	r3, [r3, #4]
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d902      	bls.n	800c2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a6:	e0c5      	b.n	800c434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	605a      	str	r2, [r3, #4]
      break;
 800c2ae:	e02b      	b.n	800c308 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800c2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b2:	889b      	ldrh	r3, [r3, #4]
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	889b      	ldrh	r3, [r3, #4]
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d102      	bne.n	800c2c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c4:	e0b6      	b.n	800c434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c8:	889b      	ldrh	r3, [r3, #4]
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	88db      	ldrh	r3, [r3, #6]
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d202      	bcs.n	800c2dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2da:	e0ab      	b.n	800c434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d009      	beq.n	800c2f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800c2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e4:	88db      	ldrh	r3, [r3, #6]
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	889b      	ldrh	r3, [r3, #4]
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d001      	beq.n	800c2f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	2b00      	cmp	r3, #0
 800c304:	d193      	bne.n	800c22e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800c306:	e000      	b.n	800c30a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800c308:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d12d      	bne.n	800c36c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	2b00      	cmp	r3, #0
 800c314:	d01c      	beq.n	800c350 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	88db      	ldrh	r3, [r3, #6]
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31e:	889b      	ldrh	r3, [r3, #4]
 800c320:	b29b      	uxth	r3, r3
 800c322:	429a      	cmp	r2, r3
 800c324:	d906      	bls.n	800c334 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800c326:	4b45      	ldr	r3, [pc, #276]	; (800c43c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c328:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800c32c:	4944      	ldr	r1, [pc, #272]	; (800c440 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c32e:	4845      	ldr	r0, [pc, #276]	; (800c444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c330:	f000 fcdc 	bl	800ccec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33c:	88db      	ldrh	r3, [r3, #6]
 800c33e:	b29a      	uxth	r2, r3
 800c340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c342:	889b      	ldrh	r3, [r3, #4]
 800c344:	b29b      	uxth	r3, r3
 800c346:	429a      	cmp	r2, r3
 800c348:	d010      	beq.n	800c36c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c34a:	2300      	movs	r3, #0
 800c34c:	623b      	str	r3, [r7, #32]
 800c34e:	e00d      	b.n	800c36c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c358:	4b38      	ldr	r3, [pc, #224]	; (800c43c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c35a:	f240 12bf 	movw	r2, #447	; 0x1bf
 800c35e:	493a      	ldr	r1, [pc, #232]	; (800c448 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c360:	4838      	ldr	r0, [pc, #224]	; (800c444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c362:	f000 fcc3 	bl	800ccec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d105      	bne.n	800c37e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	7f9b      	ldrb	r3, [r3, #30]
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d059      	beq.n	800c432 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d04f      	beq.n	800c424 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d006      	beq.n	800c39a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	889b      	ldrh	r3, [r3, #4]
 800c394:	b29b      	uxth	r3, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	623b      	str	r3, [r7, #32]
 800c39e:	e041      	b.n	800c424 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c3aa:	e012      	b.n	800c3d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b4:	88db      	ldrh	r3, [r3, #6]
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	889b      	ldrh	r3, [r3, #4]
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d002      	beq.n	800c3c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	623b      	str	r3, [r7, #32]
            break;
 800c3c6:	e007      	b.n	800c3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d1e9      	bne.n	800c3ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d022      	beq.n	800c424 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d106      	bne.n	800c3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800c3e6:	4b15      	ldr	r3, [pc, #84]	; (800c43c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c3e8:	f240 12df 	movw	r2, #479	; 0x1df
 800c3ec:	4917      	ldr	r1, [pc, #92]	; (800c44c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c3ee:	4815      	ldr	r0, [pc, #84]	; (800c444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c3f0:	f000 fc7c 	bl	800ccec <iprintf>
          LWIP_ASSERT("sanity check",
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d106      	bne.n	800c40e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800c400:	4b0e      	ldr	r3, [pc, #56]	; (800c43c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c402:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c406:	4911      	ldr	r1, [pc, #68]	; (800c44c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c408:	480e      	ldr	r0, [pc, #56]	; (800c444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c40a:	f000 fc6f 	bl	800ccec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d006      	beq.n	800c424 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800c416:	4b09      	ldr	r3, [pc, #36]	; (800c43c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c418:	f240 12e3 	movw	r2, #483	; 0x1e3
 800c41c:	490c      	ldr	r1, [pc, #48]	; (800c450 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c41e:	4809      	ldr	r0, [pc, #36]	; (800c444 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c420:	f000 fc64 	bl	800ccec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	2b00      	cmp	r3, #0
 800c428:	bf14      	ite	ne
 800c42a:	2301      	movne	r3, #1
 800c42c:	2300      	moveq	r3, #0
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	e000      	b.n	800c434 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3730      	adds	r7, #48	; 0x30
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	08010268 	.word	0x08010268
 800c440:	0801034c 	.word	0x0801034c
 800c444:	080102b0 	.word	0x080102b0
 800c448:	0801036c 	.word	0x0801036c
 800c44c:	080103a4 	.word	0x080103a4
 800c450:	080103b4 	.word	0x080103b4

0800c454 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b08e      	sub	sp, #56	; 0x38
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800c462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	f003 030f 	and.w	r3, r3, #15
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	2b14      	cmp	r3, #20
 800c472:	f040 8167 	bne.w	800c744 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c478:	88db      	ldrh	r3, [r3, #6]
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7f6 ff9b 	bl	80033b8 <lwip_htons>
 800c482:	4603      	mov	r3, r0
 800c484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c488:	b29b      	uxth	r3, r3
 800c48a:	00db      	lsls	r3, r3, #3
 800c48c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800c48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c490:	885b      	ldrh	r3, [r3, #2]
 800c492:	b29b      	uxth	r3, r3
 800c494:	4618      	mov	r0, r3
 800c496:	f7f6 ff8f 	bl	80033b8 <lwip_htons>
 800c49a:	4603      	mov	r3, r0
 800c49c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800c49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	f003 030f 	and.w	r3, r3, #15
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800c4ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	f0c0 8146 	bcc.w	800c748 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800c4bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7f8 faad 	bl	8004a28 <pbuf_clen>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c4d2:	4ba3      	ldr	r3, [pc, #652]	; (800c760 <ip4_reass+0x30c>)
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	8c3b      	ldrh	r3, [r7, #32]
 800c4da:	4413      	add	r3, r2
 800c4dc:	2b0a      	cmp	r3, #10
 800c4de:	dd10      	ble.n	800c502 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c4e0:	8c3b      	ldrh	r3, [r7, #32]
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4e6:	f7ff fd81 	bl	800bfec <ip_reass_remove_oldest_datagram>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 812d 	beq.w	800c74c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c4f2:	4b9b      	ldr	r3, [pc, #620]	; (800c760 <ip4_reass+0x30c>)
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	8c3b      	ldrh	r3, [r7, #32]
 800c4fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c4fc:	2b0a      	cmp	r3, #10
 800c4fe:	f300 8125 	bgt.w	800c74c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c502:	4b98      	ldr	r3, [pc, #608]	; (800c764 <ip4_reass+0x310>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	633b      	str	r3, [r7, #48]	; 0x30
 800c508:	e015      	b.n	800c536 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50c:	695a      	ldr	r2, [r3, #20]
 800c50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	429a      	cmp	r2, r3
 800c514:	d10c      	bne.n	800c530 <ip4_reass+0xdc>
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	699a      	ldr	r2, [r3, #24]
 800c51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d106      	bne.n	800c530 <ip4_reass+0xdc>
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	899a      	ldrh	r2, [r3, #12]
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	889b      	ldrh	r3, [r3, #4]
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d006      	beq.n	800c53e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	633b      	str	r3, [r7, #48]	; 0x30
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1e6      	bne.n	800c50a <ip4_reass+0xb6>
 800c53c:	e000      	b.n	800c540 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c53e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	2b00      	cmp	r3, #0
 800c544:	d109      	bne.n	800c55a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c546:	8c3b      	ldrh	r3, [r7, #32]
 800c548:	4619      	mov	r1, r3
 800c54a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c54c:	f7ff fdb0 	bl	800c0b0 <ip_reass_enqueue_new_datagram>
 800c550:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	2b00      	cmp	r3, #0
 800c556:	d11c      	bne.n	800c592 <ip4_reass+0x13e>
      goto nullreturn;
 800c558:	e0f9      	b.n	800c74e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55c:	88db      	ldrh	r3, [r3, #6]
 800c55e:	b29b      	uxth	r3, r3
 800c560:	4618      	mov	r0, r3
 800c562:	f7f6 ff29 	bl	80033b8 <lwip_htons>
 800c566:	4603      	mov	r3, r0
 800c568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d110      	bne.n	800c592 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	89db      	ldrh	r3, [r3, #14]
 800c574:	4618      	mov	r0, r3
 800c576:	f7f6 ff1f 	bl	80033b8 <lwip_htons>
 800c57a:	4603      	mov	r3, r0
 800c57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c580:	2b00      	cmp	r3, #0
 800c582:	d006      	beq.n	800c592 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c586:	3308      	adds	r3, #8
 800c588:	2214      	movs	r2, #20
 800c58a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 fb9a 	bl	800ccc6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c594:	88db      	ldrh	r3, [r3, #6]
 800c596:	b29b      	uxth	r3, r3
 800c598:	f003 0320 	and.w	r3, r3, #32
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bf0c      	ite	eq
 800c5a0:	2301      	moveq	r3, #1
 800c5a2:	2300      	movne	r3, #0
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00e      	beq.n	800c5cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800c5ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c5b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5b2:	4413      	add	r3, r2
 800c5b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c5b6:	8b7a      	ldrh	r2, [r7, #26]
 800c5b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	f0c0 80a0 	bcc.w	800c700 <ip4_reass+0x2ac>
 800c5c0:	8b7b      	ldrh	r3, [r7, #26]
 800c5c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	f200 809a 	bhi.w	800c700 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c5cc:	69fa      	ldr	r2, [r7, #28]
 800c5ce:	6879      	ldr	r1, [r7, #4]
 800c5d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5d2:	f7ff fdd5 	bl	800c180 <ip_reass_chain_frag_into_datagram_and_validate>
 800c5d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5de:	f000 8091 	beq.w	800c704 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c5e2:	4b5f      	ldr	r3, [pc, #380]	; (800c760 <ip4_reass+0x30c>)
 800c5e4:	881a      	ldrh	r2, [r3, #0]
 800c5e6:	8c3b      	ldrh	r3, [r7, #32]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	4b5c      	ldr	r3, [pc, #368]	; (800c760 <ip4_reass+0x30c>)
 800c5ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00d      	beq.n	800c612 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800c5f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c5f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5fa:	4413      	add	r3, r2
 800c5fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c600:	8a7a      	ldrh	r2, [r7, #18]
 800c602:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c606:	7f9b      	ldrb	r3, [r3, #30]
 800c608:	f043 0301 	orr.w	r3, r3, #1
 800c60c:	b2da      	uxtb	r2, r3
 800c60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c610:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d171      	bne.n	800c6fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800c618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61a:	8b9b      	ldrh	r3, [r3, #28]
 800c61c:	3314      	adds	r3, #20
 800c61e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	3308      	adds	r3, #8
 800c636:	2214      	movs	r2, #20
 800c638:	4619      	mov	r1, r3
 800c63a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c63c:	f000 fb43 	bl	800ccc6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c640:	8a3b      	ldrh	r3, [r7, #16]
 800c642:	4618      	mov	r0, r3
 800c644:	f7f6 feb8 	bl	80033b8 <lwip_htons>
 800c648:	4603      	mov	r3, r0
 800c64a:	461a      	mov	r2, r3
 800c64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c652:	2200      	movs	r2, #0
 800c654:	719a      	strb	r2, [r3, #6]
 800c656:	2200      	movs	r2, #0
 800c658:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	2200      	movs	r2, #0
 800c65e:	729a      	strb	r2, [r3, #10]
 800c660:	2200      	movs	r2, #0
 800c662:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c66a:	e00d      	b.n	800c688 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800c66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800c672:	2114      	movs	r1, #20
 800c674:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c676:	f7f8 f8c9 	bl	800480c <pbuf_remove_header>
      pbuf_cat(p, r);
 800c67a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f7f8 fa0d 	bl	8004a9c <pbuf_cat>
      r = iprh->next_pbuf;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800c688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1ee      	bne.n	800c66c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c68e:	4b35      	ldr	r3, [pc, #212]	; (800c764 <ip4_reass+0x310>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c694:	429a      	cmp	r2, r3
 800c696:	d102      	bne.n	800c69e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800c698:	2300      	movs	r3, #0
 800c69a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c69c:	e010      	b.n	800c6c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c69e:	4b31      	ldr	r3, [pc, #196]	; (800c764 <ip4_reass+0x310>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6a4:	e007      	b.n	800c6b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800c6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d006      	beq.n	800c6be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d1f4      	bne.n	800c6a6 <ip4_reass+0x252>
 800c6bc:	e000      	b.n	800c6c0 <ip4_reass+0x26c>
          break;
 800c6be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c6c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6c4:	f7ff fd2e 	bl	800c124 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7f8 f9ad 	bl	8004a28 <pbuf_clen>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c6d2:	4b23      	ldr	r3, [pc, #140]	; (800c760 <ip4_reass+0x30c>)
 800c6d4:	881b      	ldrh	r3, [r3, #0]
 800c6d6:	8c3a      	ldrh	r2, [r7, #32]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d906      	bls.n	800c6ea <ip4_reass+0x296>
 800c6dc:	4b22      	ldr	r3, [pc, #136]	; (800c768 <ip4_reass+0x314>)
 800c6de:	f240 229b 	movw	r2, #667	; 0x29b
 800c6e2:	4922      	ldr	r1, [pc, #136]	; (800c76c <ip4_reass+0x318>)
 800c6e4:	4822      	ldr	r0, [pc, #136]	; (800c770 <ip4_reass+0x31c>)
 800c6e6:	f000 fb01 	bl	800ccec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800c6ea:	4b1d      	ldr	r3, [pc, #116]	; (800c760 <ip4_reass+0x30c>)
 800c6ec:	881a      	ldrh	r2, [r3, #0]
 800c6ee:	8c3b      	ldrh	r3, [r7, #32]
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	4b1a      	ldr	r3, [pc, #104]	; (800c760 <ip4_reass+0x30c>)
 800c6f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	e02c      	b.n	800c756 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	e02a      	b.n	800c756 <ip4_reass+0x302>

nullreturn_ipr:
 800c700:	bf00      	nop
 800c702:	e000      	b.n	800c706 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800c704:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d106      	bne.n	800c71a <ip4_reass+0x2c6>
 800c70c:	4b16      	ldr	r3, [pc, #88]	; (800c768 <ip4_reass+0x314>)
 800c70e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800c712:	4918      	ldr	r1, [pc, #96]	; (800c774 <ip4_reass+0x320>)
 800c714:	4816      	ldr	r0, [pc, #88]	; (800c770 <ip4_reass+0x31c>)
 800c716:	f000 fae9 	bl	800ccec <iprintf>
  if (ipr->p == NULL) {
 800c71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d114      	bne.n	800c74c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800c722:	4b10      	ldr	r3, [pc, #64]	; (800c764 <ip4_reass+0x310>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c728:	429a      	cmp	r2, r3
 800c72a:	d006      	beq.n	800c73a <ip4_reass+0x2e6>
 800c72c:	4b0e      	ldr	r3, [pc, #56]	; (800c768 <ip4_reass+0x314>)
 800c72e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c732:	4911      	ldr	r1, [pc, #68]	; (800c778 <ip4_reass+0x324>)
 800c734:	480e      	ldr	r0, [pc, #56]	; (800c770 <ip4_reass+0x31c>)
 800c736:	f000 fad9 	bl	800ccec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800c73a:	2100      	movs	r1, #0
 800c73c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c73e:	f7ff fcf1 	bl	800c124 <ip_reass_dequeue_datagram>
 800c742:	e004      	b.n	800c74e <ip4_reass+0x2fa>
    goto nullreturn;
 800c744:	bf00      	nop
 800c746:	e002      	b.n	800c74e <ip4_reass+0x2fa>
    goto nullreturn;
 800c748:	bf00      	nop
 800c74a:	e000      	b.n	800c74e <ip4_reass+0x2fa>
  }

nullreturn:
 800c74c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7f8 f8e2 	bl	8004918 <pbuf_free>
  return NULL;
 800c754:	2300      	movs	r3, #0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3738      	adds	r7, #56	; 0x38
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20000204 	.word	0x20000204
 800c764:	20000200 	.word	0x20000200
 800c768:	08010268 	.word	0x08010268
 800c76c:	080103d8 	.word	0x080103d8
 800c770:	080102b0 	.word	0x080102b0
 800c774:	080103f4 	.word	0x080103f4
 800c778:	08010400 	.word	0x08010400

0800c77c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c780:	2005      	movs	r0, #5
 800c782:	f7f7 fa6f 	bl	8003c64 <memp_malloc>
 800c786:	4603      	mov	r3, r0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d106      	bne.n	800c7a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800c79a:	4b07      	ldr	r3, [pc, #28]	; (800c7b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c79c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800c7a0:	4906      	ldr	r1, [pc, #24]	; (800c7bc <ip_frag_free_pbuf_custom_ref+0x30>)
 800c7a2:	4807      	ldr	r0, [pc, #28]	; (800c7c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800c7a4:	f000 faa2 	bl	800ccec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c7a8:	6879      	ldr	r1, [r7, #4]
 800c7aa:	2005      	movs	r0, #5
 800c7ac:	f7f7 faa6 	bl	8003cfc <memp_free>
}
 800c7b0:	bf00      	nop
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	08010268 	.word	0x08010268
 800c7bc:	08010420 	.word	0x08010420
 800c7c0:	080102b0 	.word	0x080102b0

0800c7c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d106      	bne.n	800c7e4 <ipfrag_free_pbuf_custom+0x20>
 800c7d6:	4b11      	ldr	r3, [pc, #68]	; (800c81c <ipfrag_free_pbuf_custom+0x58>)
 800c7d8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800c7dc:	4910      	ldr	r1, [pc, #64]	; (800c820 <ipfrag_free_pbuf_custom+0x5c>)
 800c7de:	4811      	ldr	r0, [pc, #68]	; (800c824 <ipfrag_free_pbuf_custom+0x60>)
 800c7e0:	f000 fa84 	bl	800ccec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d006      	beq.n	800c7fa <ipfrag_free_pbuf_custom+0x36>
 800c7ec:	4b0b      	ldr	r3, [pc, #44]	; (800c81c <ipfrag_free_pbuf_custom+0x58>)
 800c7ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c7f2:	490d      	ldr	r1, [pc, #52]	; (800c828 <ipfrag_free_pbuf_custom+0x64>)
 800c7f4:	480b      	ldr	r0, [pc, #44]	; (800c824 <ipfrag_free_pbuf_custom+0x60>)
 800c7f6:	f000 fa79 	bl	800ccec <iprintf>
  if (pcr->original != NULL) {
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	695b      	ldr	r3, [r3, #20]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d004      	beq.n	800c80c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	4618      	mov	r0, r3
 800c808:	f7f8 f886 	bl	8004918 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f7ff ffbd 	bl	800c78c <ip_frag_free_pbuf_custom_ref>
}
 800c812:	bf00      	nop
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	08010268 	.word	0x08010268
 800c820:	0801042c 	.word	0x0801042c
 800c824:	080102b0 	.word	0x080102b0
 800c828:	08010438 	.word	0x08010438

0800c82c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b094      	sub	sp, #80	; 0x50
 800c830:	af02      	add	r7, sp, #8
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	60b9      	str	r1, [r7, #8]
 800c836:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c842:	3b14      	subs	r3, #20
 800c844:	2b00      	cmp	r3, #0
 800c846:	da00      	bge.n	800c84a <ip4_frag+0x1e>
 800c848:	3307      	adds	r3, #7
 800c84a:	10db      	asrs	r3, r3, #3
 800c84c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c84e:	2314      	movs	r3, #20
 800c850:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800c858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	f003 030f 	and.w	r3, r3, #15
 800c864:	b2db      	uxtb	r3, r3
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	2b14      	cmp	r3, #20
 800c86c:	d002      	beq.n	800c874 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800c86e:	f06f 0305 	mvn.w	r3, #5
 800c872:	e10f      	b.n	800ca94 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	895b      	ldrh	r3, [r3, #10]
 800c878:	2b13      	cmp	r3, #19
 800c87a:	d809      	bhi.n	800c890 <ip4_frag+0x64>
 800c87c:	4b87      	ldr	r3, [pc, #540]	; (800ca9c <ip4_frag+0x270>)
 800c87e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800c882:	4987      	ldr	r1, [pc, #540]	; (800caa0 <ip4_frag+0x274>)
 800c884:	4887      	ldr	r0, [pc, #540]	; (800caa4 <ip4_frag+0x278>)
 800c886:	f000 fa31 	bl	800ccec <iprintf>
 800c88a:	f06f 0305 	mvn.w	r3, #5
 800c88e:	e101      	b.n	800ca94 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c892:	88db      	ldrh	r3, [r3, #6]
 800c894:	b29b      	uxth	r3, r3
 800c896:	4618      	mov	r0, r3
 800c898:	f7f6 fd8e 	bl	80033b8 <lwip_htons>
 800c89c:	4603      	mov	r3, r0
 800c89e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800c8a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c8a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800c8aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c8ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c8b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	891b      	ldrh	r3, [r3, #8]
 800c8b6:	3b14      	subs	r3, #20
 800c8b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800c8bc:	e0e0      	b.n	800ca80 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c8be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c8c0:	00db      	lsls	r3, r3, #3
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	bf28      	it	cs
 800c8cc:	4613      	movcs	r3, r2
 800c8ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c8d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c8d4:	2114      	movs	r1, #20
 800c8d6:	200e      	movs	r0, #14
 800c8d8:	f7f7 fd3e 	bl	8004358 <pbuf_alloc>
 800c8dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800c8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f000 80d4 	beq.w	800ca8e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e8:	895b      	ldrh	r3, [r3, #10]
 800c8ea:	2b13      	cmp	r3, #19
 800c8ec:	d806      	bhi.n	800c8fc <ip4_frag+0xd0>
 800c8ee:	4b6b      	ldr	r3, [pc, #428]	; (800ca9c <ip4_frag+0x270>)
 800c8f0:	f240 3225 	movw	r2, #805	; 0x325
 800c8f4:	496c      	ldr	r1, [pc, #432]	; (800caa8 <ip4_frag+0x27c>)
 800c8f6:	486b      	ldr	r0, [pc, #428]	; (800caa4 <ip4_frag+0x278>)
 800c8f8:	f000 f9f8 	bl	800ccec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	2214      	movs	r2, #20
 800c902:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c904:	4618      	mov	r0, r3
 800c906:	f000 f9de 	bl	800ccc6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800c910:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c912:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800c916:	e064      	b.n	800c9e2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	895a      	ldrh	r2, [r3, #10]
 800c91c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	895b      	ldrh	r3, [r3, #10]
 800c926:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c928:	429a      	cmp	r2, r3
 800c92a:	d906      	bls.n	800c93a <ip4_frag+0x10e>
 800c92c:	4b5b      	ldr	r3, [pc, #364]	; (800ca9c <ip4_frag+0x270>)
 800c92e:	f240 322d 	movw	r2, #813	; 0x32d
 800c932:	495e      	ldr	r1, [pc, #376]	; (800caac <ip4_frag+0x280>)
 800c934:	485b      	ldr	r0, [pc, #364]	; (800caa4 <ip4_frag+0x278>)
 800c936:	f000 f9d9 	bl	800ccec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c93a:	8bfa      	ldrh	r2, [r7, #30]
 800c93c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c940:	4293      	cmp	r3, r2
 800c942:	bf28      	it	cs
 800c944:	4613      	movcs	r3, r2
 800c946:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c94a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d105      	bne.n	800c95e <ip4_frag+0x132>
        poff = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	60fb      	str	r3, [r7, #12]
        continue;
 800c95c:	e041      	b.n	800c9e2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c95e:	f7ff ff0d 	bl	800c77c <ip_frag_alloc_pbuf_custom_ref>
 800c962:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d103      	bne.n	800c972 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800c96a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c96c:	f7f7 ffd4 	bl	8004918 <pbuf_free>
        goto memerr;
 800c970:	e08e      	b.n	800ca90 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c972:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c978:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c97a:	4413      	add	r3, r2
 800c97c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800c980:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c984:	9201      	str	r2, [sp, #4]
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	4603      	mov	r3, r0
 800c98a:	2241      	movs	r2, #65	; 0x41
 800c98c:	2000      	movs	r0, #0
 800c98e:	f7f7 fe09 	bl	80045a4 <pbuf_alloced_custom>
 800c992:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d106      	bne.n	800c9a8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c99a:	69b8      	ldr	r0, [r7, #24]
 800c99c:	f7ff fef6 	bl	800c78c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c9a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9a2:	f7f7 ffb9 	bl	8004918 <pbuf_free>
        goto memerr;
 800c9a6:	e073      	b.n	800ca90 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f7f8 f855 	bl	8004a58 <pbuf_ref>
      pcr->original = p;
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	4a3e      	ldr	r2, [pc, #248]	; (800cab0 <ip4_frag+0x284>)
 800c9b8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c9ba:	6979      	ldr	r1, [r7, #20]
 800c9bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9be:	f7f8 f86d 	bl	8004a9c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c9c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800c9c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9ca:	1ad3      	subs	r3, r2, r3
 800c9cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800c9d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d004      	beq.n	800c9e2 <ip4_frag+0x1b6>
        poff = 0;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c9e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d196      	bne.n	800c918 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800c9ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c9ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9f0:	4413      	add	r3, r2
 800c9f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c9f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c9fc:	3b14      	subs	r3, #20
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	bfd4      	ite	le
 800ca02:	2301      	movle	r3, #1
 800ca04:	2300      	movgt	r3, #0
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ca0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ca0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca12:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d002      	beq.n	800ca20 <ip4_frag+0x1f4>
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d003      	beq.n	800ca28 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ca20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ca26:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ca28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7f6 fcc4 	bl	80033b8 <lwip_htons>
 800ca30:	4603      	mov	r3, r0
 800ca32:	461a      	mov	r2, r3
 800ca34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca36:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ca38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ca3a:	3314      	adds	r3, #20
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7f6 fcba 	bl	80033b8 <lwip_htons>
 800ca44:	4603      	mov	r3, r0
 800ca46:	461a      	mov	r2, r3
 800ca48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4e:	2200      	movs	r2, #0
 800ca50:	729a      	strb	r2, [r3, #10]
 800ca52:	2200      	movs	r2, #0
 800ca54:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	695b      	ldr	r3, [r3, #20]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca5e:	68b8      	ldr	r0, [r7, #8]
 800ca60:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ca62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca64:	f7f7 ff58 	bl	8004918 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ca68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ca6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ca74:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ca78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ca80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f47f af1a 	bne.w	800c8be <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	e002      	b.n	800ca94 <ip4_frag+0x268>
      goto memerr;
 800ca8e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ca90:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3748      	adds	r7, #72	; 0x48
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	08010268 	.word	0x08010268
 800caa0:	08010444 	.word	0x08010444
 800caa4:	080102b0 	.word	0x080102b0
 800caa8:	08010460 	.word	0x08010460
 800caac:	08010480 	.word	0x08010480
 800cab0:	0800c7c5 	.word	0x0800c7c5

0800cab4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800cabe:	230e      	movs	r3, #14
 800cac0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	895b      	ldrh	r3, [r3, #10]
 800cac6:	2b0e      	cmp	r3, #14
 800cac8:	d96e      	bls.n	800cba8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	7bdb      	ldrb	r3, [r3, #15]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d106      	bne.n	800cae0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cad8:	3301      	adds	r3, #1
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	7b1a      	ldrb	r2, [r3, #12]
 800caea:	7b5b      	ldrb	r3, [r3, #13]
 800caec:	021b      	lsls	r3, r3, #8
 800caee:	4313      	orrs	r3, r2
 800caf0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	f003 0301 	and.w	r3, r3, #1
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d023      	beq.n	800cb46 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d10f      	bne.n	800cb26 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	785b      	ldrb	r3, [r3, #1]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d11b      	bne.n	800cb46 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cb12:	2b5e      	cmp	r3, #94	; 0x5e
 800cb14:	d117      	bne.n	800cb46 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	7b5b      	ldrb	r3, [r3, #13]
 800cb1a:	f043 0310 	orr.w	r3, r3, #16
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	735a      	strb	r2, [r3, #13]
 800cb24:	e00f      	b.n	800cb46 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	2206      	movs	r2, #6
 800cb2a:	4928      	ldr	r1, [pc, #160]	; (800cbcc <ethernet_input+0x118>)
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f000 f8bb 	bl	800cca8 <memcmp>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d106      	bne.n	800cb46 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	7b5b      	ldrb	r3, [r3, #13]
 800cb3c:	f043 0308 	orr.w	r3, r3, #8
 800cb40:	b2da      	uxtb	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800cb46:	89fb      	ldrh	r3, [r7, #14]
 800cb48:	2b08      	cmp	r3, #8
 800cb4a:	d003      	beq.n	800cb54 <ethernet_input+0xa0>
 800cb4c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800cb50:	d014      	beq.n	800cb7c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800cb52:	e032      	b.n	800cbba <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb5a:	f003 0308 	and.w	r3, r3, #8
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d024      	beq.n	800cbac <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800cb62:	8afb      	ldrh	r3, [r7, #22]
 800cb64:	4619      	mov	r1, r3
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f7f7 fe50 	bl	800480c <pbuf_remove_header>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d11e      	bne.n	800cbb0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7fe ff2d 	bl	800b9d4 <ip4_input>
      break;
 800cb7a:	e013      	b.n	800cba4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb82:	f003 0308 	and.w	r3, r3, #8
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d014      	beq.n	800cbb4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800cb8a:	8afb      	ldrh	r3, [r7, #22]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7f7 fe3c 	bl	800480c <pbuf_remove_header>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d10e      	bne.n	800cbb8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800cb9a:	6839      	ldr	r1, [r7, #0]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7fe f8cd 	bl	800ad3c <etharp_input>
      break;
 800cba2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	e00c      	b.n	800cbc2 <ethernet_input+0x10e>
    goto free_and_return;
 800cba8:	bf00      	nop
 800cbaa:	e006      	b.n	800cbba <ethernet_input+0x106>
        goto free_and_return;
 800cbac:	bf00      	nop
 800cbae:	e004      	b.n	800cbba <ethernet_input+0x106>
        goto free_and_return;
 800cbb0:	bf00      	nop
 800cbb2:	e002      	b.n	800cbba <ethernet_input+0x106>
        goto free_and_return;
 800cbb4:	bf00      	nop
 800cbb6:	e000      	b.n	800cbba <ethernet_input+0x106>
        goto free_and_return;
 800cbb8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f7f7 feac 	bl	8004918 <pbuf_free>
  return ERR_OK;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3718      	adds	r7, #24
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	08010608 	.word	0x08010608

0800cbd0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	607a      	str	r2, [r7, #4]
 800cbdc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800cbde:	8c3b      	ldrh	r3, [r7, #32]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7f6 fbe9 	bl	80033b8 <lwip_htons>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800cbea:	210e      	movs	r1, #14
 800cbec:	68b8      	ldr	r0, [r7, #8]
 800cbee:	f7f7 fdfd 	bl	80047ec <pbuf_add_header>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d125      	bne.n	800cc44 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	8afa      	ldrh	r2, [r7, #22]
 800cc02:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	2206      	movs	r2, #6
 800cc08:	6839      	ldr	r1, [r7, #0]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 f85b 	bl	800ccc6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	3306      	adds	r3, #6
 800cc14:	2206      	movs	r2, #6
 800cc16:	6879      	ldr	r1, [r7, #4]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f000 f854 	bl	800ccc6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc24:	2b06      	cmp	r3, #6
 800cc26:	d006      	beq.n	800cc36 <ethernet_output+0x66>
 800cc28:	4b0a      	ldr	r3, [pc, #40]	; (800cc54 <ethernet_output+0x84>)
 800cc2a:	f240 1233 	movw	r2, #307	; 0x133
 800cc2e:	490a      	ldr	r1, [pc, #40]	; (800cc58 <ethernet_output+0x88>)
 800cc30:	480a      	ldr	r0, [pc, #40]	; (800cc5c <ethernet_output+0x8c>)
 800cc32:	f000 f85b 	bl	800ccec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	68b9      	ldr	r1, [r7, #8]
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	4798      	blx	r3
 800cc40:	4603      	mov	r3, r0
 800cc42:	e002      	b.n	800cc4a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800cc44:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800cc46:	f06f 0301 	mvn.w	r3, #1
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3718      	adds	r7, #24
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	08010490 	.word	0x08010490
 800cc58:	080104c8 	.word	0x080104c8
 800cc5c:	080104fc 	.word	0x080104fc

0800cc60 <__libc_init_array>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	4e0d      	ldr	r6, [pc, #52]	; (800cc98 <__libc_init_array+0x38>)
 800cc64:	4c0d      	ldr	r4, [pc, #52]	; (800cc9c <__libc_init_array+0x3c>)
 800cc66:	1ba4      	subs	r4, r4, r6
 800cc68:	10a4      	asrs	r4, r4, #2
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	42a5      	cmp	r5, r4
 800cc6e:	d109      	bne.n	800cc84 <__libc_init_array+0x24>
 800cc70:	4e0b      	ldr	r6, [pc, #44]	; (800cca0 <__libc_init_array+0x40>)
 800cc72:	4c0c      	ldr	r4, [pc, #48]	; (800cca4 <__libc_init_array+0x44>)
 800cc74:	f000 ff5a 	bl	800db2c <_init>
 800cc78:	1ba4      	subs	r4, r4, r6
 800cc7a:	10a4      	asrs	r4, r4, #2
 800cc7c:	2500      	movs	r5, #0
 800cc7e:	42a5      	cmp	r5, r4
 800cc80:	d105      	bne.n	800cc8e <__libc_init_array+0x2e>
 800cc82:	bd70      	pop	{r4, r5, r6, pc}
 800cc84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc88:	4798      	blx	r3
 800cc8a:	3501      	adds	r5, #1
 800cc8c:	e7ee      	b.n	800cc6c <__libc_init_array+0xc>
 800cc8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc92:	4798      	blx	r3
 800cc94:	3501      	adds	r5, #1
 800cc96:	e7f2      	b.n	800cc7e <__libc_init_array+0x1e>
 800cc98:	080106b8 	.word	0x080106b8
 800cc9c:	080106b8 	.word	0x080106b8
 800cca0:	080106b8 	.word	0x080106b8
 800cca4:	080106bc 	.word	0x080106bc

0800cca8 <memcmp>:
 800cca8:	b530      	push	{r4, r5, lr}
 800ccaa:	2400      	movs	r4, #0
 800ccac:	42a2      	cmp	r2, r4
 800ccae:	d101      	bne.n	800ccb4 <memcmp+0xc>
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	e007      	b.n	800ccc4 <memcmp+0x1c>
 800ccb4:	5d03      	ldrb	r3, [r0, r4]
 800ccb6:	3401      	adds	r4, #1
 800ccb8:	190d      	adds	r5, r1, r4
 800ccba:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800ccbe:	42ab      	cmp	r3, r5
 800ccc0:	d0f4      	beq.n	800ccac <memcmp+0x4>
 800ccc2:	1b58      	subs	r0, r3, r5
 800ccc4:	bd30      	pop	{r4, r5, pc}

0800ccc6 <memcpy>:
 800ccc6:	b510      	push	{r4, lr}
 800ccc8:	1e43      	subs	r3, r0, #1
 800ccca:	440a      	add	r2, r1
 800cccc:	4291      	cmp	r1, r2
 800ccce:	d100      	bne.n	800ccd2 <memcpy+0xc>
 800ccd0:	bd10      	pop	{r4, pc}
 800ccd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccda:	e7f7      	b.n	800cccc <memcpy+0x6>

0800ccdc <memset>:
 800ccdc:	4402      	add	r2, r0
 800ccde:	4603      	mov	r3, r0
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d100      	bne.n	800cce6 <memset+0xa>
 800cce4:	4770      	bx	lr
 800cce6:	f803 1b01 	strb.w	r1, [r3], #1
 800ccea:	e7f9      	b.n	800cce0 <memset+0x4>

0800ccec <iprintf>:
 800ccec:	b40f      	push	{r0, r1, r2, r3}
 800ccee:	4b0a      	ldr	r3, [pc, #40]	; (800cd18 <iprintf+0x2c>)
 800ccf0:	b513      	push	{r0, r1, r4, lr}
 800ccf2:	681c      	ldr	r4, [r3, #0]
 800ccf4:	b124      	cbz	r4, 800cd00 <iprintf+0x14>
 800ccf6:	69a3      	ldr	r3, [r4, #24]
 800ccf8:	b913      	cbnz	r3, 800cd00 <iprintf+0x14>
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 f882 	bl	800ce04 <__sinit>
 800cd00:	ab05      	add	r3, sp, #20
 800cd02:	9a04      	ldr	r2, [sp, #16]
 800cd04:	68a1      	ldr	r1, [r4, #8]
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f000 f9df 	bl	800d0cc <_vfiprintf_r>
 800cd0e:	b002      	add	sp, #8
 800cd10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd14:	b004      	add	sp, #16
 800cd16:	4770      	bx	lr
 800cd18:	20000014 	.word	0x20000014

0800cd1c <rand>:
 800cd1c:	b538      	push	{r3, r4, r5, lr}
 800cd1e:	4b13      	ldr	r3, [pc, #76]	; (800cd6c <rand+0x50>)
 800cd20:	681c      	ldr	r4, [r3, #0]
 800cd22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cd24:	b97b      	cbnz	r3, 800cd46 <rand+0x2a>
 800cd26:	2018      	movs	r0, #24
 800cd28:	f000 f8f6 	bl	800cf18 <malloc>
 800cd2c:	4a10      	ldr	r2, [pc, #64]	; (800cd70 <rand+0x54>)
 800cd2e:	4b11      	ldr	r3, [pc, #68]	; (800cd74 <rand+0x58>)
 800cd30:	63a0      	str	r0, [r4, #56]	; 0x38
 800cd32:	e9c0 2300 	strd	r2, r3, [r0]
 800cd36:	4b10      	ldr	r3, [pc, #64]	; (800cd78 <rand+0x5c>)
 800cd38:	6083      	str	r3, [r0, #8]
 800cd3a:	230b      	movs	r3, #11
 800cd3c:	8183      	strh	r3, [r0, #12]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	2300      	movs	r3, #0
 800cd42:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cd46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cd48:	480c      	ldr	r0, [pc, #48]	; (800cd7c <rand+0x60>)
 800cd4a:	690a      	ldr	r2, [r1, #16]
 800cd4c:	694b      	ldr	r3, [r1, #20]
 800cd4e:	4c0c      	ldr	r4, [pc, #48]	; (800cd80 <rand+0x64>)
 800cd50:	4350      	muls	r0, r2
 800cd52:	fb04 0003 	mla	r0, r4, r3, r0
 800cd56:	fba2 2304 	umull	r2, r3, r2, r4
 800cd5a:	4403      	add	r3, r0
 800cd5c:	1c54      	adds	r4, r2, #1
 800cd5e:	f143 0500 	adc.w	r5, r3, #0
 800cd62:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800cd66:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800cd6a:	bd38      	pop	{r3, r4, r5, pc}
 800cd6c:	20000014 	.word	0x20000014
 800cd70:	abcd330e 	.word	0xabcd330e
 800cd74:	e66d1234 	.word	0xe66d1234
 800cd78:	0005deec 	.word	0x0005deec
 800cd7c:	5851f42d 	.word	0x5851f42d
 800cd80:	4c957f2d 	.word	0x4c957f2d

0800cd84 <std>:
 800cd84:	2300      	movs	r3, #0
 800cd86:	b510      	push	{r4, lr}
 800cd88:	4604      	mov	r4, r0
 800cd8a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd8e:	6083      	str	r3, [r0, #8]
 800cd90:	8181      	strh	r1, [r0, #12]
 800cd92:	6643      	str	r3, [r0, #100]	; 0x64
 800cd94:	81c2      	strh	r2, [r0, #14]
 800cd96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd9a:	6183      	str	r3, [r0, #24]
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	2208      	movs	r2, #8
 800cda0:	305c      	adds	r0, #92	; 0x5c
 800cda2:	f7ff ff9b 	bl	800ccdc <memset>
 800cda6:	4b05      	ldr	r3, [pc, #20]	; (800cdbc <std+0x38>)
 800cda8:	6263      	str	r3, [r4, #36]	; 0x24
 800cdaa:	4b05      	ldr	r3, [pc, #20]	; (800cdc0 <std+0x3c>)
 800cdac:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdae:	4b05      	ldr	r3, [pc, #20]	; (800cdc4 <std+0x40>)
 800cdb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdb2:	4b05      	ldr	r3, [pc, #20]	; (800cdc8 <std+0x44>)
 800cdb4:	6224      	str	r4, [r4, #32]
 800cdb6:	6323      	str	r3, [r4, #48]	; 0x30
 800cdb8:	bd10      	pop	{r4, pc}
 800cdba:	bf00      	nop
 800cdbc:	0800d629 	.word	0x0800d629
 800cdc0:	0800d64b 	.word	0x0800d64b
 800cdc4:	0800d683 	.word	0x0800d683
 800cdc8:	0800d6a7 	.word	0x0800d6a7

0800cdcc <_cleanup_r>:
 800cdcc:	4901      	ldr	r1, [pc, #4]	; (800cdd4 <_cleanup_r+0x8>)
 800cdce:	f000 b885 	b.w	800cedc <_fwalk_reent>
 800cdd2:	bf00      	nop
 800cdd4:	0800d981 	.word	0x0800d981

0800cdd8 <__sfmoreglue>:
 800cdd8:	b570      	push	{r4, r5, r6, lr}
 800cdda:	1e4a      	subs	r2, r1, #1
 800cddc:	2568      	movs	r5, #104	; 0x68
 800cdde:	4355      	muls	r5, r2
 800cde0:	460e      	mov	r6, r1
 800cde2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cde6:	f000 f8ed 	bl	800cfc4 <_malloc_r>
 800cdea:	4604      	mov	r4, r0
 800cdec:	b140      	cbz	r0, 800ce00 <__sfmoreglue+0x28>
 800cdee:	2100      	movs	r1, #0
 800cdf0:	e9c0 1600 	strd	r1, r6, [r0]
 800cdf4:	300c      	adds	r0, #12
 800cdf6:	60a0      	str	r0, [r4, #8]
 800cdf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cdfc:	f7ff ff6e 	bl	800ccdc <memset>
 800ce00:	4620      	mov	r0, r4
 800ce02:	bd70      	pop	{r4, r5, r6, pc}

0800ce04 <__sinit>:
 800ce04:	6983      	ldr	r3, [r0, #24]
 800ce06:	b510      	push	{r4, lr}
 800ce08:	4604      	mov	r4, r0
 800ce0a:	bb33      	cbnz	r3, 800ce5a <__sinit+0x56>
 800ce0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ce10:	6503      	str	r3, [r0, #80]	; 0x50
 800ce12:	4b12      	ldr	r3, [pc, #72]	; (800ce5c <__sinit+0x58>)
 800ce14:	4a12      	ldr	r2, [pc, #72]	; (800ce60 <__sinit+0x5c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6282      	str	r2, [r0, #40]	; 0x28
 800ce1a:	4298      	cmp	r0, r3
 800ce1c:	bf04      	itt	eq
 800ce1e:	2301      	moveq	r3, #1
 800ce20:	6183      	streq	r3, [r0, #24]
 800ce22:	f000 f81f 	bl	800ce64 <__sfp>
 800ce26:	6060      	str	r0, [r4, #4]
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f000 f81b 	bl	800ce64 <__sfp>
 800ce2e:	60a0      	str	r0, [r4, #8]
 800ce30:	4620      	mov	r0, r4
 800ce32:	f000 f817 	bl	800ce64 <__sfp>
 800ce36:	2200      	movs	r2, #0
 800ce38:	60e0      	str	r0, [r4, #12]
 800ce3a:	2104      	movs	r1, #4
 800ce3c:	6860      	ldr	r0, [r4, #4]
 800ce3e:	f7ff ffa1 	bl	800cd84 <std>
 800ce42:	2201      	movs	r2, #1
 800ce44:	2109      	movs	r1, #9
 800ce46:	68a0      	ldr	r0, [r4, #8]
 800ce48:	f7ff ff9c 	bl	800cd84 <std>
 800ce4c:	2202      	movs	r2, #2
 800ce4e:	2112      	movs	r1, #18
 800ce50:	68e0      	ldr	r0, [r4, #12]
 800ce52:	f7ff ff97 	bl	800cd84 <std>
 800ce56:	2301      	movs	r3, #1
 800ce58:	61a3      	str	r3, [r4, #24]
 800ce5a:	bd10      	pop	{r4, pc}
 800ce5c:	08010618 	.word	0x08010618
 800ce60:	0800cdcd 	.word	0x0800cdcd

0800ce64 <__sfp>:
 800ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce66:	4b1b      	ldr	r3, [pc, #108]	; (800ced4 <__sfp+0x70>)
 800ce68:	681e      	ldr	r6, [r3, #0]
 800ce6a:	69b3      	ldr	r3, [r6, #24]
 800ce6c:	4607      	mov	r7, r0
 800ce6e:	b913      	cbnz	r3, 800ce76 <__sfp+0x12>
 800ce70:	4630      	mov	r0, r6
 800ce72:	f7ff ffc7 	bl	800ce04 <__sinit>
 800ce76:	3648      	adds	r6, #72	; 0x48
 800ce78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	d503      	bpl.n	800ce88 <__sfp+0x24>
 800ce80:	6833      	ldr	r3, [r6, #0]
 800ce82:	b133      	cbz	r3, 800ce92 <__sfp+0x2e>
 800ce84:	6836      	ldr	r6, [r6, #0]
 800ce86:	e7f7      	b.n	800ce78 <__sfp+0x14>
 800ce88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce8c:	b16d      	cbz	r5, 800ceaa <__sfp+0x46>
 800ce8e:	3468      	adds	r4, #104	; 0x68
 800ce90:	e7f4      	b.n	800ce7c <__sfp+0x18>
 800ce92:	2104      	movs	r1, #4
 800ce94:	4638      	mov	r0, r7
 800ce96:	f7ff ff9f 	bl	800cdd8 <__sfmoreglue>
 800ce9a:	6030      	str	r0, [r6, #0]
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d1f1      	bne.n	800ce84 <__sfp+0x20>
 800cea0:	230c      	movs	r3, #12
 800cea2:	603b      	str	r3, [r7, #0]
 800cea4:	4604      	mov	r4, r0
 800cea6:	4620      	mov	r0, r4
 800cea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceaa:	4b0b      	ldr	r3, [pc, #44]	; (800ced8 <__sfp+0x74>)
 800ceac:	6665      	str	r5, [r4, #100]	; 0x64
 800ceae:	e9c4 5500 	strd	r5, r5, [r4]
 800ceb2:	60a5      	str	r5, [r4, #8]
 800ceb4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ceb8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cebc:	2208      	movs	r2, #8
 800cebe:	4629      	mov	r1, r5
 800cec0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cec4:	f7ff ff0a 	bl	800ccdc <memset>
 800cec8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cecc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ced0:	e7e9      	b.n	800cea6 <__sfp+0x42>
 800ced2:	bf00      	nop
 800ced4:	08010618 	.word	0x08010618
 800ced8:	ffff0001 	.word	0xffff0001

0800cedc <_fwalk_reent>:
 800cedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee0:	4680      	mov	r8, r0
 800cee2:	4689      	mov	r9, r1
 800cee4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cee8:	2600      	movs	r6, #0
 800ceea:	b914      	cbnz	r4, 800cef2 <_fwalk_reent+0x16>
 800ceec:	4630      	mov	r0, r6
 800ceee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cef2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cef6:	3f01      	subs	r7, #1
 800cef8:	d501      	bpl.n	800cefe <_fwalk_reent+0x22>
 800cefa:	6824      	ldr	r4, [r4, #0]
 800cefc:	e7f5      	b.n	800ceea <_fwalk_reent+0xe>
 800cefe:	89ab      	ldrh	r3, [r5, #12]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d907      	bls.n	800cf14 <_fwalk_reent+0x38>
 800cf04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	d003      	beq.n	800cf14 <_fwalk_reent+0x38>
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	4640      	mov	r0, r8
 800cf10:	47c8      	blx	r9
 800cf12:	4306      	orrs	r6, r0
 800cf14:	3568      	adds	r5, #104	; 0x68
 800cf16:	e7ee      	b.n	800cef6 <_fwalk_reent+0x1a>

0800cf18 <malloc>:
 800cf18:	4b02      	ldr	r3, [pc, #8]	; (800cf24 <malloc+0xc>)
 800cf1a:	4601      	mov	r1, r0
 800cf1c:	6818      	ldr	r0, [r3, #0]
 800cf1e:	f000 b851 	b.w	800cfc4 <_malloc_r>
 800cf22:	bf00      	nop
 800cf24:	20000014 	.word	0x20000014

0800cf28 <_free_r>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4605      	mov	r5, r0
 800cf2c:	2900      	cmp	r1, #0
 800cf2e:	d045      	beq.n	800cfbc <_free_r+0x94>
 800cf30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf34:	1f0c      	subs	r4, r1, #4
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	bfb8      	it	lt
 800cf3a:	18e4      	addlt	r4, r4, r3
 800cf3c:	f000 fdc0 	bl	800dac0 <__malloc_lock>
 800cf40:	4a1f      	ldr	r2, [pc, #124]	; (800cfc0 <_free_r+0x98>)
 800cf42:	6813      	ldr	r3, [r2, #0]
 800cf44:	4610      	mov	r0, r2
 800cf46:	b933      	cbnz	r3, 800cf56 <_free_r+0x2e>
 800cf48:	6063      	str	r3, [r4, #4]
 800cf4a:	6014      	str	r4, [r2, #0]
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf52:	f000 bdb6 	b.w	800dac2 <__malloc_unlock>
 800cf56:	42a3      	cmp	r3, r4
 800cf58:	d90c      	bls.n	800cf74 <_free_r+0x4c>
 800cf5a:	6821      	ldr	r1, [r4, #0]
 800cf5c:	1862      	adds	r2, r4, r1
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	bf04      	itt	eq
 800cf62:	681a      	ldreq	r2, [r3, #0]
 800cf64:	685b      	ldreq	r3, [r3, #4]
 800cf66:	6063      	str	r3, [r4, #4]
 800cf68:	bf04      	itt	eq
 800cf6a:	1852      	addeq	r2, r2, r1
 800cf6c:	6022      	streq	r2, [r4, #0]
 800cf6e:	6004      	str	r4, [r0, #0]
 800cf70:	e7ec      	b.n	800cf4c <_free_r+0x24>
 800cf72:	4613      	mov	r3, r2
 800cf74:	685a      	ldr	r2, [r3, #4]
 800cf76:	b10a      	cbz	r2, 800cf7c <_free_r+0x54>
 800cf78:	42a2      	cmp	r2, r4
 800cf7a:	d9fa      	bls.n	800cf72 <_free_r+0x4a>
 800cf7c:	6819      	ldr	r1, [r3, #0]
 800cf7e:	1858      	adds	r0, r3, r1
 800cf80:	42a0      	cmp	r0, r4
 800cf82:	d10b      	bne.n	800cf9c <_free_r+0x74>
 800cf84:	6820      	ldr	r0, [r4, #0]
 800cf86:	4401      	add	r1, r0
 800cf88:	1858      	adds	r0, r3, r1
 800cf8a:	4282      	cmp	r2, r0
 800cf8c:	6019      	str	r1, [r3, #0]
 800cf8e:	d1dd      	bne.n	800cf4c <_free_r+0x24>
 800cf90:	6810      	ldr	r0, [r2, #0]
 800cf92:	6852      	ldr	r2, [r2, #4]
 800cf94:	605a      	str	r2, [r3, #4]
 800cf96:	4401      	add	r1, r0
 800cf98:	6019      	str	r1, [r3, #0]
 800cf9a:	e7d7      	b.n	800cf4c <_free_r+0x24>
 800cf9c:	d902      	bls.n	800cfa4 <_free_r+0x7c>
 800cf9e:	230c      	movs	r3, #12
 800cfa0:	602b      	str	r3, [r5, #0]
 800cfa2:	e7d3      	b.n	800cf4c <_free_r+0x24>
 800cfa4:	6820      	ldr	r0, [r4, #0]
 800cfa6:	1821      	adds	r1, r4, r0
 800cfa8:	428a      	cmp	r2, r1
 800cfaa:	bf04      	itt	eq
 800cfac:	6811      	ldreq	r1, [r2, #0]
 800cfae:	6852      	ldreq	r2, [r2, #4]
 800cfb0:	6062      	str	r2, [r4, #4]
 800cfb2:	bf04      	itt	eq
 800cfb4:	1809      	addeq	r1, r1, r0
 800cfb6:	6021      	streq	r1, [r4, #0]
 800cfb8:	605c      	str	r4, [r3, #4]
 800cfba:	e7c7      	b.n	800cf4c <_free_r+0x24>
 800cfbc:	bd38      	pop	{r3, r4, r5, pc}
 800cfbe:	bf00      	nop
 800cfc0:	20000208 	.word	0x20000208

0800cfc4 <_malloc_r>:
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	1ccd      	adds	r5, r1, #3
 800cfc8:	f025 0503 	bic.w	r5, r5, #3
 800cfcc:	3508      	adds	r5, #8
 800cfce:	2d0c      	cmp	r5, #12
 800cfd0:	bf38      	it	cc
 800cfd2:	250c      	movcc	r5, #12
 800cfd4:	2d00      	cmp	r5, #0
 800cfd6:	4606      	mov	r6, r0
 800cfd8:	db01      	blt.n	800cfde <_malloc_r+0x1a>
 800cfda:	42a9      	cmp	r1, r5
 800cfdc:	d903      	bls.n	800cfe6 <_malloc_r+0x22>
 800cfde:	230c      	movs	r3, #12
 800cfe0:	6033      	str	r3, [r6, #0]
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	bd70      	pop	{r4, r5, r6, pc}
 800cfe6:	f000 fd6b 	bl	800dac0 <__malloc_lock>
 800cfea:	4a21      	ldr	r2, [pc, #132]	; (800d070 <_malloc_r+0xac>)
 800cfec:	6814      	ldr	r4, [r2, #0]
 800cfee:	4621      	mov	r1, r4
 800cff0:	b991      	cbnz	r1, 800d018 <_malloc_r+0x54>
 800cff2:	4c20      	ldr	r4, [pc, #128]	; (800d074 <_malloc_r+0xb0>)
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	b91b      	cbnz	r3, 800d000 <_malloc_r+0x3c>
 800cff8:	4630      	mov	r0, r6
 800cffa:	f000 fb05 	bl	800d608 <_sbrk_r>
 800cffe:	6020      	str	r0, [r4, #0]
 800d000:	4629      	mov	r1, r5
 800d002:	4630      	mov	r0, r6
 800d004:	f000 fb00 	bl	800d608 <_sbrk_r>
 800d008:	1c43      	adds	r3, r0, #1
 800d00a:	d124      	bne.n	800d056 <_malloc_r+0x92>
 800d00c:	230c      	movs	r3, #12
 800d00e:	6033      	str	r3, [r6, #0]
 800d010:	4630      	mov	r0, r6
 800d012:	f000 fd56 	bl	800dac2 <__malloc_unlock>
 800d016:	e7e4      	b.n	800cfe2 <_malloc_r+0x1e>
 800d018:	680b      	ldr	r3, [r1, #0]
 800d01a:	1b5b      	subs	r3, r3, r5
 800d01c:	d418      	bmi.n	800d050 <_malloc_r+0x8c>
 800d01e:	2b0b      	cmp	r3, #11
 800d020:	d90f      	bls.n	800d042 <_malloc_r+0x7e>
 800d022:	600b      	str	r3, [r1, #0]
 800d024:	50cd      	str	r5, [r1, r3]
 800d026:	18cc      	adds	r4, r1, r3
 800d028:	4630      	mov	r0, r6
 800d02a:	f000 fd4a 	bl	800dac2 <__malloc_unlock>
 800d02e:	f104 000b 	add.w	r0, r4, #11
 800d032:	1d23      	adds	r3, r4, #4
 800d034:	f020 0007 	bic.w	r0, r0, #7
 800d038:	1ac3      	subs	r3, r0, r3
 800d03a:	d0d3      	beq.n	800cfe4 <_malloc_r+0x20>
 800d03c:	425a      	negs	r2, r3
 800d03e:	50e2      	str	r2, [r4, r3]
 800d040:	e7d0      	b.n	800cfe4 <_malloc_r+0x20>
 800d042:	428c      	cmp	r4, r1
 800d044:	684b      	ldr	r3, [r1, #4]
 800d046:	bf16      	itet	ne
 800d048:	6063      	strne	r3, [r4, #4]
 800d04a:	6013      	streq	r3, [r2, #0]
 800d04c:	460c      	movne	r4, r1
 800d04e:	e7eb      	b.n	800d028 <_malloc_r+0x64>
 800d050:	460c      	mov	r4, r1
 800d052:	6849      	ldr	r1, [r1, #4]
 800d054:	e7cc      	b.n	800cff0 <_malloc_r+0x2c>
 800d056:	1cc4      	adds	r4, r0, #3
 800d058:	f024 0403 	bic.w	r4, r4, #3
 800d05c:	42a0      	cmp	r0, r4
 800d05e:	d005      	beq.n	800d06c <_malloc_r+0xa8>
 800d060:	1a21      	subs	r1, r4, r0
 800d062:	4630      	mov	r0, r6
 800d064:	f000 fad0 	bl	800d608 <_sbrk_r>
 800d068:	3001      	adds	r0, #1
 800d06a:	d0cf      	beq.n	800d00c <_malloc_r+0x48>
 800d06c:	6025      	str	r5, [r4, #0]
 800d06e:	e7db      	b.n	800d028 <_malloc_r+0x64>
 800d070:	20000208 	.word	0x20000208
 800d074:	2000020c 	.word	0x2000020c

0800d078 <__sfputc_r>:
 800d078:	6893      	ldr	r3, [r2, #8]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	b410      	push	{r4}
 800d080:	6093      	str	r3, [r2, #8]
 800d082:	da08      	bge.n	800d096 <__sfputc_r+0x1e>
 800d084:	6994      	ldr	r4, [r2, #24]
 800d086:	42a3      	cmp	r3, r4
 800d088:	db01      	blt.n	800d08e <__sfputc_r+0x16>
 800d08a:	290a      	cmp	r1, #10
 800d08c:	d103      	bne.n	800d096 <__sfputc_r+0x1e>
 800d08e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d092:	f000 bb0d 	b.w	800d6b0 <__swbuf_r>
 800d096:	6813      	ldr	r3, [r2, #0]
 800d098:	1c58      	adds	r0, r3, #1
 800d09a:	6010      	str	r0, [r2, #0]
 800d09c:	7019      	strb	r1, [r3, #0]
 800d09e:	4608      	mov	r0, r1
 800d0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0a4:	4770      	bx	lr

0800d0a6 <__sfputs_r>:
 800d0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0a8:	4606      	mov	r6, r0
 800d0aa:	460f      	mov	r7, r1
 800d0ac:	4614      	mov	r4, r2
 800d0ae:	18d5      	adds	r5, r2, r3
 800d0b0:	42ac      	cmp	r4, r5
 800d0b2:	d101      	bne.n	800d0b8 <__sfputs_r+0x12>
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	e007      	b.n	800d0c8 <__sfputs_r+0x22>
 800d0b8:	463a      	mov	r2, r7
 800d0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f7ff ffda 	bl	800d078 <__sfputc_r>
 800d0c4:	1c43      	adds	r3, r0, #1
 800d0c6:	d1f3      	bne.n	800d0b0 <__sfputs_r+0xa>
 800d0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0cc <_vfiprintf_r>:
 800d0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	b09d      	sub	sp, #116	; 0x74
 800d0d4:	4617      	mov	r7, r2
 800d0d6:	461d      	mov	r5, r3
 800d0d8:	4606      	mov	r6, r0
 800d0da:	b118      	cbz	r0, 800d0e4 <_vfiprintf_r+0x18>
 800d0dc:	6983      	ldr	r3, [r0, #24]
 800d0de:	b90b      	cbnz	r3, 800d0e4 <_vfiprintf_r+0x18>
 800d0e0:	f7ff fe90 	bl	800ce04 <__sinit>
 800d0e4:	4b7c      	ldr	r3, [pc, #496]	; (800d2d8 <_vfiprintf_r+0x20c>)
 800d0e6:	429c      	cmp	r4, r3
 800d0e8:	d158      	bne.n	800d19c <_vfiprintf_r+0xd0>
 800d0ea:	6874      	ldr	r4, [r6, #4]
 800d0ec:	89a3      	ldrh	r3, [r4, #12]
 800d0ee:	0718      	lsls	r0, r3, #28
 800d0f0:	d55e      	bpl.n	800d1b0 <_vfiprintf_r+0xe4>
 800d0f2:	6923      	ldr	r3, [r4, #16]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d05b      	beq.n	800d1b0 <_vfiprintf_r+0xe4>
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d0fc:	2320      	movs	r3, #32
 800d0fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d102:	2330      	movs	r3, #48	; 0x30
 800d104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d108:	9503      	str	r5, [sp, #12]
 800d10a:	f04f 0b01 	mov.w	fp, #1
 800d10e:	46b8      	mov	r8, r7
 800d110:	4645      	mov	r5, r8
 800d112:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d116:	b10b      	cbz	r3, 800d11c <_vfiprintf_r+0x50>
 800d118:	2b25      	cmp	r3, #37	; 0x25
 800d11a:	d154      	bne.n	800d1c6 <_vfiprintf_r+0xfa>
 800d11c:	ebb8 0a07 	subs.w	sl, r8, r7
 800d120:	d00b      	beq.n	800d13a <_vfiprintf_r+0x6e>
 800d122:	4653      	mov	r3, sl
 800d124:	463a      	mov	r2, r7
 800d126:	4621      	mov	r1, r4
 800d128:	4630      	mov	r0, r6
 800d12a:	f7ff ffbc 	bl	800d0a6 <__sfputs_r>
 800d12e:	3001      	adds	r0, #1
 800d130:	f000 80c2 	beq.w	800d2b8 <_vfiprintf_r+0x1ec>
 800d134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d136:	4453      	add	r3, sl
 800d138:	9309      	str	r3, [sp, #36]	; 0x24
 800d13a:	f898 3000 	ldrb.w	r3, [r8]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f000 80ba 	beq.w	800d2b8 <_vfiprintf_r+0x1ec>
 800d144:	2300      	movs	r3, #0
 800d146:	f04f 32ff 	mov.w	r2, #4294967295
 800d14a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d14e:	9304      	str	r3, [sp, #16]
 800d150:	9307      	str	r3, [sp, #28]
 800d152:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d156:	931a      	str	r3, [sp, #104]	; 0x68
 800d158:	46a8      	mov	r8, r5
 800d15a:	2205      	movs	r2, #5
 800d15c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d160:	485e      	ldr	r0, [pc, #376]	; (800d2dc <_vfiprintf_r+0x210>)
 800d162:	f7f3 f835 	bl	80001d0 <memchr>
 800d166:	9b04      	ldr	r3, [sp, #16]
 800d168:	bb78      	cbnz	r0, 800d1ca <_vfiprintf_r+0xfe>
 800d16a:	06d9      	lsls	r1, r3, #27
 800d16c:	bf44      	itt	mi
 800d16e:	2220      	movmi	r2, #32
 800d170:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d174:	071a      	lsls	r2, r3, #28
 800d176:	bf44      	itt	mi
 800d178:	222b      	movmi	r2, #43	; 0x2b
 800d17a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d17e:	782a      	ldrb	r2, [r5, #0]
 800d180:	2a2a      	cmp	r2, #42	; 0x2a
 800d182:	d02a      	beq.n	800d1da <_vfiprintf_r+0x10e>
 800d184:	9a07      	ldr	r2, [sp, #28]
 800d186:	46a8      	mov	r8, r5
 800d188:	2000      	movs	r0, #0
 800d18a:	250a      	movs	r5, #10
 800d18c:	4641      	mov	r1, r8
 800d18e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d192:	3b30      	subs	r3, #48	; 0x30
 800d194:	2b09      	cmp	r3, #9
 800d196:	d969      	bls.n	800d26c <_vfiprintf_r+0x1a0>
 800d198:	b360      	cbz	r0, 800d1f4 <_vfiprintf_r+0x128>
 800d19a:	e024      	b.n	800d1e6 <_vfiprintf_r+0x11a>
 800d19c:	4b50      	ldr	r3, [pc, #320]	; (800d2e0 <_vfiprintf_r+0x214>)
 800d19e:	429c      	cmp	r4, r3
 800d1a0:	d101      	bne.n	800d1a6 <_vfiprintf_r+0xda>
 800d1a2:	68b4      	ldr	r4, [r6, #8]
 800d1a4:	e7a2      	b.n	800d0ec <_vfiprintf_r+0x20>
 800d1a6:	4b4f      	ldr	r3, [pc, #316]	; (800d2e4 <_vfiprintf_r+0x218>)
 800d1a8:	429c      	cmp	r4, r3
 800d1aa:	bf08      	it	eq
 800d1ac:	68f4      	ldreq	r4, [r6, #12]
 800d1ae:	e79d      	b.n	800d0ec <_vfiprintf_r+0x20>
 800d1b0:	4621      	mov	r1, r4
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f000 fae0 	bl	800d778 <__swsetup_r>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d09d      	beq.n	800d0f8 <_vfiprintf_r+0x2c>
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c0:	b01d      	add	sp, #116	; 0x74
 800d1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c6:	46a8      	mov	r8, r5
 800d1c8:	e7a2      	b.n	800d110 <_vfiprintf_r+0x44>
 800d1ca:	4a44      	ldr	r2, [pc, #272]	; (800d2dc <_vfiprintf_r+0x210>)
 800d1cc:	1a80      	subs	r0, r0, r2
 800d1ce:	fa0b f000 	lsl.w	r0, fp, r0
 800d1d2:	4318      	orrs	r0, r3
 800d1d4:	9004      	str	r0, [sp, #16]
 800d1d6:	4645      	mov	r5, r8
 800d1d8:	e7be      	b.n	800d158 <_vfiprintf_r+0x8c>
 800d1da:	9a03      	ldr	r2, [sp, #12]
 800d1dc:	1d11      	adds	r1, r2, #4
 800d1de:	6812      	ldr	r2, [r2, #0]
 800d1e0:	9103      	str	r1, [sp, #12]
 800d1e2:	2a00      	cmp	r2, #0
 800d1e4:	db01      	blt.n	800d1ea <_vfiprintf_r+0x11e>
 800d1e6:	9207      	str	r2, [sp, #28]
 800d1e8:	e004      	b.n	800d1f4 <_vfiprintf_r+0x128>
 800d1ea:	4252      	negs	r2, r2
 800d1ec:	f043 0302 	orr.w	r3, r3, #2
 800d1f0:	9207      	str	r2, [sp, #28]
 800d1f2:	9304      	str	r3, [sp, #16]
 800d1f4:	f898 3000 	ldrb.w	r3, [r8]
 800d1f8:	2b2e      	cmp	r3, #46	; 0x2e
 800d1fa:	d10e      	bne.n	800d21a <_vfiprintf_r+0x14e>
 800d1fc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d200:	2b2a      	cmp	r3, #42	; 0x2a
 800d202:	d138      	bne.n	800d276 <_vfiprintf_r+0x1aa>
 800d204:	9b03      	ldr	r3, [sp, #12]
 800d206:	1d1a      	adds	r2, r3, #4
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	9203      	str	r2, [sp, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	bfb8      	it	lt
 800d210:	f04f 33ff 	movlt.w	r3, #4294967295
 800d214:	f108 0802 	add.w	r8, r8, #2
 800d218:	9305      	str	r3, [sp, #20]
 800d21a:	4d33      	ldr	r5, [pc, #204]	; (800d2e8 <_vfiprintf_r+0x21c>)
 800d21c:	f898 1000 	ldrb.w	r1, [r8]
 800d220:	2203      	movs	r2, #3
 800d222:	4628      	mov	r0, r5
 800d224:	f7f2 ffd4 	bl	80001d0 <memchr>
 800d228:	b140      	cbz	r0, 800d23c <_vfiprintf_r+0x170>
 800d22a:	2340      	movs	r3, #64	; 0x40
 800d22c:	1b40      	subs	r0, r0, r5
 800d22e:	fa03 f000 	lsl.w	r0, r3, r0
 800d232:	9b04      	ldr	r3, [sp, #16]
 800d234:	4303      	orrs	r3, r0
 800d236:	f108 0801 	add.w	r8, r8, #1
 800d23a:	9304      	str	r3, [sp, #16]
 800d23c:	f898 1000 	ldrb.w	r1, [r8]
 800d240:	482a      	ldr	r0, [pc, #168]	; (800d2ec <_vfiprintf_r+0x220>)
 800d242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d246:	2206      	movs	r2, #6
 800d248:	f108 0701 	add.w	r7, r8, #1
 800d24c:	f7f2 ffc0 	bl	80001d0 <memchr>
 800d250:	2800      	cmp	r0, #0
 800d252:	d037      	beq.n	800d2c4 <_vfiprintf_r+0x1f8>
 800d254:	4b26      	ldr	r3, [pc, #152]	; (800d2f0 <_vfiprintf_r+0x224>)
 800d256:	bb1b      	cbnz	r3, 800d2a0 <_vfiprintf_r+0x1d4>
 800d258:	9b03      	ldr	r3, [sp, #12]
 800d25a:	3307      	adds	r3, #7
 800d25c:	f023 0307 	bic.w	r3, r3, #7
 800d260:	3308      	adds	r3, #8
 800d262:	9303      	str	r3, [sp, #12]
 800d264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d266:	444b      	add	r3, r9
 800d268:	9309      	str	r3, [sp, #36]	; 0x24
 800d26a:	e750      	b.n	800d10e <_vfiprintf_r+0x42>
 800d26c:	fb05 3202 	mla	r2, r5, r2, r3
 800d270:	2001      	movs	r0, #1
 800d272:	4688      	mov	r8, r1
 800d274:	e78a      	b.n	800d18c <_vfiprintf_r+0xc0>
 800d276:	2300      	movs	r3, #0
 800d278:	f108 0801 	add.w	r8, r8, #1
 800d27c:	9305      	str	r3, [sp, #20]
 800d27e:	4619      	mov	r1, r3
 800d280:	250a      	movs	r5, #10
 800d282:	4640      	mov	r0, r8
 800d284:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d288:	3a30      	subs	r2, #48	; 0x30
 800d28a:	2a09      	cmp	r2, #9
 800d28c:	d903      	bls.n	800d296 <_vfiprintf_r+0x1ca>
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d0c3      	beq.n	800d21a <_vfiprintf_r+0x14e>
 800d292:	9105      	str	r1, [sp, #20]
 800d294:	e7c1      	b.n	800d21a <_vfiprintf_r+0x14e>
 800d296:	fb05 2101 	mla	r1, r5, r1, r2
 800d29a:	2301      	movs	r3, #1
 800d29c:	4680      	mov	r8, r0
 800d29e:	e7f0      	b.n	800d282 <_vfiprintf_r+0x1b6>
 800d2a0:	ab03      	add	r3, sp, #12
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	4622      	mov	r2, r4
 800d2a6:	4b13      	ldr	r3, [pc, #76]	; (800d2f4 <_vfiprintf_r+0x228>)
 800d2a8:	a904      	add	r1, sp, #16
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	f3af 8000 	nop.w
 800d2b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d2b4:	4681      	mov	r9, r0
 800d2b6:	d1d5      	bne.n	800d264 <_vfiprintf_r+0x198>
 800d2b8:	89a3      	ldrh	r3, [r4, #12]
 800d2ba:	065b      	lsls	r3, r3, #25
 800d2bc:	f53f af7e 	bmi.w	800d1bc <_vfiprintf_r+0xf0>
 800d2c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2c2:	e77d      	b.n	800d1c0 <_vfiprintf_r+0xf4>
 800d2c4:	ab03      	add	r3, sp, #12
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	4622      	mov	r2, r4
 800d2ca:	4b0a      	ldr	r3, [pc, #40]	; (800d2f4 <_vfiprintf_r+0x228>)
 800d2cc:	a904      	add	r1, sp, #16
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f000 f888 	bl	800d3e4 <_printf_i>
 800d2d4:	e7ec      	b.n	800d2b0 <_vfiprintf_r+0x1e4>
 800d2d6:	bf00      	nop
 800d2d8:	0801063c 	.word	0x0801063c
 800d2dc:	0801067c 	.word	0x0801067c
 800d2e0:	0801065c 	.word	0x0801065c
 800d2e4:	0801061c 	.word	0x0801061c
 800d2e8:	08010682 	.word	0x08010682
 800d2ec:	08010686 	.word	0x08010686
 800d2f0:	00000000 	.word	0x00000000
 800d2f4:	0800d0a7 	.word	0x0800d0a7

0800d2f8 <_printf_common>:
 800d2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2fc:	4691      	mov	r9, r2
 800d2fe:	461f      	mov	r7, r3
 800d300:	688a      	ldr	r2, [r1, #8]
 800d302:	690b      	ldr	r3, [r1, #16]
 800d304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d308:	4293      	cmp	r3, r2
 800d30a:	bfb8      	it	lt
 800d30c:	4613      	movlt	r3, r2
 800d30e:	f8c9 3000 	str.w	r3, [r9]
 800d312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d316:	4606      	mov	r6, r0
 800d318:	460c      	mov	r4, r1
 800d31a:	b112      	cbz	r2, 800d322 <_printf_common+0x2a>
 800d31c:	3301      	adds	r3, #1
 800d31e:	f8c9 3000 	str.w	r3, [r9]
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	0699      	lsls	r1, r3, #26
 800d326:	bf42      	ittt	mi
 800d328:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d32c:	3302      	addmi	r3, #2
 800d32e:	f8c9 3000 	strmi.w	r3, [r9]
 800d332:	6825      	ldr	r5, [r4, #0]
 800d334:	f015 0506 	ands.w	r5, r5, #6
 800d338:	d107      	bne.n	800d34a <_printf_common+0x52>
 800d33a:	f104 0a19 	add.w	sl, r4, #25
 800d33e:	68e3      	ldr	r3, [r4, #12]
 800d340:	f8d9 2000 	ldr.w	r2, [r9]
 800d344:	1a9b      	subs	r3, r3, r2
 800d346:	42ab      	cmp	r3, r5
 800d348:	dc28      	bgt.n	800d39c <_printf_common+0xa4>
 800d34a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d34e:	6822      	ldr	r2, [r4, #0]
 800d350:	3300      	adds	r3, #0
 800d352:	bf18      	it	ne
 800d354:	2301      	movne	r3, #1
 800d356:	0692      	lsls	r2, r2, #26
 800d358:	d42d      	bmi.n	800d3b6 <_printf_common+0xbe>
 800d35a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d35e:	4639      	mov	r1, r7
 800d360:	4630      	mov	r0, r6
 800d362:	47c0      	blx	r8
 800d364:	3001      	adds	r0, #1
 800d366:	d020      	beq.n	800d3aa <_printf_common+0xb2>
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	68e5      	ldr	r5, [r4, #12]
 800d36c:	f8d9 2000 	ldr.w	r2, [r9]
 800d370:	f003 0306 	and.w	r3, r3, #6
 800d374:	2b04      	cmp	r3, #4
 800d376:	bf08      	it	eq
 800d378:	1aad      	subeq	r5, r5, r2
 800d37a:	68a3      	ldr	r3, [r4, #8]
 800d37c:	6922      	ldr	r2, [r4, #16]
 800d37e:	bf0c      	ite	eq
 800d380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d384:	2500      	movne	r5, #0
 800d386:	4293      	cmp	r3, r2
 800d388:	bfc4      	itt	gt
 800d38a:	1a9b      	subgt	r3, r3, r2
 800d38c:	18ed      	addgt	r5, r5, r3
 800d38e:	f04f 0900 	mov.w	r9, #0
 800d392:	341a      	adds	r4, #26
 800d394:	454d      	cmp	r5, r9
 800d396:	d11a      	bne.n	800d3ce <_printf_common+0xd6>
 800d398:	2000      	movs	r0, #0
 800d39a:	e008      	b.n	800d3ae <_printf_common+0xb6>
 800d39c:	2301      	movs	r3, #1
 800d39e:	4652      	mov	r2, sl
 800d3a0:	4639      	mov	r1, r7
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	47c0      	blx	r8
 800d3a6:	3001      	adds	r0, #1
 800d3a8:	d103      	bne.n	800d3b2 <_printf_common+0xba>
 800d3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3b2:	3501      	adds	r5, #1
 800d3b4:	e7c3      	b.n	800d33e <_printf_common+0x46>
 800d3b6:	18e1      	adds	r1, r4, r3
 800d3b8:	1c5a      	adds	r2, r3, #1
 800d3ba:	2030      	movs	r0, #48	; 0x30
 800d3bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3c0:	4422      	add	r2, r4
 800d3c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3ca:	3302      	adds	r3, #2
 800d3cc:	e7c5      	b.n	800d35a <_printf_common+0x62>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	4622      	mov	r2, r4
 800d3d2:	4639      	mov	r1, r7
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	47c0      	blx	r8
 800d3d8:	3001      	adds	r0, #1
 800d3da:	d0e6      	beq.n	800d3aa <_printf_common+0xb2>
 800d3dc:	f109 0901 	add.w	r9, r9, #1
 800d3e0:	e7d8      	b.n	800d394 <_printf_common+0x9c>
	...

0800d3e4 <_printf_i>:
 800d3e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	7e09      	ldrb	r1, [r1, #24]
 800d3f0:	b085      	sub	sp, #20
 800d3f2:	296e      	cmp	r1, #110	; 0x6e
 800d3f4:	4617      	mov	r7, r2
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	4698      	mov	r8, r3
 800d3fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3fc:	f000 80b3 	beq.w	800d566 <_printf_i+0x182>
 800d400:	d822      	bhi.n	800d448 <_printf_i+0x64>
 800d402:	2963      	cmp	r1, #99	; 0x63
 800d404:	d036      	beq.n	800d474 <_printf_i+0x90>
 800d406:	d80a      	bhi.n	800d41e <_printf_i+0x3a>
 800d408:	2900      	cmp	r1, #0
 800d40a:	f000 80b9 	beq.w	800d580 <_printf_i+0x19c>
 800d40e:	2958      	cmp	r1, #88	; 0x58
 800d410:	f000 8083 	beq.w	800d51a <_printf_i+0x136>
 800d414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d418:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d41c:	e032      	b.n	800d484 <_printf_i+0xa0>
 800d41e:	2964      	cmp	r1, #100	; 0x64
 800d420:	d001      	beq.n	800d426 <_printf_i+0x42>
 800d422:	2969      	cmp	r1, #105	; 0x69
 800d424:	d1f6      	bne.n	800d414 <_printf_i+0x30>
 800d426:	6820      	ldr	r0, [r4, #0]
 800d428:	6813      	ldr	r3, [r2, #0]
 800d42a:	0605      	lsls	r5, r0, #24
 800d42c:	f103 0104 	add.w	r1, r3, #4
 800d430:	d52a      	bpl.n	800d488 <_printf_i+0xa4>
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	6011      	str	r1, [r2, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	da03      	bge.n	800d442 <_printf_i+0x5e>
 800d43a:	222d      	movs	r2, #45	; 0x2d
 800d43c:	425b      	negs	r3, r3
 800d43e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d442:	486f      	ldr	r0, [pc, #444]	; (800d600 <_printf_i+0x21c>)
 800d444:	220a      	movs	r2, #10
 800d446:	e039      	b.n	800d4bc <_printf_i+0xd8>
 800d448:	2973      	cmp	r1, #115	; 0x73
 800d44a:	f000 809d 	beq.w	800d588 <_printf_i+0x1a4>
 800d44e:	d808      	bhi.n	800d462 <_printf_i+0x7e>
 800d450:	296f      	cmp	r1, #111	; 0x6f
 800d452:	d020      	beq.n	800d496 <_printf_i+0xb2>
 800d454:	2970      	cmp	r1, #112	; 0x70
 800d456:	d1dd      	bne.n	800d414 <_printf_i+0x30>
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	f043 0320 	orr.w	r3, r3, #32
 800d45e:	6023      	str	r3, [r4, #0]
 800d460:	e003      	b.n	800d46a <_printf_i+0x86>
 800d462:	2975      	cmp	r1, #117	; 0x75
 800d464:	d017      	beq.n	800d496 <_printf_i+0xb2>
 800d466:	2978      	cmp	r1, #120	; 0x78
 800d468:	d1d4      	bne.n	800d414 <_printf_i+0x30>
 800d46a:	2378      	movs	r3, #120	; 0x78
 800d46c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d470:	4864      	ldr	r0, [pc, #400]	; (800d604 <_printf_i+0x220>)
 800d472:	e055      	b.n	800d520 <_printf_i+0x13c>
 800d474:	6813      	ldr	r3, [r2, #0]
 800d476:	1d19      	adds	r1, r3, #4
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6011      	str	r1, [r2, #0]
 800d47c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d484:	2301      	movs	r3, #1
 800d486:	e08c      	b.n	800d5a2 <_printf_i+0x1be>
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	6011      	str	r1, [r2, #0]
 800d48c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d490:	bf18      	it	ne
 800d492:	b21b      	sxthne	r3, r3
 800d494:	e7cf      	b.n	800d436 <_printf_i+0x52>
 800d496:	6813      	ldr	r3, [r2, #0]
 800d498:	6825      	ldr	r5, [r4, #0]
 800d49a:	1d18      	adds	r0, r3, #4
 800d49c:	6010      	str	r0, [r2, #0]
 800d49e:	0628      	lsls	r0, r5, #24
 800d4a0:	d501      	bpl.n	800d4a6 <_printf_i+0xc2>
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	e002      	b.n	800d4ac <_printf_i+0xc8>
 800d4a6:	0668      	lsls	r0, r5, #25
 800d4a8:	d5fb      	bpl.n	800d4a2 <_printf_i+0xbe>
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	4854      	ldr	r0, [pc, #336]	; (800d600 <_printf_i+0x21c>)
 800d4ae:	296f      	cmp	r1, #111	; 0x6f
 800d4b0:	bf14      	ite	ne
 800d4b2:	220a      	movne	r2, #10
 800d4b4:	2208      	moveq	r2, #8
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4bc:	6865      	ldr	r5, [r4, #4]
 800d4be:	60a5      	str	r5, [r4, #8]
 800d4c0:	2d00      	cmp	r5, #0
 800d4c2:	f2c0 8095 	blt.w	800d5f0 <_printf_i+0x20c>
 800d4c6:	6821      	ldr	r1, [r4, #0]
 800d4c8:	f021 0104 	bic.w	r1, r1, #4
 800d4cc:	6021      	str	r1, [r4, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d13d      	bne.n	800d54e <_printf_i+0x16a>
 800d4d2:	2d00      	cmp	r5, #0
 800d4d4:	f040 808e 	bne.w	800d5f4 <_printf_i+0x210>
 800d4d8:	4665      	mov	r5, ip
 800d4da:	2a08      	cmp	r2, #8
 800d4dc:	d10b      	bne.n	800d4f6 <_printf_i+0x112>
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	07db      	lsls	r3, r3, #31
 800d4e2:	d508      	bpl.n	800d4f6 <_printf_i+0x112>
 800d4e4:	6923      	ldr	r3, [r4, #16]
 800d4e6:	6862      	ldr	r2, [r4, #4]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	bfde      	ittt	le
 800d4ec:	2330      	movle	r3, #48	; 0x30
 800d4ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d4f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d4f6:	ebac 0305 	sub.w	r3, ip, r5
 800d4fa:	6123      	str	r3, [r4, #16]
 800d4fc:	f8cd 8000 	str.w	r8, [sp]
 800d500:	463b      	mov	r3, r7
 800d502:	aa03      	add	r2, sp, #12
 800d504:	4621      	mov	r1, r4
 800d506:	4630      	mov	r0, r6
 800d508:	f7ff fef6 	bl	800d2f8 <_printf_common>
 800d50c:	3001      	adds	r0, #1
 800d50e:	d14d      	bne.n	800d5ac <_printf_i+0x1c8>
 800d510:	f04f 30ff 	mov.w	r0, #4294967295
 800d514:	b005      	add	sp, #20
 800d516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d51a:	4839      	ldr	r0, [pc, #228]	; (800d600 <_printf_i+0x21c>)
 800d51c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d520:	6813      	ldr	r3, [r2, #0]
 800d522:	6821      	ldr	r1, [r4, #0]
 800d524:	1d1d      	adds	r5, r3, #4
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	6015      	str	r5, [r2, #0]
 800d52a:	060a      	lsls	r2, r1, #24
 800d52c:	d50b      	bpl.n	800d546 <_printf_i+0x162>
 800d52e:	07ca      	lsls	r2, r1, #31
 800d530:	bf44      	itt	mi
 800d532:	f041 0120 	orrmi.w	r1, r1, #32
 800d536:	6021      	strmi	r1, [r4, #0]
 800d538:	b91b      	cbnz	r3, 800d542 <_printf_i+0x15e>
 800d53a:	6822      	ldr	r2, [r4, #0]
 800d53c:	f022 0220 	bic.w	r2, r2, #32
 800d540:	6022      	str	r2, [r4, #0]
 800d542:	2210      	movs	r2, #16
 800d544:	e7b7      	b.n	800d4b6 <_printf_i+0xd2>
 800d546:	064d      	lsls	r5, r1, #25
 800d548:	bf48      	it	mi
 800d54a:	b29b      	uxthmi	r3, r3
 800d54c:	e7ef      	b.n	800d52e <_printf_i+0x14a>
 800d54e:	4665      	mov	r5, ip
 800d550:	fbb3 f1f2 	udiv	r1, r3, r2
 800d554:	fb02 3311 	mls	r3, r2, r1, r3
 800d558:	5cc3      	ldrb	r3, [r0, r3]
 800d55a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d55e:	460b      	mov	r3, r1
 800d560:	2900      	cmp	r1, #0
 800d562:	d1f5      	bne.n	800d550 <_printf_i+0x16c>
 800d564:	e7b9      	b.n	800d4da <_printf_i+0xf6>
 800d566:	6813      	ldr	r3, [r2, #0]
 800d568:	6825      	ldr	r5, [r4, #0]
 800d56a:	6961      	ldr	r1, [r4, #20]
 800d56c:	1d18      	adds	r0, r3, #4
 800d56e:	6010      	str	r0, [r2, #0]
 800d570:	0628      	lsls	r0, r5, #24
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	d501      	bpl.n	800d57a <_printf_i+0x196>
 800d576:	6019      	str	r1, [r3, #0]
 800d578:	e002      	b.n	800d580 <_printf_i+0x19c>
 800d57a:	066a      	lsls	r2, r5, #25
 800d57c:	d5fb      	bpl.n	800d576 <_printf_i+0x192>
 800d57e:	8019      	strh	r1, [r3, #0]
 800d580:	2300      	movs	r3, #0
 800d582:	6123      	str	r3, [r4, #16]
 800d584:	4665      	mov	r5, ip
 800d586:	e7b9      	b.n	800d4fc <_printf_i+0x118>
 800d588:	6813      	ldr	r3, [r2, #0]
 800d58a:	1d19      	adds	r1, r3, #4
 800d58c:	6011      	str	r1, [r2, #0]
 800d58e:	681d      	ldr	r5, [r3, #0]
 800d590:	6862      	ldr	r2, [r4, #4]
 800d592:	2100      	movs	r1, #0
 800d594:	4628      	mov	r0, r5
 800d596:	f7f2 fe1b 	bl	80001d0 <memchr>
 800d59a:	b108      	cbz	r0, 800d5a0 <_printf_i+0x1bc>
 800d59c:	1b40      	subs	r0, r0, r5
 800d59e:	6060      	str	r0, [r4, #4]
 800d5a0:	6863      	ldr	r3, [r4, #4]
 800d5a2:	6123      	str	r3, [r4, #16]
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5aa:	e7a7      	b.n	800d4fc <_printf_i+0x118>
 800d5ac:	6923      	ldr	r3, [r4, #16]
 800d5ae:	462a      	mov	r2, r5
 800d5b0:	4639      	mov	r1, r7
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	47c0      	blx	r8
 800d5b6:	3001      	adds	r0, #1
 800d5b8:	d0aa      	beq.n	800d510 <_printf_i+0x12c>
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	079b      	lsls	r3, r3, #30
 800d5be:	d413      	bmi.n	800d5e8 <_printf_i+0x204>
 800d5c0:	68e0      	ldr	r0, [r4, #12]
 800d5c2:	9b03      	ldr	r3, [sp, #12]
 800d5c4:	4298      	cmp	r0, r3
 800d5c6:	bfb8      	it	lt
 800d5c8:	4618      	movlt	r0, r3
 800d5ca:	e7a3      	b.n	800d514 <_printf_i+0x130>
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	464a      	mov	r2, r9
 800d5d0:	4639      	mov	r1, r7
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	47c0      	blx	r8
 800d5d6:	3001      	adds	r0, #1
 800d5d8:	d09a      	beq.n	800d510 <_printf_i+0x12c>
 800d5da:	3501      	adds	r5, #1
 800d5dc:	68e3      	ldr	r3, [r4, #12]
 800d5de:	9a03      	ldr	r2, [sp, #12]
 800d5e0:	1a9b      	subs	r3, r3, r2
 800d5e2:	42ab      	cmp	r3, r5
 800d5e4:	dcf2      	bgt.n	800d5cc <_printf_i+0x1e8>
 800d5e6:	e7eb      	b.n	800d5c0 <_printf_i+0x1dc>
 800d5e8:	2500      	movs	r5, #0
 800d5ea:	f104 0919 	add.w	r9, r4, #25
 800d5ee:	e7f5      	b.n	800d5dc <_printf_i+0x1f8>
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d1ac      	bne.n	800d54e <_printf_i+0x16a>
 800d5f4:	7803      	ldrb	r3, [r0, #0]
 800d5f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5fe:	e76c      	b.n	800d4da <_printf_i+0xf6>
 800d600:	0801068d 	.word	0x0801068d
 800d604:	0801069e 	.word	0x0801069e

0800d608 <_sbrk_r>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	4c06      	ldr	r4, [pc, #24]	; (800d624 <_sbrk_r+0x1c>)
 800d60c:	2300      	movs	r3, #0
 800d60e:	4605      	mov	r5, r0
 800d610:	4608      	mov	r0, r1
 800d612:	6023      	str	r3, [r4, #0]
 800d614:	f7f3 f930 	bl	8000878 <_sbrk>
 800d618:	1c43      	adds	r3, r0, #1
 800d61a:	d102      	bne.n	800d622 <_sbrk_r+0x1a>
 800d61c:	6823      	ldr	r3, [r4, #0]
 800d61e:	b103      	cbz	r3, 800d622 <_sbrk_r+0x1a>
 800d620:	602b      	str	r3, [r5, #0]
 800d622:	bd38      	pop	{r3, r4, r5, pc}
 800d624:	200068a8 	.word	0x200068a8

0800d628 <__sread>:
 800d628:	b510      	push	{r4, lr}
 800d62a:	460c      	mov	r4, r1
 800d62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d630:	f000 fa48 	bl	800dac4 <_read_r>
 800d634:	2800      	cmp	r0, #0
 800d636:	bfab      	itete	ge
 800d638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d63a:	89a3      	ldrhlt	r3, [r4, #12]
 800d63c:	181b      	addge	r3, r3, r0
 800d63e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d642:	bfac      	ite	ge
 800d644:	6563      	strge	r3, [r4, #84]	; 0x54
 800d646:	81a3      	strhlt	r3, [r4, #12]
 800d648:	bd10      	pop	{r4, pc}

0800d64a <__swrite>:
 800d64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d64e:	461f      	mov	r7, r3
 800d650:	898b      	ldrh	r3, [r1, #12]
 800d652:	05db      	lsls	r3, r3, #23
 800d654:	4605      	mov	r5, r0
 800d656:	460c      	mov	r4, r1
 800d658:	4616      	mov	r6, r2
 800d65a:	d505      	bpl.n	800d668 <__swrite+0x1e>
 800d65c:	2302      	movs	r3, #2
 800d65e:	2200      	movs	r2, #0
 800d660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d664:	f000 f9b6 	bl	800d9d4 <_lseek_r>
 800d668:	89a3      	ldrh	r3, [r4, #12]
 800d66a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d66e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d672:	81a3      	strh	r3, [r4, #12]
 800d674:	4632      	mov	r2, r6
 800d676:	463b      	mov	r3, r7
 800d678:	4628      	mov	r0, r5
 800d67a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d67e:	f000 b869 	b.w	800d754 <_write_r>

0800d682 <__sseek>:
 800d682:	b510      	push	{r4, lr}
 800d684:	460c      	mov	r4, r1
 800d686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d68a:	f000 f9a3 	bl	800d9d4 <_lseek_r>
 800d68e:	1c43      	adds	r3, r0, #1
 800d690:	89a3      	ldrh	r3, [r4, #12]
 800d692:	bf15      	itete	ne
 800d694:	6560      	strne	r0, [r4, #84]	; 0x54
 800d696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d69a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d69e:	81a3      	strheq	r3, [r4, #12]
 800d6a0:	bf18      	it	ne
 800d6a2:	81a3      	strhne	r3, [r4, #12]
 800d6a4:	bd10      	pop	{r4, pc}

0800d6a6 <__sclose>:
 800d6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6aa:	f000 b8d3 	b.w	800d854 <_close_r>
	...

0800d6b0 <__swbuf_r>:
 800d6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b2:	460e      	mov	r6, r1
 800d6b4:	4614      	mov	r4, r2
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	b118      	cbz	r0, 800d6c2 <__swbuf_r+0x12>
 800d6ba:	6983      	ldr	r3, [r0, #24]
 800d6bc:	b90b      	cbnz	r3, 800d6c2 <__swbuf_r+0x12>
 800d6be:	f7ff fba1 	bl	800ce04 <__sinit>
 800d6c2:	4b21      	ldr	r3, [pc, #132]	; (800d748 <__swbuf_r+0x98>)
 800d6c4:	429c      	cmp	r4, r3
 800d6c6:	d12a      	bne.n	800d71e <__swbuf_r+0x6e>
 800d6c8:	686c      	ldr	r4, [r5, #4]
 800d6ca:	69a3      	ldr	r3, [r4, #24]
 800d6cc:	60a3      	str	r3, [r4, #8]
 800d6ce:	89a3      	ldrh	r3, [r4, #12]
 800d6d0:	071a      	lsls	r2, r3, #28
 800d6d2:	d52e      	bpl.n	800d732 <__swbuf_r+0x82>
 800d6d4:	6923      	ldr	r3, [r4, #16]
 800d6d6:	b363      	cbz	r3, 800d732 <__swbuf_r+0x82>
 800d6d8:	6923      	ldr	r3, [r4, #16]
 800d6da:	6820      	ldr	r0, [r4, #0]
 800d6dc:	1ac0      	subs	r0, r0, r3
 800d6de:	6963      	ldr	r3, [r4, #20]
 800d6e0:	b2f6      	uxtb	r6, r6
 800d6e2:	4283      	cmp	r3, r0
 800d6e4:	4637      	mov	r7, r6
 800d6e6:	dc04      	bgt.n	800d6f2 <__swbuf_r+0x42>
 800d6e8:	4621      	mov	r1, r4
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f000 f948 	bl	800d980 <_fflush_r>
 800d6f0:	bb28      	cbnz	r0, 800d73e <__swbuf_r+0x8e>
 800d6f2:	68a3      	ldr	r3, [r4, #8]
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	60a3      	str	r3, [r4, #8]
 800d6f8:	6823      	ldr	r3, [r4, #0]
 800d6fa:	1c5a      	adds	r2, r3, #1
 800d6fc:	6022      	str	r2, [r4, #0]
 800d6fe:	701e      	strb	r6, [r3, #0]
 800d700:	6963      	ldr	r3, [r4, #20]
 800d702:	3001      	adds	r0, #1
 800d704:	4283      	cmp	r3, r0
 800d706:	d004      	beq.n	800d712 <__swbuf_r+0x62>
 800d708:	89a3      	ldrh	r3, [r4, #12]
 800d70a:	07db      	lsls	r3, r3, #31
 800d70c:	d519      	bpl.n	800d742 <__swbuf_r+0x92>
 800d70e:	2e0a      	cmp	r6, #10
 800d710:	d117      	bne.n	800d742 <__swbuf_r+0x92>
 800d712:	4621      	mov	r1, r4
 800d714:	4628      	mov	r0, r5
 800d716:	f000 f933 	bl	800d980 <_fflush_r>
 800d71a:	b190      	cbz	r0, 800d742 <__swbuf_r+0x92>
 800d71c:	e00f      	b.n	800d73e <__swbuf_r+0x8e>
 800d71e:	4b0b      	ldr	r3, [pc, #44]	; (800d74c <__swbuf_r+0x9c>)
 800d720:	429c      	cmp	r4, r3
 800d722:	d101      	bne.n	800d728 <__swbuf_r+0x78>
 800d724:	68ac      	ldr	r4, [r5, #8]
 800d726:	e7d0      	b.n	800d6ca <__swbuf_r+0x1a>
 800d728:	4b09      	ldr	r3, [pc, #36]	; (800d750 <__swbuf_r+0xa0>)
 800d72a:	429c      	cmp	r4, r3
 800d72c:	bf08      	it	eq
 800d72e:	68ec      	ldreq	r4, [r5, #12]
 800d730:	e7cb      	b.n	800d6ca <__swbuf_r+0x1a>
 800d732:	4621      	mov	r1, r4
 800d734:	4628      	mov	r0, r5
 800d736:	f000 f81f 	bl	800d778 <__swsetup_r>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	d0cc      	beq.n	800d6d8 <__swbuf_r+0x28>
 800d73e:	f04f 37ff 	mov.w	r7, #4294967295
 800d742:	4638      	mov	r0, r7
 800d744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d746:	bf00      	nop
 800d748:	0801063c 	.word	0x0801063c
 800d74c:	0801065c 	.word	0x0801065c
 800d750:	0801061c 	.word	0x0801061c

0800d754 <_write_r>:
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	4c07      	ldr	r4, [pc, #28]	; (800d774 <_write_r+0x20>)
 800d758:	4605      	mov	r5, r0
 800d75a:	4608      	mov	r0, r1
 800d75c:	4611      	mov	r1, r2
 800d75e:	2200      	movs	r2, #0
 800d760:	6022      	str	r2, [r4, #0]
 800d762:	461a      	mov	r2, r3
 800d764:	f7f3 f837 	bl	80007d6 <_write>
 800d768:	1c43      	adds	r3, r0, #1
 800d76a:	d102      	bne.n	800d772 <_write_r+0x1e>
 800d76c:	6823      	ldr	r3, [r4, #0]
 800d76e:	b103      	cbz	r3, 800d772 <_write_r+0x1e>
 800d770:	602b      	str	r3, [r5, #0]
 800d772:	bd38      	pop	{r3, r4, r5, pc}
 800d774:	200068a8 	.word	0x200068a8

0800d778 <__swsetup_r>:
 800d778:	4b32      	ldr	r3, [pc, #200]	; (800d844 <__swsetup_r+0xcc>)
 800d77a:	b570      	push	{r4, r5, r6, lr}
 800d77c:	681d      	ldr	r5, [r3, #0]
 800d77e:	4606      	mov	r6, r0
 800d780:	460c      	mov	r4, r1
 800d782:	b125      	cbz	r5, 800d78e <__swsetup_r+0x16>
 800d784:	69ab      	ldr	r3, [r5, #24]
 800d786:	b913      	cbnz	r3, 800d78e <__swsetup_r+0x16>
 800d788:	4628      	mov	r0, r5
 800d78a:	f7ff fb3b 	bl	800ce04 <__sinit>
 800d78e:	4b2e      	ldr	r3, [pc, #184]	; (800d848 <__swsetup_r+0xd0>)
 800d790:	429c      	cmp	r4, r3
 800d792:	d10f      	bne.n	800d7b4 <__swsetup_r+0x3c>
 800d794:	686c      	ldr	r4, [r5, #4]
 800d796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	0715      	lsls	r5, r2, #28
 800d79e:	d42c      	bmi.n	800d7fa <__swsetup_r+0x82>
 800d7a0:	06d0      	lsls	r0, r2, #27
 800d7a2:	d411      	bmi.n	800d7c8 <__swsetup_r+0x50>
 800d7a4:	2209      	movs	r2, #9
 800d7a6:	6032      	str	r2, [r6, #0]
 800d7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7ac:	81a3      	strh	r3, [r4, #12]
 800d7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b2:	e03e      	b.n	800d832 <__swsetup_r+0xba>
 800d7b4:	4b25      	ldr	r3, [pc, #148]	; (800d84c <__swsetup_r+0xd4>)
 800d7b6:	429c      	cmp	r4, r3
 800d7b8:	d101      	bne.n	800d7be <__swsetup_r+0x46>
 800d7ba:	68ac      	ldr	r4, [r5, #8]
 800d7bc:	e7eb      	b.n	800d796 <__swsetup_r+0x1e>
 800d7be:	4b24      	ldr	r3, [pc, #144]	; (800d850 <__swsetup_r+0xd8>)
 800d7c0:	429c      	cmp	r4, r3
 800d7c2:	bf08      	it	eq
 800d7c4:	68ec      	ldreq	r4, [r5, #12]
 800d7c6:	e7e6      	b.n	800d796 <__swsetup_r+0x1e>
 800d7c8:	0751      	lsls	r1, r2, #29
 800d7ca:	d512      	bpl.n	800d7f2 <__swsetup_r+0x7a>
 800d7cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7ce:	b141      	cbz	r1, 800d7e2 <__swsetup_r+0x6a>
 800d7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7d4:	4299      	cmp	r1, r3
 800d7d6:	d002      	beq.n	800d7de <__swsetup_r+0x66>
 800d7d8:	4630      	mov	r0, r6
 800d7da:	f7ff fba5 	bl	800cf28 <_free_r>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	6363      	str	r3, [r4, #52]	; 0x34
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d7e8:	81a3      	strh	r3, [r4, #12]
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	6063      	str	r3, [r4, #4]
 800d7ee:	6923      	ldr	r3, [r4, #16]
 800d7f0:	6023      	str	r3, [r4, #0]
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	f043 0308 	orr.w	r3, r3, #8
 800d7f8:	81a3      	strh	r3, [r4, #12]
 800d7fa:	6923      	ldr	r3, [r4, #16]
 800d7fc:	b94b      	cbnz	r3, 800d812 <__swsetup_r+0x9a>
 800d7fe:	89a3      	ldrh	r3, [r4, #12]
 800d800:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d808:	d003      	beq.n	800d812 <__swsetup_r+0x9a>
 800d80a:	4621      	mov	r1, r4
 800d80c:	4630      	mov	r0, r6
 800d80e:	f000 f917 	bl	800da40 <__smakebuf_r>
 800d812:	89a2      	ldrh	r2, [r4, #12]
 800d814:	f012 0301 	ands.w	r3, r2, #1
 800d818:	d00c      	beq.n	800d834 <__swsetup_r+0xbc>
 800d81a:	2300      	movs	r3, #0
 800d81c:	60a3      	str	r3, [r4, #8]
 800d81e:	6963      	ldr	r3, [r4, #20]
 800d820:	425b      	negs	r3, r3
 800d822:	61a3      	str	r3, [r4, #24]
 800d824:	6923      	ldr	r3, [r4, #16]
 800d826:	b953      	cbnz	r3, 800d83e <__swsetup_r+0xc6>
 800d828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d82c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d830:	d1ba      	bne.n	800d7a8 <__swsetup_r+0x30>
 800d832:	bd70      	pop	{r4, r5, r6, pc}
 800d834:	0792      	lsls	r2, r2, #30
 800d836:	bf58      	it	pl
 800d838:	6963      	ldrpl	r3, [r4, #20]
 800d83a:	60a3      	str	r3, [r4, #8]
 800d83c:	e7f2      	b.n	800d824 <__swsetup_r+0xac>
 800d83e:	2000      	movs	r0, #0
 800d840:	e7f7      	b.n	800d832 <__swsetup_r+0xba>
 800d842:	bf00      	nop
 800d844:	20000014 	.word	0x20000014
 800d848:	0801063c 	.word	0x0801063c
 800d84c:	0801065c 	.word	0x0801065c
 800d850:	0801061c 	.word	0x0801061c

0800d854 <_close_r>:
 800d854:	b538      	push	{r3, r4, r5, lr}
 800d856:	4c06      	ldr	r4, [pc, #24]	; (800d870 <_close_r+0x1c>)
 800d858:	2300      	movs	r3, #0
 800d85a:	4605      	mov	r5, r0
 800d85c:	4608      	mov	r0, r1
 800d85e:	6023      	str	r3, [r4, #0]
 800d860:	f7f2 ffd5 	bl	800080e <_close>
 800d864:	1c43      	adds	r3, r0, #1
 800d866:	d102      	bne.n	800d86e <_close_r+0x1a>
 800d868:	6823      	ldr	r3, [r4, #0]
 800d86a:	b103      	cbz	r3, 800d86e <_close_r+0x1a>
 800d86c:	602b      	str	r3, [r5, #0]
 800d86e:	bd38      	pop	{r3, r4, r5, pc}
 800d870:	200068a8 	.word	0x200068a8

0800d874 <__sflush_r>:
 800d874:	898a      	ldrh	r2, [r1, #12]
 800d876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d87a:	4605      	mov	r5, r0
 800d87c:	0710      	lsls	r0, r2, #28
 800d87e:	460c      	mov	r4, r1
 800d880:	d458      	bmi.n	800d934 <__sflush_r+0xc0>
 800d882:	684b      	ldr	r3, [r1, #4]
 800d884:	2b00      	cmp	r3, #0
 800d886:	dc05      	bgt.n	800d894 <__sflush_r+0x20>
 800d888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	dc02      	bgt.n	800d894 <__sflush_r+0x20>
 800d88e:	2000      	movs	r0, #0
 800d890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d896:	2e00      	cmp	r6, #0
 800d898:	d0f9      	beq.n	800d88e <__sflush_r+0x1a>
 800d89a:	2300      	movs	r3, #0
 800d89c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d8a0:	682f      	ldr	r7, [r5, #0]
 800d8a2:	6a21      	ldr	r1, [r4, #32]
 800d8a4:	602b      	str	r3, [r5, #0]
 800d8a6:	d032      	beq.n	800d90e <__sflush_r+0x9a>
 800d8a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	075a      	lsls	r2, r3, #29
 800d8ae:	d505      	bpl.n	800d8bc <__sflush_r+0x48>
 800d8b0:	6863      	ldr	r3, [r4, #4]
 800d8b2:	1ac0      	subs	r0, r0, r3
 800d8b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d8b6:	b10b      	cbz	r3, 800d8bc <__sflush_r+0x48>
 800d8b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8ba:	1ac0      	subs	r0, r0, r3
 800d8bc:	2300      	movs	r3, #0
 800d8be:	4602      	mov	r2, r0
 800d8c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8c2:	6a21      	ldr	r1, [r4, #32]
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	47b0      	blx	r6
 800d8c8:	1c43      	adds	r3, r0, #1
 800d8ca:	89a3      	ldrh	r3, [r4, #12]
 800d8cc:	d106      	bne.n	800d8dc <__sflush_r+0x68>
 800d8ce:	6829      	ldr	r1, [r5, #0]
 800d8d0:	291d      	cmp	r1, #29
 800d8d2:	d848      	bhi.n	800d966 <__sflush_r+0xf2>
 800d8d4:	4a29      	ldr	r2, [pc, #164]	; (800d97c <__sflush_r+0x108>)
 800d8d6:	40ca      	lsrs	r2, r1
 800d8d8:	07d6      	lsls	r6, r2, #31
 800d8da:	d544      	bpl.n	800d966 <__sflush_r+0xf2>
 800d8dc:	2200      	movs	r2, #0
 800d8de:	6062      	str	r2, [r4, #4]
 800d8e0:	04d9      	lsls	r1, r3, #19
 800d8e2:	6922      	ldr	r2, [r4, #16]
 800d8e4:	6022      	str	r2, [r4, #0]
 800d8e6:	d504      	bpl.n	800d8f2 <__sflush_r+0x7e>
 800d8e8:	1c42      	adds	r2, r0, #1
 800d8ea:	d101      	bne.n	800d8f0 <__sflush_r+0x7c>
 800d8ec:	682b      	ldr	r3, [r5, #0]
 800d8ee:	b903      	cbnz	r3, 800d8f2 <__sflush_r+0x7e>
 800d8f0:	6560      	str	r0, [r4, #84]	; 0x54
 800d8f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8f4:	602f      	str	r7, [r5, #0]
 800d8f6:	2900      	cmp	r1, #0
 800d8f8:	d0c9      	beq.n	800d88e <__sflush_r+0x1a>
 800d8fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8fe:	4299      	cmp	r1, r3
 800d900:	d002      	beq.n	800d908 <__sflush_r+0x94>
 800d902:	4628      	mov	r0, r5
 800d904:	f7ff fb10 	bl	800cf28 <_free_r>
 800d908:	2000      	movs	r0, #0
 800d90a:	6360      	str	r0, [r4, #52]	; 0x34
 800d90c:	e7c0      	b.n	800d890 <__sflush_r+0x1c>
 800d90e:	2301      	movs	r3, #1
 800d910:	4628      	mov	r0, r5
 800d912:	47b0      	blx	r6
 800d914:	1c41      	adds	r1, r0, #1
 800d916:	d1c8      	bne.n	800d8aa <__sflush_r+0x36>
 800d918:	682b      	ldr	r3, [r5, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d0c5      	beq.n	800d8aa <__sflush_r+0x36>
 800d91e:	2b1d      	cmp	r3, #29
 800d920:	d001      	beq.n	800d926 <__sflush_r+0xb2>
 800d922:	2b16      	cmp	r3, #22
 800d924:	d101      	bne.n	800d92a <__sflush_r+0xb6>
 800d926:	602f      	str	r7, [r5, #0]
 800d928:	e7b1      	b.n	800d88e <__sflush_r+0x1a>
 800d92a:	89a3      	ldrh	r3, [r4, #12]
 800d92c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d930:	81a3      	strh	r3, [r4, #12]
 800d932:	e7ad      	b.n	800d890 <__sflush_r+0x1c>
 800d934:	690f      	ldr	r7, [r1, #16]
 800d936:	2f00      	cmp	r7, #0
 800d938:	d0a9      	beq.n	800d88e <__sflush_r+0x1a>
 800d93a:	0793      	lsls	r3, r2, #30
 800d93c:	680e      	ldr	r6, [r1, #0]
 800d93e:	bf08      	it	eq
 800d940:	694b      	ldreq	r3, [r1, #20]
 800d942:	600f      	str	r7, [r1, #0]
 800d944:	bf18      	it	ne
 800d946:	2300      	movne	r3, #0
 800d948:	eba6 0807 	sub.w	r8, r6, r7
 800d94c:	608b      	str	r3, [r1, #8]
 800d94e:	f1b8 0f00 	cmp.w	r8, #0
 800d952:	dd9c      	ble.n	800d88e <__sflush_r+0x1a>
 800d954:	4643      	mov	r3, r8
 800d956:	463a      	mov	r2, r7
 800d958:	6a21      	ldr	r1, [r4, #32]
 800d95a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d95c:	4628      	mov	r0, r5
 800d95e:	47b0      	blx	r6
 800d960:	2800      	cmp	r0, #0
 800d962:	dc06      	bgt.n	800d972 <__sflush_r+0xfe>
 800d964:	89a3      	ldrh	r3, [r4, #12]
 800d966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d96a:	81a3      	strh	r3, [r4, #12]
 800d96c:	f04f 30ff 	mov.w	r0, #4294967295
 800d970:	e78e      	b.n	800d890 <__sflush_r+0x1c>
 800d972:	4407      	add	r7, r0
 800d974:	eba8 0800 	sub.w	r8, r8, r0
 800d978:	e7e9      	b.n	800d94e <__sflush_r+0xda>
 800d97a:	bf00      	nop
 800d97c:	20400001 	.word	0x20400001

0800d980 <_fflush_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	690b      	ldr	r3, [r1, #16]
 800d984:	4605      	mov	r5, r0
 800d986:	460c      	mov	r4, r1
 800d988:	b1db      	cbz	r3, 800d9c2 <_fflush_r+0x42>
 800d98a:	b118      	cbz	r0, 800d994 <_fflush_r+0x14>
 800d98c:	6983      	ldr	r3, [r0, #24]
 800d98e:	b90b      	cbnz	r3, 800d994 <_fflush_r+0x14>
 800d990:	f7ff fa38 	bl	800ce04 <__sinit>
 800d994:	4b0c      	ldr	r3, [pc, #48]	; (800d9c8 <_fflush_r+0x48>)
 800d996:	429c      	cmp	r4, r3
 800d998:	d109      	bne.n	800d9ae <_fflush_r+0x2e>
 800d99a:	686c      	ldr	r4, [r5, #4]
 800d99c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9a0:	b17b      	cbz	r3, 800d9c2 <_fflush_r+0x42>
 800d9a2:	4621      	mov	r1, r4
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9aa:	f7ff bf63 	b.w	800d874 <__sflush_r>
 800d9ae:	4b07      	ldr	r3, [pc, #28]	; (800d9cc <_fflush_r+0x4c>)
 800d9b0:	429c      	cmp	r4, r3
 800d9b2:	d101      	bne.n	800d9b8 <_fflush_r+0x38>
 800d9b4:	68ac      	ldr	r4, [r5, #8]
 800d9b6:	e7f1      	b.n	800d99c <_fflush_r+0x1c>
 800d9b8:	4b05      	ldr	r3, [pc, #20]	; (800d9d0 <_fflush_r+0x50>)
 800d9ba:	429c      	cmp	r4, r3
 800d9bc:	bf08      	it	eq
 800d9be:	68ec      	ldreq	r4, [r5, #12]
 800d9c0:	e7ec      	b.n	800d99c <_fflush_r+0x1c>
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	bd38      	pop	{r3, r4, r5, pc}
 800d9c6:	bf00      	nop
 800d9c8:	0801063c 	.word	0x0801063c
 800d9cc:	0801065c 	.word	0x0801065c
 800d9d0:	0801061c 	.word	0x0801061c

0800d9d4 <_lseek_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	4c07      	ldr	r4, [pc, #28]	; (800d9f4 <_lseek_r+0x20>)
 800d9d8:	4605      	mov	r5, r0
 800d9da:	4608      	mov	r0, r1
 800d9dc:	4611      	mov	r1, r2
 800d9de:	2200      	movs	r2, #0
 800d9e0:	6022      	str	r2, [r4, #0]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	f7f2 ff3a 	bl	800085c <_lseek>
 800d9e8:	1c43      	adds	r3, r0, #1
 800d9ea:	d102      	bne.n	800d9f2 <_lseek_r+0x1e>
 800d9ec:	6823      	ldr	r3, [r4, #0]
 800d9ee:	b103      	cbz	r3, 800d9f2 <_lseek_r+0x1e>
 800d9f0:	602b      	str	r3, [r5, #0]
 800d9f2:	bd38      	pop	{r3, r4, r5, pc}
 800d9f4:	200068a8 	.word	0x200068a8

0800d9f8 <__swhatbuf_r>:
 800d9f8:	b570      	push	{r4, r5, r6, lr}
 800d9fa:	460e      	mov	r6, r1
 800d9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da00:	2900      	cmp	r1, #0
 800da02:	b096      	sub	sp, #88	; 0x58
 800da04:	4614      	mov	r4, r2
 800da06:	461d      	mov	r5, r3
 800da08:	da07      	bge.n	800da1a <__swhatbuf_r+0x22>
 800da0a:	2300      	movs	r3, #0
 800da0c:	602b      	str	r3, [r5, #0]
 800da0e:	89b3      	ldrh	r3, [r6, #12]
 800da10:	061a      	lsls	r2, r3, #24
 800da12:	d410      	bmi.n	800da36 <__swhatbuf_r+0x3e>
 800da14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da18:	e00e      	b.n	800da38 <__swhatbuf_r+0x40>
 800da1a:	466a      	mov	r2, sp
 800da1c:	f000 f864 	bl	800dae8 <_fstat_r>
 800da20:	2800      	cmp	r0, #0
 800da22:	dbf2      	blt.n	800da0a <__swhatbuf_r+0x12>
 800da24:	9a01      	ldr	r2, [sp, #4]
 800da26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800da2e:	425a      	negs	r2, r3
 800da30:	415a      	adcs	r2, r3
 800da32:	602a      	str	r2, [r5, #0]
 800da34:	e7ee      	b.n	800da14 <__swhatbuf_r+0x1c>
 800da36:	2340      	movs	r3, #64	; 0x40
 800da38:	2000      	movs	r0, #0
 800da3a:	6023      	str	r3, [r4, #0]
 800da3c:	b016      	add	sp, #88	; 0x58
 800da3e:	bd70      	pop	{r4, r5, r6, pc}

0800da40 <__smakebuf_r>:
 800da40:	898b      	ldrh	r3, [r1, #12]
 800da42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da44:	079d      	lsls	r5, r3, #30
 800da46:	4606      	mov	r6, r0
 800da48:	460c      	mov	r4, r1
 800da4a:	d507      	bpl.n	800da5c <__smakebuf_r+0x1c>
 800da4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	6123      	str	r3, [r4, #16]
 800da54:	2301      	movs	r3, #1
 800da56:	6163      	str	r3, [r4, #20]
 800da58:	b002      	add	sp, #8
 800da5a:	bd70      	pop	{r4, r5, r6, pc}
 800da5c:	ab01      	add	r3, sp, #4
 800da5e:	466a      	mov	r2, sp
 800da60:	f7ff ffca 	bl	800d9f8 <__swhatbuf_r>
 800da64:	9900      	ldr	r1, [sp, #0]
 800da66:	4605      	mov	r5, r0
 800da68:	4630      	mov	r0, r6
 800da6a:	f7ff faab 	bl	800cfc4 <_malloc_r>
 800da6e:	b948      	cbnz	r0, 800da84 <__smakebuf_r+0x44>
 800da70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da74:	059a      	lsls	r2, r3, #22
 800da76:	d4ef      	bmi.n	800da58 <__smakebuf_r+0x18>
 800da78:	f023 0303 	bic.w	r3, r3, #3
 800da7c:	f043 0302 	orr.w	r3, r3, #2
 800da80:	81a3      	strh	r3, [r4, #12]
 800da82:	e7e3      	b.n	800da4c <__smakebuf_r+0xc>
 800da84:	4b0d      	ldr	r3, [pc, #52]	; (800dabc <__smakebuf_r+0x7c>)
 800da86:	62b3      	str	r3, [r6, #40]	; 0x28
 800da88:	89a3      	ldrh	r3, [r4, #12]
 800da8a:	6020      	str	r0, [r4, #0]
 800da8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da90:	81a3      	strh	r3, [r4, #12]
 800da92:	9b00      	ldr	r3, [sp, #0]
 800da94:	6163      	str	r3, [r4, #20]
 800da96:	9b01      	ldr	r3, [sp, #4]
 800da98:	6120      	str	r0, [r4, #16]
 800da9a:	b15b      	cbz	r3, 800dab4 <__smakebuf_r+0x74>
 800da9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daa0:	4630      	mov	r0, r6
 800daa2:	f000 f833 	bl	800db0c <_isatty_r>
 800daa6:	b128      	cbz	r0, 800dab4 <__smakebuf_r+0x74>
 800daa8:	89a3      	ldrh	r3, [r4, #12]
 800daaa:	f023 0303 	bic.w	r3, r3, #3
 800daae:	f043 0301 	orr.w	r3, r3, #1
 800dab2:	81a3      	strh	r3, [r4, #12]
 800dab4:	89a3      	ldrh	r3, [r4, #12]
 800dab6:	431d      	orrs	r5, r3
 800dab8:	81a5      	strh	r5, [r4, #12]
 800daba:	e7cd      	b.n	800da58 <__smakebuf_r+0x18>
 800dabc:	0800cdcd 	.word	0x0800cdcd

0800dac0 <__malloc_lock>:
 800dac0:	4770      	bx	lr

0800dac2 <__malloc_unlock>:
 800dac2:	4770      	bx	lr

0800dac4 <_read_r>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	4c07      	ldr	r4, [pc, #28]	; (800dae4 <_read_r+0x20>)
 800dac8:	4605      	mov	r5, r0
 800daca:	4608      	mov	r0, r1
 800dacc:	4611      	mov	r1, r2
 800dace:	2200      	movs	r2, #0
 800dad0:	6022      	str	r2, [r4, #0]
 800dad2:	461a      	mov	r2, r3
 800dad4:	f7f2 fe62 	bl	800079c <_read>
 800dad8:	1c43      	adds	r3, r0, #1
 800dada:	d102      	bne.n	800dae2 <_read_r+0x1e>
 800dadc:	6823      	ldr	r3, [r4, #0]
 800dade:	b103      	cbz	r3, 800dae2 <_read_r+0x1e>
 800dae0:	602b      	str	r3, [r5, #0]
 800dae2:	bd38      	pop	{r3, r4, r5, pc}
 800dae4:	200068a8 	.word	0x200068a8

0800dae8 <_fstat_r>:
 800dae8:	b538      	push	{r3, r4, r5, lr}
 800daea:	4c07      	ldr	r4, [pc, #28]	; (800db08 <_fstat_r+0x20>)
 800daec:	2300      	movs	r3, #0
 800daee:	4605      	mov	r5, r0
 800daf0:	4608      	mov	r0, r1
 800daf2:	4611      	mov	r1, r2
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	f7f2 fe96 	bl	8000826 <_fstat>
 800dafa:	1c43      	adds	r3, r0, #1
 800dafc:	d102      	bne.n	800db04 <_fstat_r+0x1c>
 800dafe:	6823      	ldr	r3, [r4, #0]
 800db00:	b103      	cbz	r3, 800db04 <_fstat_r+0x1c>
 800db02:	602b      	str	r3, [r5, #0]
 800db04:	bd38      	pop	{r3, r4, r5, pc}
 800db06:	bf00      	nop
 800db08:	200068a8 	.word	0x200068a8

0800db0c <_isatty_r>:
 800db0c:	b538      	push	{r3, r4, r5, lr}
 800db0e:	4c06      	ldr	r4, [pc, #24]	; (800db28 <_isatty_r+0x1c>)
 800db10:	2300      	movs	r3, #0
 800db12:	4605      	mov	r5, r0
 800db14:	4608      	mov	r0, r1
 800db16:	6023      	str	r3, [r4, #0]
 800db18:	f7f2 fe95 	bl	8000846 <_isatty>
 800db1c:	1c43      	adds	r3, r0, #1
 800db1e:	d102      	bne.n	800db26 <_isatty_r+0x1a>
 800db20:	6823      	ldr	r3, [r4, #0]
 800db22:	b103      	cbz	r3, 800db26 <_isatty_r+0x1a>
 800db24:	602b      	str	r3, [r5, #0]
 800db26:	bd38      	pop	{r3, r4, r5, pc}
 800db28:	200068a8 	.word	0x200068a8

0800db2c <_init>:
 800db2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db2e:	bf00      	nop
 800db30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db32:	bc08      	pop	{r3}
 800db34:	469e      	mov	lr, r3
 800db36:	4770      	bx	lr

0800db38 <_fini>:
 800db38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3a:	bf00      	nop
 800db3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db3e:	bc08      	pop	{r3}
 800db40:	469e      	mov	lr, r3
 800db42:	4770      	bx	lr
